
minima_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800af18  0800af18  0001af18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b210  0800b210  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b210  0800b210  0001b210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b218  0800b218  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b218  0800b218  0001b218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b21c  0800b21c  0001b21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  200001e0  0800b3fc  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  0800b3fc  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c554  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c83  00000000  00000000  0002c760  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a70  00000000  00000000  0002e3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009a8  00000000  00000000  0002ee58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016561  00000000  00000000  0002f800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009112  00000000  00000000  00045d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088739  00000000  00000000  0004ee73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d75ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003920  00000000  00000000  000d7628  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aefc 	.word	0x0800aefc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800aefc 	.word	0x0800aefc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <bcd2dec>:

I2C_HandleTypeDef *hi2c_ds3231;
uint8_t Ds3231Buffer[7];

uint8_t bcd2dec(uint8_t BCD)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	//return (((BCD & 0xF0)>>4) *10) + (BCD & 0xF);
	 return ((BCD / 16 * 10) + (BCD % 16));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	091b      	lsrs	r3, r3, #4
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	4413      	add	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 030f 	and.w	r3, r3, #15
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4413      	add	r3, r2
 8000fdc:	b2db      	uxtb	r3, r3
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <dec2bcd>:

uint8_t dec2bcd(uint8_t DEC)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
	//return ((DEC / 10)<<4) + (DEC % 10);
	 return ((DEC / 10 * 16) + (DEC % 10));
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4a0c      	ldr	r2, [pc, #48]	; (800102c <dec2bcd+0x40>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	b2d8      	uxtb	r0, r3
 8001006:	79fa      	ldrb	r2, [r7, #7]
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <dec2bcd+0x40>)
 800100a:	fba3 1302 	umull	r1, r3, r3, r2
 800100e:	08d9      	lsrs	r1, r3, #3
 8001010:	460b      	mov	r3, r1
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b2db      	uxtb	r3, r3
 800101c:	4403      	add	r3, r0
 800101e:	b2db      	uxtb	r3, r3
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	cccccccd 	.word	0xcccccccd

08001030 <DS3231_GetDateTime>:


void DS3231_GetDateTime(RTC_data *rtc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af04      	add	r7, sp, #16
 8001036:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(hi2c_ds3231, DS3231_ADDRESS<<1, 0x00, 1, Ds3231Buffer, 7, 100);
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <DS3231_GetDateTime+0xa8>)
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	2364      	movs	r3, #100	; 0x64
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2307      	movs	r3, #7
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	4b25      	ldr	r3, [pc, #148]	; (80010dc <DS3231_GetDateTime+0xac>)
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	2200      	movs	r2, #0
 800104c:	21d0      	movs	r1, #208	; 0xd0
 800104e:	f002 fd71 	bl	8003b34 <HAL_I2C_Mem_Read>
	rtc->second = bcd2dec(Ds3231Buffer[0]);
 8001052:	4b22      	ldr	r3, [pc, #136]	; (80010dc <DS3231_GetDateTime+0xac>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ffae 	bl	8000fb8 <bcd2dec>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	711a      	strb	r2, [r3, #4]
	rtc->minute= bcd2dec(Ds3231Buffer[1]);
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <DS3231_GetDateTime+0xac>)
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ffa5 	bl	8000fb8 <bcd2dec>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	715a      	strb	r2, [r3, #5]
	rtc->hour = bcd2dec(Ds3231Buffer[2] & 0x3F);
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <DS3231_GetDateTime+0xac>)
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff99 	bl	8000fb8 <bcd2dec>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	719a      	strb	r2, [r3, #6]
	rtc->day = bcd2dec(Ds3231Buffer[4]);
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <DS3231_GetDateTime+0xac>)
 8001090:	791b      	ldrb	r3, [r3, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff90 	bl	8000fb8 <bcd2dec>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	71da      	strb	r2, [r3, #7]
	rtc->month = bcd2dec(Ds3231Buffer[5] & 0x1F);
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <DS3231_GetDateTime+0xac>)
 80010a2:	795b      	ldrb	r3, [r3, #5]
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ff84 	bl	8000fb8 <bcd2dec>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	721a      	strb	r2, [r3, #8]
	rtc->year = 2000 + bcd2dec(Ds3231Buffer[6]);
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <DS3231_GetDateTime+0xac>)
 80010ba:	799b      	ldrb	r3, [r3, #6]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff7b 	bl	8000fb8 <bcd2dec>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	815a      	strh	r2, [r3, #10]

}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000218 	.word	0x20000218
 80010dc:	2000021c 	.word	0x2000021c

080010e0 <dayofweek>:

int dayofweek(int Day, int Month, int Year)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b08b      	sub	sp, #44	; 0x2c
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
    int Y, C, M, N, D;
    M = 1 + (9 + Month) % 12;
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	f103 0109 	add.w	r1, r3, #9
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <dayofweek+0xe4>)
 80010f4:	fb83 2301 	smull	r2, r3, r3, r1
 80010f8:	105a      	asrs	r2, r3, #1
 80010fa:	17cb      	asrs	r3, r1, #31
 80010fc:	1ad2      	subs	r2, r2, r3
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	1aca      	subs	r2, r1, r3
 8001108:	1c53      	adds	r3, r2, #1
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    Y = Year - (M > 10);
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	2b0a      	cmp	r3, #10
 8001110:	bfcc      	ite	gt
 8001112:	2301      	movgt	r3, #1
 8001114:	2300      	movle	r3, #0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	1a9b      	subs	r3, r3, r2
 800111e:	623b      	str	r3, [r7, #32]
    C = Y / 100;
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	4a29      	ldr	r2, [pc, #164]	; (80011c8 <dayofweek+0xe8>)
 8001124:	fb82 1203 	smull	r1, r2, r2, r3
 8001128:	1152      	asrs	r2, r2, #5
 800112a:	17db      	asrs	r3, r3, #31
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	61fb      	str	r3, [r7, #28]
    D = Y % 100;
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <dayofweek+0xe8>)
 8001134:	fb82 1203 	smull	r1, r2, r2, r3
 8001138:	1151      	asrs	r1, r2, #5
 800113a:	17da      	asrs	r2, r3, #31
 800113c:	1a8a      	subs	r2, r1, r2
 800113e:	2164      	movs	r1, #100	; 0x64
 8001140:	fb01 f202 	mul.w	r2, r1, r2
 8001144:	1a9b      	subs	r3, r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
    N = ((13 * M - 1) / 5 + D + D / 4 + 6 * C + Day + 5) % 7;
 8001148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	3b01      	subs	r3, #1
 8001156:	4a1d      	ldr	r2, [pc, #116]	; (80011cc <dayofweek+0xec>)
 8001158:	fb82 1203 	smull	r1, r2, r2, r3
 800115c:	1052      	asrs	r2, r2, #1
 800115e:	17db      	asrs	r3, r3, #31
 8001160:	1ad2      	subs	r2, r2, r3
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	441a      	add	r2, r3
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b00      	cmp	r3, #0
 800116a:	da00      	bge.n	800116e <dayofweek+0x8e>
 800116c:	3303      	adds	r3, #3
 800116e:	109b      	asrs	r3, r3, #2
 8001170:	18d1      	adds	r1, r2, r3
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	4613      	mov	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	4413      	add	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	18ca      	adds	r2, r1, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4413      	add	r3, r2
 8001182:	1d5a      	adds	r2, r3, #5
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <dayofweek+0xf0>)
 8001186:	fb83 1302 	smull	r1, r3, r3, r2
 800118a:	4413      	add	r3, r2
 800118c:	1099      	asrs	r1, r3, #2
 800118e:	17d3      	asrs	r3, r2, #31
 8001190:	1ac9      	subs	r1, r1, r3
 8001192:	460b      	mov	r3, r1
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	1a5b      	subs	r3, r3, r1
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	617b      	str	r3, [r7, #20]
    return (7 + N) % 7;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	1dda      	adds	r2, r3, #7
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <dayofweek+0xf0>)
 80011a2:	fb83 1302 	smull	r1, r3, r3, r2
 80011a6:	4413      	add	r3, r2
 80011a8:	1099      	asrs	r1, r3, #2
 80011aa:	17d3      	asrs	r3, r2, #31
 80011ac:	1ac9      	subs	r1, r1, r3
 80011ae:	460b      	mov	r3, r1
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	1a5b      	subs	r3, r3, r1
 80011b4:	1ad1      	subs	r1, r2, r3
 80011b6:	460b      	mov	r3, r1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	372c      	adds	r7, #44	; 0x2c
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	2aaaaaab 	.word	0x2aaaaaab
 80011c8:	51eb851f 	.word	0x51eb851f
 80011cc:	66666667 	.word	0x66666667
 80011d0:	92492493 	.word	0x92492493

080011d4 <DS3231_SetDateTime>:


void DS3231_SetDateTime(RTC_setup *rtc)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af04      	add	r7, sp, #16
 80011da:	6078      	str	r0, [r7, #4]
	uint8_t tmp[7];

	tmp[0] = dec2bcd(rtc->second);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff03 	bl	8000fec <dec2bcd>
 80011e6:	4603      	mov	r3, r0
 80011e8:	723b      	strb	r3, [r7, #8]
	tmp[1] = dec2bcd(rtc->minute);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff fefc 	bl	8000fec <dec2bcd>
 80011f4:	4603      	mov	r3, r0
 80011f6:	727b      	strb	r3, [r7, #9]
	tmp[2] = dec2bcd(rtc->hour);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	789b      	ldrb	r3, [r3, #2]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fef5 	bl	8000fec <dec2bcd>
 8001202:	4603      	mov	r3, r0
 8001204:	72bb      	strb	r3, [r7, #10]
	tmp[3] = dayofweek(rtc->day, rtc->month, rtc->year) + 1;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	78db      	ldrb	r3, [r3, #3]
 800120a:	4618      	mov	r0, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	791b      	ldrb	r3, [r3, #4]
 8001210:	4619      	mov	r1, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	88db      	ldrh	r3, [r3, #6]
 8001216:	461a      	mov	r2, r3
 8001218:	f7ff ff62 	bl	80010e0 <dayofweek>
 800121c:	4603      	mov	r3, r0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	3301      	adds	r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	72fb      	strb	r3, [r7, #11]
	tmp[4] = dec2bcd(rtc->day);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	78db      	ldrb	r3, [r3, #3]
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fede 	bl	8000fec <dec2bcd>
 8001230:	4603      	mov	r3, r0
 8001232:	733b      	strb	r3, [r7, #12]
	tmp[5] = dec2bcd(rtc->month);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fed7 	bl	8000fec <dec2bcd>
 800123e:	4603      	mov	r3, r0
 8001240:	737b      	strb	r3, [r7, #13]
	tmp[6] = dec2bcd(rtc->year - 2000);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	88db      	ldrh	r3, [r3, #6]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	3330      	adds	r3, #48	; 0x30
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fecd 	bl	8000fec <dec2bcd>
 8001252:	4603      	mov	r3, r0
 8001254:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(hi2c_ds3231, DS3231_ADDRESS<<1, DS3231_REG_TIME, 1, tmp, 7, 100);
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <DS3231_SetDateTime+0xa8>)
 8001258:	6818      	ldr	r0, [r3, #0]
 800125a:	2364      	movs	r3, #100	; 0x64
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	2307      	movs	r3, #7
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	2200      	movs	r2, #0
 800126c:	21d0      	movs	r1, #208	; 0xd0
 800126e:	f002 fb67 	bl	8003940 <HAL_I2C_Mem_Write>
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000218 	.word	0x20000218

08001280 <DS3231_Init>:

void DS3231_Init(RTC_data *rtc, I2C_HandleTypeDef *hi2c)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
	rtc->huart_sds=hi2c;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	601a      	str	r2, [r3, #0]
	hi2c_ds3231=hi2c;
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <DS3231_Init+0x24>)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	6013      	str	r3, [r2, #0]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	20000218 	.word	0x20000218

080012a8 <strtoke>:
/*
 * Behaves like strtok() except that it returns empty tokens also.
 * Found on https://stackoverflow.com/questions/42315585/split-string-into-tokens-in-c-when-there-are-2-delimiters-in-a-row
 */
char* strtoke(char *str, const char *delim)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  static char *start = NULL; /* stores string str for consecutive calls */
  char *token = NULL; /* found token */
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
  /* assign new start in case */
  if (str) start = str;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <strtoke+0x1a>
 80012bc:	4a12      	ldr	r2, [pc, #72]	; (8001308 <strtoke+0x60>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  /* check whether text to parse left */
  if (!start) return NULL;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <strtoke+0x60>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <strtoke+0x26>
 80012ca:	2300      	movs	r3, #0
 80012cc:	e017      	b.n	80012fe <strtoke+0x56>
  /* remember current start as found token */
  token = start;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <strtoke+0x60>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]
  /* find next occurrence of delim */
  start = strpbrk(start, delim);
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <strtoke+0x60>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6839      	ldr	r1, [r7, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f006 fed8 	bl	8008090 <strpbrk>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <strtoke+0x60>)
 80012e4:	601a      	str	r2, [r3, #0]
  /* replace delim with terminator and move start to follower */
  if (start) *start++ = '\0';
 80012e6:	4b08      	ldr	r3, [pc, #32]	; (8001308 <strtoke+0x60>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d006      	beq.n	80012fc <strtoke+0x54>
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <strtoke+0x60>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	4904      	ldr	r1, [pc, #16]	; (8001308 <strtoke+0x60>)
 80012f6:	600a      	str	r2, [r1, #0]
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
  /* done */
  return token;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200001fc 	.word	0x200001fc

0800130c <NEO6_ReceiveUartChar>:

void NEO6_ReceiveUartChar(NEO6_State *GpsStateHandler)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	uint8_t TempHead;

	TempHead = (GpsStateHandler->UartBufferHead + 1) % GPS_UART_BUFFER_SIZE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800131a:	3301      	adds	r3, #1
 800131c:	425a      	negs	r2, r3
 800131e:	b2db      	uxtb	r3, r3
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	bf58      	it	pl
 8001324:	4253      	negpl	r3, r2
 8001326:	73fb      	strb	r3, [r7, #15]

	if( TempHead == GpsStateHandler->UartBufferTail) // No room for new data
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	429a      	cmp	r2, r3
 8001332:	d106      	bne.n	8001342 <NEO6_ReceiveUartChar+0x36>
	{
		GpsStateHandler->UartBufferHead = GpsStateHandler->UartBufferTail;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
 8001340:	e02f      	b.n	80013a2 <NEO6_ReceiveUartChar+0x96>
	}
	else
	{
		if(UartReceivedChar == 13)
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <NEO6_ReceiveUartChar+0xac>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b0d      	cmp	r3, #13
 800134a:	d114      	bne.n	8001376 <NEO6_ReceiveUartChar+0x6a>
		{
			GpsStateHandler->UartBufferLines++;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001352:	3301      	adds	r3, #1
 8001354:	b2da      	uxtb	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
			GpsStateHandler->UartBufferHead = TempHead;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <NEO6_ReceiveUartChar+0xac>)
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	b2d1      	uxtb	r1, r2
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4413      	add	r3, r2
 8001370:	460a      	mov	r2, r1
 8001372:	711a      	strb	r2, [r3, #4]
 8001374:	e015      	b.n	80013a2 <NEO6_ReceiveUartChar+0x96>
		}
		else if((UartReceivedChar == 0) || (UartReceivedChar == 10))
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <NEO6_ReceiveUartChar+0xac>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d010      	beq.n	80013a2 <NEO6_ReceiveUartChar+0x96>
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <NEO6_ReceiveUartChar+0xac>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b0a      	cmp	r3, #10
 8001388:	d00b      	beq.n	80013a2 <NEO6_ReceiveUartChar+0x96>
		{
			// Ignore byte 0 and 10 (LF char)
		}
		else
		{
			GpsStateHandler->UartBufferHead = TempHead;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
			GpsStateHandler->UartBuffer[TempHead] = UartReceivedChar;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
 8001394:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <NEO6_ReceiveUartChar+0xac>)
 8001396:	7812      	ldrb	r2, [r2, #0]
 8001398:	b2d1      	uxtb	r1, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	460a      	mov	r2, r1
 80013a0:	711a      	strb	r2, [r3, #4]
		}

	}

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4903      	ldr	r1, [pc, #12]	; (80013b8 <NEO6_ReceiveUartChar+0xac>)
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 f980 	bl	80066b0 <HAL_UART_Receive_IT>
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000228 	.word	0x20000228

080013bc <NEO6_GetCharFromBuffer>:

int NEO6_GetCharFromBuffer(NEO6_State *GpsStateHandler)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferHead == GpsStateHandler->UartBufferTail)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d102      	bne.n	80013da <NEO6_GetCharFromBuffer+0x1e>
	{
		return -1; // error - no char to return
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	e013      	b.n	8001402 <NEO6_GetCharFromBuffer+0x46>
	}
	GpsStateHandler->UartBufferTail = (GpsStateHandler->UartBufferTail + 1) % GPS_UART_BUFFER_SIZE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80013e0:	3301      	adds	r3, #1
 80013e2:	425a      	negs	r2, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	bf58      	it	pl
 80013ea:	4253      	negpl	r3, r2
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

	return GpsStateHandler->UartBuffer[GpsStateHandler->UartBufferTail];
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3105 	ldrb.w	r3, [r3, #261]	; 0x105
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4413      	add	r3, r2
 8001400:	791b      	ldrb	r3, [r3, #4]
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <NEO6_GetLineFromBuffer>:

int NEO6_GetLineFromBuffer(NEO6_State *GpsStateHandler)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	char TempChar;
	char* LinePointer = (char*)GpsStateHandler->WorkingBuffer;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f203 1307 	addw	r3, r3, #263	; 0x107
 800141c:	60fb      	str	r3, [r7, #12]
	if(GpsStateHandler->UartBufferLines)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001424:	2b00      	cmp	r3, #0
 8001426:	d01e      	beq.n	8001466 <NEO6_GetLineFromBuffer+0x58>
	{
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 8001428:	e008      	b.n	800143c <NEO6_GetLineFromBuffer+0x2e>
		{
			if(TempChar == 13)
 800142a:	7afb      	ldrb	r3, [r7, #11]
 800142c:	2b0d      	cmp	r3, #13
 800142e:	d00e      	beq.n	800144e <NEO6_GetLineFromBuffer+0x40>
			{
				break;
			}
			*LinePointer = TempChar;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	7afa      	ldrb	r2, [r7, #11]
 8001434:	701a      	strb	r2, [r3, #0]
			LinePointer++;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	3301      	adds	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
		while((TempChar = NEO6_GetCharFromBuffer(GpsStateHandler)))
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ffbd 	bl	80013bc <NEO6_GetCharFromBuffer>
 8001442:	4603      	mov	r3, r0
 8001444:	72fb      	strb	r3, [r7, #11]
 8001446:	7afb      	ldrb	r3, [r7, #11]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1ee      	bne.n	800142a <NEO6_GetLineFromBuffer+0x1c>
 800144c:	e000      	b.n	8001450 <NEO6_GetLineFromBuffer+0x42>
				break;
 800144e:	bf00      	nop
		}
		*LinePointer = 0; // end of cstring
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
		GpsStateHandler->UartBufferLines--; // decrement line counter
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800145c:	3b01      	subs	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	}
	return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <NEO6_ParseGPRMC>:

//
// Recommended minimum specific GPS/Transit data
//
void NEO6_ParseGPRMC(NEO6_State *GpsStateHandler)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

	char *ParsePoiner;
	uint32_t Temp;

	// Time of FIX
	ParsePoiner = strtoke(NULL, ",");
 8001478:	4967      	ldr	r1, [pc, #412]	; (8001618 <NEO6_ParseGPRMC+0x1a8>)
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff ff14 	bl	80012a8 <strtoke>
 8001480:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d033      	beq.n	80014f2 <NEO6_ParseGPRMC+0x82>
	{
		Temp = atoi(ParsePoiner);
 800148a:	68f8      	ldr	r0, [r7, #12]
 800148c:	f005 ff65 	bl	800735a <atoi>
 8001490:	4603      	mov	r3, r0
 8001492:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Second = Temp % 100;
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	4b61      	ldr	r3, [pc, #388]	; (800161c <NEO6_ParseGPRMC+0x1ac>)
 8001498:	fba3 1302 	umull	r1, r3, r3, r2
 800149c:	095b      	lsrs	r3, r3, #5
 800149e:	2164      	movs	r1, #100	; 0x64
 80014a0:	fb01 f303 	mul.w	r3, r1, r3
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
		GpsStateHandler->Minute = (Temp / 100) % 100;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	4a5a      	ldr	r2, [pc, #360]	; (800161c <NEO6_ParseGPRMC+0x1ac>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	095a      	lsrs	r2, r3, #5
 80014b8:	4b58      	ldr	r3, [pc, #352]	; (800161c <NEO6_ParseGPRMC+0x1ac>)
 80014ba:	fba3 1302 	umull	r1, r3, r3, r2
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	2164      	movs	r1, #100	; 0x64
 80014c2:	fb01 f303 	mul.w	r3, r1, r3
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		GpsStateHandler->Hour = (Temp / 10000) % 100;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4a53      	ldr	r2, [pc, #332]	; (8001620 <NEO6_ParseGPRMC+0x1b0>)
 80014d4:	fba2 2303 	umull	r2, r3, r2, r3
 80014d8:	0b5a      	lsrs	r2, r3, #13
 80014da:	4b50      	ldr	r3, [pc, #320]	; (800161c <NEO6_ParseGPRMC+0x1ac>)
 80014dc:	fba3 1302 	umull	r1, r3, r3, r2
 80014e0:	095b      	lsrs	r3, r3, #5
 80014e2:	2164      	movs	r1, #100	; 0x64
 80014e4:	fb01 f303 	mul.w	r3, r1, r3
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	}
	// Navigation receiver warning A = OK, V = warning
	ParsePoiner = strtoke(NULL, ",");
 80014f2:	4949      	ldr	r1, [pc, #292]	; (8001618 <NEO6_ParseGPRMC+0x1a8>)
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fed7 	bl	80012a8 <strtoke>
 80014fa:	60f8      	str	r0, [r7, #12]
	// Latitude
	ParsePoiner = strtoke(NULL, ",");
 80014fc:	4946      	ldr	r1, [pc, #280]	; (8001618 <NEO6_ParseGPRMC+0x1a8>)
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fed2 	bl	80012a8 <strtoke>
 8001504:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d009      	beq.n	8001522 <NEO6_ParseGPRMC+0xb2>
	{
		GpsStateHandler->Latitude = atof(ParsePoiner);
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f005 ff20 	bl	8007354 <atof>
 8001514:	eeb0 7a40 	vmov.f32	s14, s0
 8001518:	eef0 7a60 	vmov.f32	s15, s1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	ed83 7b64 	vstr	d7, [r3, #400]	; 0x190
	}
	// Latitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8001522:	493d      	ldr	r1, [pc, #244]	; (8001618 <NEO6_ParseGPRMC+0x1a8>)
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff febf 	bl	80012a8 <strtoke>
 800152a:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <NEO6_ParseGPRMC+0xce>
	{
		GpsStateHandler->LatitudeDirection = *ParsePoiner;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	}
	// Longnitude
	ParsePoiner = strtoke(NULL, ",");
 800153e:	4936      	ldr	r1, [pc, #216]	; (8001618 <NEO6_ParseGPRMC+0x1a8>)
 8001540:	2000      	movs	r0, #0
 8001542:	f7ff feb1 	bl	80012a8 <strtoke>
 8001546:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d009      	beq.n	8001564 <NEO6_ParseGPRMC+0xf4>
	{
		GpsStateHandler->Longitude = atof(ParsePoiner);
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f005 feff 	bl	8007354 <atof>
 8001556:	eeb0 7a40 	vmov.f32	s14, s0
 800155a:	eef0 7a60 	vmov.f32	s15, s1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	ed83 7b68 	vstr	d7, [r3, #416]	; 0x1a0
	}
	// Longnitude Direction
	ParsePoiner = strtoke(NULL, ",");
 8001564:	492c      	ldr	r1, [pc, #176]	; (8001618 <NEO6_ParseGPRMC+0x1a8>)
 8001566:	2000      	movs	r0, #0
 8001568:	f7ff fe9e 	bl	80012a8 <strtoke>
 800156c:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <NEO6_ParseGPRMC+0x110>
	{
		GpsStateHandler->LongitudeDirection = *ParsePoiner;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	781a      	ldrb	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	}
	// Speed over ground, Knots
	ParsePoiner = strtoke(NULL, ",");
 8001580:	4925      	ldr	r1, [pc, #148]	; (8001618 <NEO6_ParseGPRMC+0x1a8>)
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fe90 	bl	80012a8 <strtoke>
 8001588:	60f8      	str	r0, [r7, #12]
	// Course Made Good, True
	ParsePoiner = strtoke(NULL, ",");
 800158a:	4923      	ldr	r1, [pc, #140]	; (8001618 <NEO6_ParseGPRMC+0x1a8>)
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fe8b 	bl	80012a8 <strtoke>
 8001592:	60f8      	str	r0, [r7, #12]
	// Date of fix
	ParsePoiner = strtoke(NULL, ",");
 8001594:	4920      	ldr	r1, [pc, #128]	; (8001618 <NEO6_ParseGPRMC+0x1a8>)
 8001596:	2000      	movs	r0, #0
 8001598:	f7ff fe86 	bl	80012a8 <strtoke>
 800159c:	60f8      	str	r0, [r7, #12]
	if(strlen(ParsePoiner) > 0)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d033      	beq.n	800160e <NEO6_ParseGPRMC+0x19e>
	{
		Temp = atoi(ParsePoiner);
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f005 fed7 	bl	800735a <atoi>
 80015ac:	4603      	mov	r3, r0
 80015ae:	60bb      	str	r3, [r7, #8]
		GpsStateHandler->Year = Temp % 100;
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <NEO6_ParseGPRMC+0x1ac>)
 80015b4:	fba3 1302 	umull	r1, r3, r3, r2
 80015b8:	095b      	lsrs	r3, r3, #5
 80015ba:	2164      	movs	r1, #100	; 0x64
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
		GpsStateHandler->Month = (Temp / 100) % 100;
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	4a13      	ldr	r2, [pc, #76]	; (800161c <NEO6_ParseGPRMC+0x1ac>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	095a      	lsrs	r2, r3, #5
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <NEO6_ParseGPRMC+0x1ac>)
 80015d6:	fba3 1302 	umull	r1, r3, r3, r2
 80015da:	095b      	lsrs	r3, r3, #5
 80015dc:	2164      	movs	r1, #100	; 0x64
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
		GpsStateHandler->Day = (Temp / 10000) % 100;
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <NEO6_ParseGPRMC+0x1b0>)
 80015f0:	fba2 2303 	umull	r2, r3, r2, r3
 80015f4:	0b5a      	lsrs	r2, r3, #13
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <NEO6_ParseGPRMC+0x1ac>)
 80015f8:	fba3 1302 	umull	r1, r3, r3, r2
 80015fc:	095b      	lsrs	r3, r3, #5
 80015fe:	2164      	movs	r1, #100	; 0x64
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	b2da      	uxtb	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	}
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	0800af18 	.word	0x0800af18
 800161c:	51eb851f 	.word	0x51eb851f
 8001620:	d1b71759 	.word	0xd1b71759

08001624 <NEO6_Task>:
{
	return GpsStateHandler->Quality;
}

void NEO6_Task(NEO6_State *GpsStateHandler)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	if(GpsStateHandler->UartBufferLines)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001632:	2b00      	cmp	r3, #0
 8001634:	d014      	beq.n	8001660 <NEO6_Task+0x3c>
	{
		NEO6_GetLineFromBuffer(GpsStateHandler);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fee9 	bl	800140e <NEO6_GetLineFromBuffer>
		if(strcmp(strtoke((char*)GpsStateHandler->WorkingBuffer, ","), "$GPRMC") == 0) NEO6_ParseGPRMC(GpsStateHandler);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f203 1307 	addw	r3, r3, #263	; 0x107
 8001642:	4909      	ldr	r1, [pc, #36]	; (8001668 <NEO6_Task+0x44>)
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fe2f 	bl	80012a8 <strtoke>
 800164a:	4603      	mov	r3, r0
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <NEO6_Task+0x48>)
 800164e:	4618      	mov	r0, r3
 8001650:	f7fe fdc6 	bl	80001e0 <strcmp>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <NEO6_Task+0x3c>
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ff08 	bl	8001470 <NEO6_ParseGPRMC>
	}
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	0800af18 	.word	0x0800af18
 800166c:	0800af1c 	.word	0x0800af1c

08001670 <NEO6_Init>:

void NEO6_Init(NEO6_State *GpsStateHandler, UART_HandleTypeDef *huart)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
	GpsStateHandler->neo6_huart = huart;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	601a      	str	r2, [r3, #0]
	GpsStateHandler->UartBufferHead = 0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	GpsStateHandler->UartBufferTail = 0;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
	GpsStateHandler->UartBufferLines = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

	GpsStateHandler->Hour = 0;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	GpsStateHandler->Minute = 0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	GpsStateHandler->Second = 0;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
	GpsStateHandler->Day = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	GpsStateHandler->Month = 0;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
	GpsStateHandler->Year = 0;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c

	GpsStateHandler->Latitude = 0;
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	f04f 0400 	mov.w	r4, #0
 80016d2:	e9c2 3464 	strd	r3, r4, [r2, #400]	; 0x190
	GpsStateHandler->LatitudeDirection = '0';
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2230      	movs	r2, #48	; 0x30
 80016da:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	GpsStateHandler->Longitude = 0;
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	f04f 0400 	mov.w	r4, #0
 80016e8:	e9c2 3468 	strd	r3, r4, [r2, #416]	; 0x1a0
	GpsStateHandler->LongitudeDirection = '0';
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2230      	movs	r2, #48	; 0x30
 80016f0:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	GpsStateHandler->SpeedKilometers = 0;
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	f04f 0400 	mov.w	r4, #0
 80016fe:	e9c2 3470 	strd	r3, r4, [r2, #448]	; 0x1c0
	GpsStateHandler->SpeedKnots = 0;
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	f04f 0400 	mov.w	r4, #0
 800170c:	e9c2 346e 	strd	r3, r4, [r2, #440]	; 0x1b8

	GpsStateHandler->SatelitesNumber = 0;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	GpsStateHandler->Quality = 0;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	GpsStateHandler->Dop = 0;
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	f04f 0400 	mov.w	r4, #0
 800172a:	e9c2 3474 	strd	r3, r4, [r2, #464]	; 0x1d0
	GpsStateHandler->Hdop = 0;
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	f04f 0400 	mov.w	r4, #0
 8001738:	e9c2 3476 	strd	r3, r4, [r2, #472]	; 0x1d8
	GpsStateHandler->Vdop = 0;
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f04f 0400 	mov.w	r4, #0
 8001746:	e9c2 3478 	strd	r3, r4, [r2, #480]	; 0x1e0

	HAL_UART_Receive_IT(GpsStateHandler->neo6_huart, (uint8_t*)&UartReceivedChar, 1);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	4903      	ldr	r1, [pc, #12]	; (8001760 <NEO6_Init+0xf0>)
 8001752:	4618      	mov	r0, r3
 8001754:	f004 ffac 	bl	80066b0 <HAL_UART_Receive_IT>
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	20000228 	.word	0x20000228

08001764 <vprint>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void vprint(const char *fmt, va_list argp) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b0b4      	sub	sp, #208	; 0xd0
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
	char string[200];
	if (0 < vsprintf(string, fmt, argp)) // build string
 800176e:	f107 0308 	add.w	r3, r7, #8
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4618      	mov	r0, r3
 8001778:	f007 fb94 	bl	8008ea4 <vsiprintf>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	dd0d      	ble.n	800179e <vprint+0x3a>
			{
		HAL_UART_Transmit(&huart2, (uint8_t*) string, strlen(string), 0xffffff); // send message via UART
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fd34 	bl	80001f4 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	f107 0108 	add.w	r1, r7, #8
 8001794:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001798:	4803      	ldr	r0, [pc, #12]	; (80017a8 <vprint+0x44>)
 800179a:	f004 fef0 	bl	800657e <HAL_UART_Transmit>
	}
}
 800179e:	bf00      	nop
 80017a0:	37d0      	adds	r7, #208	; 0xd0
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000504 	.word	0x20000504

080017ac <my_printf>:

void my_printf(const char *fmt, ...) // custom printf() function
{
 80017ac:	b40f      	push	{r0, r1, r2, r3}
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
	va_list argp;
	va_start(argp, fmt);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	607b      	str	r3, [r7, #4]
	vprint(fmt, argp);
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	6938      	ldr	r0, [r7, #16]
 80017be:	f7ff ffd1 	bl	8001764 <vprint>
	va_end(argp);
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017cc:	b004      	add	sp, #16
 80017ce:	4770      	bx	lr

080017d0 <sprint_Hour1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sprint_Hour1(int digit) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	switch (digit) {
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b09      	cmp	r3, #9
 80017dc:	f200 80ea 	bhi.w	80019b4 <sprint_Hour1+0x1e4>
 80017e0:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <sprint_Hour1+0x18>)
 80017e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e6:	bf00      	nop
 80017e8:	08001811 	.word	0x08001811
 80017ec:	0800183b 	.word	0x0800183b
 80017f0:	08001865 	.word	0x08001865
 80017f4:	0800188f 	.word	0x0800188f
 80017f8:	080018b9 	.word	0x080018b9
 80017fc:	080018e3 	.word	0x080018e3
 8001800:	0800190d 	.word	0x0800190d
 8001804:	08001937 	.word	0x08001937
 8001808:	08001961 	.word	0x08001961
 800180c:	0800198b 	.word	0x0800198b
	case 0:
		HAL_GPIO_WritePin(HOUR_1_D_GPIO_Port, HOUR_1_D_Pin, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	2101      	movs	r1, #1
 8001814:	486a      	ldr	r0, [pc, #424]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001816:	f001 ff29 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_C_GPIO_Port, HOUR_1_C_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2102      	movs	r1, #2
 800181e:	4868      	ldr	r0, [pc, #416]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001820:	f001 ff24 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_B_GPIO_Port, HOUR_1_B_Pin, GPIO_PIN_RESET);
 8001824:	2200      	movs	r2, #0
 8001826:	2108      	movs	r1, #8
 8001828:	4865      	ldr	r0, [pc, #404]	; (80019c0 <sprint_Hour1+0x1f0>)
 800182a:	f001 ff1f 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_A_GPIO_Port, HOUR_1_A_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2104      	movs	r1, #4
 8001832:	4863      	ldr	r0, [pc, #396]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001834:	f001 ff1a 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001838:	e0bd      	b.n	80019b6 <sprint_Hour1+0x1e6>
	case 1:
		HAL_GPIO_WritePin(HOUR_1_D_GPIO_Port, HOUR_1_D_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2101      	movs	r1, #1
 800183e:	4860      	ldr	r0, [pc, #384]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001840:	f001 ff14 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_C_GPIO_Port, HOUR_1_C_Pin, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	2102      	movs	r1, #2
 8001848:	485d      	ldr	r0, [pc, #372]	; (80019c0 <sprint_Hour1+0x1f0>)
 800184a:	f001 ff0f 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_B_GPIO_Port, HOUR_1_B_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2108      	movs	r1, #8
 8001852:	485b      	ldr	r0, [pc, #364]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001854:	f001 ff0a 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_A_GPIO_Port, HOUR_1_A_Pin, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2104      	movs	r1, #4
 800185c:	4858      	ldr	r0, [pc, #352]	; (80019c0 <sprint_Hour1+0x1f0>)
 800185e:	f001 ff05 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001862:	e0a8      	b.n	80019b6 <sprint_Hour1+0x1e6>
	case 2:
		HAL_GPIO_WritePin(HOUR_1_D_GPIO_Port, HOUR_1_D_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	4855      	ldr	r0, [pc, #340]	; (80019c0 <sprint_Hour1+0x1f0>)
 800186a:	f001 feff 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_C_GPIO_Port, HOUR_1_C_Pin, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2102      	movs	r1, #2
 8001872:	4853      	ldr	r0, [pc, #332]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001874:	f001 fefa 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_B_GPIO_Port, HOUR_1_B_Pin, GPIO_PIN_SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2108      	movs	r1, #8
 800187c:	4850      	ldr	r0, [pc, #320]	; (80019c0 <sprint_Hour1+0x1f0>)
 800187e:	f001 fef5 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_A_GPIO_Port, HOUR_1_A_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	2104      	movs	r1, #4
 8001886:	484e      	ldr	r0, [pc, #312]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001888:	f001 fef0 	bl	800366c <HAL_GPIO_WritePin>
		break;
 800188c:	e093      	b.n	80019b6 <sprint_Hour1+0x1e6>
	case 3:
		HAL_GPIO_WritePin(HOUR_1_D_GPIO_Port, HOUR_1_D_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2101      	movs	r1, #1
 8001892:	484b      	ldr	r0, [pc, #300]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001894:	f001 feea 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_C_GPIO_Port, HOUR_1_C_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2102      	movs	r1, #2
 800189c:	4848      	ldr	r0, [pc, #288]	; (80019c0 <sprint_Hour1+0x1f0>)
 800189e:	f001 fee5 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_B_GPIO_Port, HOUR_1_B_Pin, GPIO_PIN_SET);
 80018a2:	2201      	movs	r2, #1
 80018a4:	2108      	movs	r1, #8
 80018a6:	4846      	ldr	r0, [pc, #280]	; (80019c0 <sprint_Hour1+0x1f0>)
 80018a8:	f001 fee0 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_A_GPIO_Port, HOUR_1_A_Pin, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	2104      	movs	r1, #4
 80018b0:	4843      	ldr	r0, [pc, #268]	; (80019c0 <sprint_Hour1+0x1f0>)
 80018b2:	f001 fedb 	bl	800366c <HAL_GPIO_WritePin>
		break;
 80018b6:	e07e      	b.n	80019b6 <sprint_Hour1+0x1e6>
	case 4:
		HAL_GPIO_WritePin(HOUR_1_D_GPIO_Port, HOUR_1_D_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2101      	movs	r1, #1
 80018bc:	4840      	ldr	r0, [pc, #256]	; (80019c0 <sprint_Hour1+0x1f0>)
 80018be:	f001 fed5 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_C_GPIO_Port, HOUR_1_C_Pin, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	2102      	movs	r1, #2
 80018c6:	483e      	ldr	r0, [pc, #248]	; (80019c0 <sprint_Hour1+0x1f0>)
 80018c8:	f001 fed0 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_B_GPIO_Port, HOUR_1_B_Pin, GPIO_PIN_RESET);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2108      	movs	r1, #8
 80018d0:	483b      	ldr	r0, [pc, #236]	; (80019c0 <sprint_Hour1+0x1f0>)
 80018d2:	f001 fecb 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_A_GPIO_Port, HOUR_1_A_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2104      	movs	r1, #4
 80018da:	4839      	ldr	r0, [pc, #228]	; (80019c0 <sprint_Hour1+0x1f0>)
 80018dc:	f001 fec6 	bl	800366c <HAL_GPIO_WritePin>
		break;
 80018e0:	e069      	b.n	80019b6 <sprint_Hour1+0x1e6>
	case 5:
		HAL_GPIO_WritePin(HOUR_1_D_GPIO_Port, HOUR_1_D_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2101      	movs	r1, #1
 80018e6:	4836      	ldr	r0, [pc, #216]	; (80019c0 <sprint_Hour1+0x1f0>)
 80018e8:	f001 fec0 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_C_GPIO_Port, HOUR_1_C_Pin, GPIO_PIN_SET);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2102      	movs	r1, #2
 80018f0:	4833      	ldr	r0, [pc, #204]	; (80019c0 <sprint_Hour1+0x1f0>)
 80018f2:	f001 febb 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_B_GPIO_Port, HOUR_1_B_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2108      	movs	r1, #8
 80018fa:	4831      	ldr	r0, [pc, #196]	; (80019c0 <sprint_Hour1+0x1f0>)
 80018fc:	f001 feb6 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_A_GPIO_Port, HOUR_1_A_Pin, GPIO_PIN_SET);
 8001900:	2201      	movs	r2, #1
 8001902:	2104      	movs	r1, #4
 8001904:	482e      	ldr	r0, [pc, #184]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001906:	f001 feb1 	bl	800366c <HAL_GPIO_WritePin>
		break;
 800190a:	e054      	b.n	80019b6 <sprint_Hour1+0x1e6>
	case 6:
		HAL_GPIO_WritePin(HOUR_1_D_GPIO_Port, HOUR_1_D_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	2101      	movs	r1, #1
 8001910:	482b      	ldr	r0, [pc, #172]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001912:	f001 feab 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_C_GPIO_Port, HOUR_1_C_Pin, GPIO_PIN_SET);
 8001916:	2201      	movs	r2, #1
 8001918:	2102      	movs	r1, #2
 800191a:	4829      	ldr	r0, [pc, #164]	; (80019c0 <sprint_Hour1+0x1f0>)
 800191c:	f001 fea6 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_B_GPIO_Port, HOUR_1_B_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	2108      	movs	r1, #8
 8001924:	4826      	ldr	r0, [pc, #152]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001926:	f001 fea1 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_A_GPIO_Port, HOUR_1_A_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2104      	movs	r1, #4
 800192e:	4824      	ldr	r0, [pc, #144]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001930:	f001 fe9c 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001934:	e03f      	b.n	80019b6 <sprint_Hour1+0x1e6>
	case 7:
		HAL_GPIO_WritePin(HOUR_1_D_GPIO_Port, HOUR_1_D_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	2101      	movs	r1, #1
 800193a:	4821      	ldr	r0, [pc, #132]	; (80019c0 <sprint_Hour1+0x1f0>)
 800193c:	f001 fe96 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_C_GPIO_Port, HOUR_1_C_Pin, GPIO_PIN_SET);
 8001940:	2201      	movs	r2, #1
 8001942:	2102      	movs	r1, #2
 8001944:	481e      	ldr	r0, [pc, #120]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001946:	f001 fe91 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_B_GPIO_Port, HOUR_1_B_Pin, GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	2108      	movs	r1, #8
 800194e:	481c      	ldr	r0, [pc, #112]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001950:	f001 fe8c 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_A_GPIO_Port, HOUR_1_A_Pin, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	2104      	movs	r1, #4
 8001958:	4819      	ldr	r0, [pc, #100]	; (80019c0 <sprint_Hour1+0x1f0>)
 800195a:	f001 fe87 	bl	800366c <HAL_GPIO_WritePin>
		break;
 800195e:	e02a      	b.n	80019b6 <sprint_Hour1+0x1e6>
	case 8:
		HAL_GPIO_WritePin(HOUR_1_D_GPIO_Port, HOUR_1_D_Pin, GPIO_PIN_SET);
 8001960:	2201      	movs	r2, #1
 8001962:	2101      	movs	r1, #1
 8001964:	4816      	ldr	r0, [pc, #88]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001966:	f001 fe81 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_C_GPIO_Port, HOUR_1_C_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2102      	movs	r1, #2
 800196e:	4814      	ldr	r0, [pc, #80]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001970:	f001 fe7c 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_B_GPIO_Port, HOUR_1_B_Pin, GPIO_PIN_RESET);
 8001974:	2200      	movs	r2, #0
 8001976:	2108      	movs	r1, #8
 8001978:	4811      	ldr	r0, [pc, #68]	; (80019c0 <sprint_Hour1+0x1f0>)
 800197a:	f001 fe77 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_A_GPIO_Port, HOUR_1_A_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2104      	movs	r1, #4
 8001982:	480f      	ldr	r0, [pc, #60]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001984:	f001 fe72 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001988:	e015      	b.n	80019b6 <sprint_Hour1+0x1e6>
	case 9:
		HAL_GPIO_WritePin(HOUR_1_D_GPIO_Port, HOUR_1_D_Pin, GPIO_PIN_SET);
 800198a:	2201      	movs	r2, #1
 800198c:	2101      	movs	r1, #1
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <sprint_Hour1+0x1f0>)
 8001990:	f001 fe6c 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_C_GPIO_Port, HOUR_1_C_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2102      	movs	r1, #2
 8001998:	4809      	ldr	r0, [pc, #36]	; (80019c0 <sprint_Hour1+0x1f0>)
 800199a:	f001 fe67 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_B_GPIO_Port, HOUR_1_B_Pin, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2108      	movs	r1, #8
 80019a2:	4807      	ldr	r0, [pc, #28]	; (80019c0 <sprint_Hour1+0x1f0>)
 80019a4:	f001 fe62 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_1_A_GPIO_Port, HOUR_1_A_Pin, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2104      	movs	r1, #4
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <sprint_Hour1+0x1f0>)
 80019ae:	f001 fe5d 	bl	800366c <HAL_GPIO_WritePin>
		break;
 80019b2:	e000      	b.n	80019b6 <sprint_Hour1+0x1e6>
	default:
		break;
 80019b4:	bf00      	nop
	}
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40020800 	.word	0x40020800

080019c4 <sprint_Hour2>:

void sprint_Hour2(int digit) {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
	switch (digit) {
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b09      	cmp	r3, #9
 80019d0:	f200 8108 	bhi.w	8001be4 <sprint_Hour2+0x220>
 80019d4:	a201      	add	r2, pc, #4	; (adr r2, 80019dc <sprint_Hour2+0x18>)
 80019d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019da:	bf00      	nop
 80019dc:	08001a05 	.word	0x08001a05
 80019e0:	08001a35 	.word	0x08001a35
 80019e4:	08001a65 	.word	0x08001a65
 80019e8:	08001a95 	.word	0x08001a95
 80019ec:	08001ac5 	.word	0x08001ac5
 80019f0:	08001af5 	.word	0x08001af5
 80019f4:	08001b25 	.word	0x08001b25
 80019f8:	08001b55 	.word	0x08001b55
 80019fc:	08001b85 	.word	0x08001b85
 8001a00:	08001bb5 	.word	0x08001bb5
	case 0:
		HAL_GPIO_WritePin(HOUR_2_D_GPIO_Port, HOUR_2_D_Pin, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	2104      	movs	r1, #4
 8001a08:	4879      	ldr	r0, [pc, #484]	; (8001bf0 <sprint_Hour2+0x22c>)
 8001a0a:	f001 fe2f 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_C_GPIO_Port, HOUR_2_C_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a14:	4877      	ldr	r0, [pc, #476]	; (8001bf4 <sprint_Hour2+0x230>)
 8001a16:	f001 fe29 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_B_GPIO_Port, HOUR_2_B_Pin, GPIO_PIN_RESET);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a20:	4874      	ldr	r0, [pc, #464]	; (8001bf4 <sprint_Hour2+0x230>)
 8001a22:	f001 fe23 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_A_GPIO_Port, HOUR_2_A_Pin, GPIO_PIN_RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a2c:	4872      	ldr	r0, [pc, #456]	; (8001bf8 <sprint_Hour2+0x234>)
 8001a2e:	f001 fe1d 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001a32:	e0d8      	b.n	8001be6 <sprint_Hour2+0x222>
	case 1:
		HAL_GPIO_WritePin(HOUR_2_D_GPIO_Port, HOUR_2_D_Pin, GPIO_PIN_RESET);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2104      	movs	r1, #4
 8001a38:	486d      	ldr	r0, [pc, #436]	; (8001bf0 <sprint_Hour2+0x22c>)
 8001a3a:	f001 fe17 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_C_GPIO_Port, HOUR_2_C_Pin, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a44:	486b      	ldr	r0, [pc, #428]	; (8001bf4 <sprint_Hour2+0x230>)
 8001a46:	f001 fe11 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_B_GPIO_Port, HOUR_2_B_Pin, GPIO_PIN_RESET);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a50:	4868      	ldr	r0, [pc, #416]	; (8001bf4 <sprint_Hour2+0x230>)
 8001a52:	f001 fe0b 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_A_GPIO_Port, HOUR_2_A_Pin, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5c:	4866      	ldr	r0, [pc, #408]	; (8001bf8 <sprint_Hour2+0x234>)
 8001a5e:	f001 fe05 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001a62:	e0c0      	b.n	8001be6 <sprint_Hour2+0x222>
	case 2:
		HAL_GPIO_WritePin(HOUR_2_D_GPIO_Port, HOUR_2_D_Pin, GPIO_PIN_RESET);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2104      	movs	r1, #4
 8001a68:	4861      	ldr	r0, [pc, #388]	; (8001bf0 <sprint_Hour2+0x22c>)
 8001a6a:	f001 fdff 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_C_GPIO_Port, HOUR_2_C_Pin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a74:	485f      	ldr	r0, [pc, #380]	; (8001bf4 <sprint_Hour2+0x230>)
 8001a76:	f001 fdf9 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_B_GPIO_Port, HOUR_2_B_Pin, GPIO_PIN_SET);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a80:	485c      	ldr	r0, [pc, #368]	; (8001bf4 <sprint_Hour2+0x230>)
 8001a82:	f001 fdf3 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_A_GPIO_Port, HOUR_2_A_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a8c:	485a      	ldr	r0, [pc, #360]	; (8001bf8 <sprint_Hour2+0x234>)
 8001a8e:	f001 fded 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001a92:	e0a8      	b.n	8001be6 <sprint_Hour2+0x222>
	case 3:
		HAL_GPIO_WritePin(HOUR_2_D_GPIO_Port, HOUR_2_D_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2104      	movs	r1, #4
 8001a98:	4855      	ldr	r0, [pc, #340]	; (8001bf0 <sprint_Hour2+0x22c>)
 8001a9a:	f001 fde7 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_C_GPIO_Port, HOUR_2_C_Pin, GPIO_PIN_RESET);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aa4:	4853      	ldr	r0, [pc, #332]	; (8001bf4 <sprint_Hour2+0x230>)
 8001aa6:	f001 fde1 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_B_GPIO_Port, HOUR_2_B_Pin, GPIO_PIN_SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ab0:	4850      	ldr	r0, [pc, #320]	; (8001bf4 <sprint_Hour2+0x230>)
 8001ab2:	f001 fddb 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_A_GPIO_Port, HOUR_2_A_Pin, GPIO_PIN_SET);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001abc:	484e      	ldr	r0, [pc, #312]	; (8001bf8 <sprint_Hour2+0x234>)
 8001abe:	f001 fdd5 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001ac2:	e090      	b.n	8001be6 <sprint_Hour2+0x222>
	case 4:
		HAL_GPIO_WritePin(HOUR_2_D_GPIO_Port, HOUR_2_D_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	4849      	ldr	r0, [pc, #292]	; (8001bf0 <sprint_Hour2+0x22c>)
 8001aca:	f001 fdcf 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_C_GPIO_Port, HOUR_2_C_Pin, GPIO_PIN_SET);
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ad4:	4847      	ldr	r0, [pc, #284]	; (8001bf4 <sprint_Hour2+0x230>)
 8001ad6:	f001 fdc9 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_B_GPIO_Port, HOUR_2_B_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae0:	4844      	ldr	r0, [pc, #272]	; (8001bf4 <sprint_Hour2+0x230>)
 8001ae2:	f001 fdc3 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_A_GPIO_Port, HOUR_2_A_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aec:	4842      	ldr	r0, [pc, #264]	; (8001bf8 <sprint_Hour2+0x234>)
 8001aee:	f001 fdbd 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001af2:	e078      	b.n	8001be6 <sprint_Hour2+0x222>
	case 5:
		HAL_GPIO_WritePin(HOUR_2_D_GPIO_Port, HOUR_2_D_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2104      	movs	r1, #4
 8001af8:	483d      	ldr	r0, [pc, #244]	; (8001bf0 <sprint_Hour2+0x22c>)
 8001afa:	f001 fdb7 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_C_GPIO_Port, HOUR_2_C_Pin, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b04:	483b      	ldr	r0, [pc, #236]	; (8001bf4 <sprint_Hour2+0x230>)
 8001b06:	f001 fdb1 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_B_GPIO_Port, HOUR_2_B_Pin, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b10:	4838      	ldr	r0, [pc, #224]	; (8001bf4 <sprint_Hour2+0x230>)
 8001b12:	f001 fdab 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_A_GPIO_Port, HOUR_2_A_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1c:	4836      	ldr	r0, [pc, #216]	; (8001bf8 <sprint_Hour2+0x234>)
 8001b1e:	f001 fda5 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001b22:	e060      	b.n	8001be6 <sprint_Hour2+0x222>
	case 6:
		HAL_GPIO_WritePin(HOUR_2_D_GPIO_Port, HOUR_2_D_Pin, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2104      	movs	r1, #4
 8001b28:	4831      	ldr	r0, [pc, #196]	; (8001bf0 <sprint_Hour2+0x22c>)
 8001b2a:	f001 fd9f 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_C_GPIO_Port, HOUR_2_C_Pin, GPIO_PIN_SET);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b34:	482f      	ldr	r0, [pc, #188]	; (8001bf4 <sprint_Hour2+0x230>)
 8001b36:	f001 fd99 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_B_GPIO_Port, HOUR_2_B_Pin, GPIO_PIN_SET);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b40:	482c      	ldr	r0, [pc, #176]	; (8001bf4 <sprint_Hour2+0x230>)
 8001b42:	f001 fd93 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_A_GPIO_Port, HOUR_2_A_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b4c:	482a      	ldr	r0, [pc, #168]	; (8001bf8 <sprint_Hour2+0x234>)
 8001b4e:	f001 fd8d 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001b52:	e048      	b.n	8001be6 <sprint_Hour2+0x222>
	case 7:
		HAL_GPIO_WritePin(HOUR_2_D_GPIO_Port, HOUR_2_D_Pin, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2104      	movs	r1, #4
 8001b58:	4825      	ldr	r0, [pc, #148]	; (8001bf0 <sprint_Hour2+0x22c>)
 8001b5a:	f001 fd87 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_C_GPIO_Port, HOUR_2_C_Pin, GPIO_PIN_SET);
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b64:	4823      	ldr	r0, [pc, #140]	; (8001bf4 <sprint_Hour2+0x230>)
 8001b66:	f001 fd81 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_B_GPIO_Port, HOUR_2_B_Pin, GPIO_PIN_SET);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b70:	4820      	ldr	r0, [pc, #128]	; (8001bf4 <sprint_Hour2+0x230>)
 8001b72:	f001 fd7b 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_A_GPIO_Port, HOUR_2_A_Pin, GPIO_PIN_SET);
 8001b76:	2201      	movs	r2, #1
 8001b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7c:	481e      	ldr	r0, [pc, #120]	; (8001bf8 <sprint_Hour2+0x234>)
 8001b7e:	f001 fd75 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001b82:	e030      	b.n	8001be6 <sprint_Hour2+0x222>
	case 8:
		HAL_GPIO_WritePin(HOUR_2_D_GPIO_Port, HOUR_2_D_Pin, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2104      	movs	r1, #4
 8001b88:	4819      	ldr	r0, [pc, #100]	; (8001bf0 <sprint_Hour2+0x22c>)
 8001b8a:	f001 fd6f 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_C_GPIO_Port, HOUR_2_C_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b94:	4817      	ldr	r0, [pc, #92]	; (8001bf4 <sprint_Hour2+0x230>)
 8001b96:	f001 fd69 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_B_GPIO_Port, HOUR_2_B_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba0:	4814      	ldr	r0, [pc, #80]	; (8001bf4 <sprint_Hour2+0x230>)
 8001ba2:	f001 fd63 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_A_GPIO_Port, HOUR_2_A_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bac:	4812      	ldr	r0, [pc, #72]	; (8001bf8 <sprint_Hour2+0x234>)
 8001bae:	f001 fd5d 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001bb2:	e018      	b.n	8001be6 <sprint_Hour2+0x222>
	case 9:
		HAL_GPIO_WritePin(HOUR_2_D_GPIO_Port, HOUR_2_D_Pin, GPIO_PIN_SET);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	2104      	movs	r1, #4
 8001bb8:	480d      	ldr	r0, [pc, #52]	; (8001bf0 <sprint_Hour2+0x22c>)
 8001bba:	f001 fd57 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_C_GPIO_Port, HOUR_2_C_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bc4:	480b      	ldr	r0, [pc, #44]	; (8001bf4 <sprint_Hour2+0x230>)
 8001bc6:	f001 fd51 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_B_GPIO_Port, HOUR_2_B_Pin, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd0:	4808      	ldr	r0, [pc, #32]	; (8001bf4 <sprint_Hour2+0x230>)
 8001bd2:	f001 fd4b 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HOUR_2_A_GPIO_Port, HOUR_2_A_Pin, GPIO_PIN_SET);
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bdc:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <sprint_Hour2+0x234>)
 8001bde:	f001 fd45 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001be2:	e000      	b.n	8001be6 <sprint_Hour2+0x222>
	default:
		break;
 8001be4:	bf00      	nop
	}
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40020c00 	.word	0x40020c00
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <sprint_Minute1>:

void sprint_Minute1(int digit) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	switch (digit) {
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b09      	cmp	r3, #9
 8001c08:	f200 80fe 	bhi.w	8001e08 <sprint_Minute1+0x20c>
 8001c0c:	a201      	add	r2, pc, #4	; (adr r2, 8001c14 <sprint_Minute1+0x18>)
 8001c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c12:	bf00      	nop
 8001c14:	08001c3d 	.word	0x08001c3d
 8001c18:	08001c6b 	.word	0x08001c6b
 8001c1c:	08001c99 	.word	0x08001c99
 8001c20:	08001cc7 	.word	0x08001cc7
 8001c24:	08001cf5 	.word	0x08001cf5
 8001c28:	08001d23 	.word	0x08001d23
 8001c2c:	08001d51 	.word	0x08001d51
 8001c30:	08001d7f 	.word	0x08001d7f
 8001c34:	08001dad 	.word	0x08001dad
 8001c38:	08001ddb 	.word	0x08001ddb
	case 0:
		HAL_GPIO_WritePin(MINUTE_1_D_GPIO_Port, MINUTE_1_D_Pin, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c42:	4874      	ldr	r0, [pc, #464]	; (8001e14 <sprint_Minute1+0x218>)
 8001c44:	f001 fd12 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_C_GPIO_Port, MINUTE_1_C_Pin, GPIO_PIN_RESET);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2120      	movs	r1, #32
 8001c4c:	4871      	ldr	r0, [pc, #452]	; (8001e14 <sprint_Minute1+0x218>)
 8001c4e:	f001 fd0d 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_B_GPIO_Port, MINUTE_1_B_Pin, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c58:	486e      	ldr	r0, [pc, #440]	; (8001e14 <sprint_Minute1+0x218>)
 8001c5a:	f001 fd07 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_A_GPIO_Port, MINUTE_1_A_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2110      	movs	r1, #16
 8001c62:	486d      	ldr	r0, [pc, #436]	; (8001e18 <sprint_Minute1+0x21c>)
 8001c64:	f001 fd02 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001c68:	e0cf      	b.n	8001e0a <sprint_Minute1+0x20e>
	case 1:
		HAL_GPIO_WritePin(MINUTE_1_D_GPIO_Port, MINUTE_1_D_Pin, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c70:	4868      	ldr	r0, [pc, #416]	; (8001e14 <sprint_Minute1+0x218>)
 8001c72:	f001 fcfb 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_C_GPIO_Port, MINUTE_1_C_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2120      	movs	r1, #32
 8001c7a:	4866      	ldr	r0, [pc, #408]	; (8001e14 <sprint_Minute1+0x218>)
 8001c7c:	f001 fcf6 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_B_GPIO_Port, MINUTE_1_B_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c86:	4863      	ldr	r0, [pc, #396]	; (8001e14 <sprint_Minute1+0x218>)
 8001c88:	f001 fcf0 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_A_GPIO_Port, MINUTE_1_A_Pin, GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	2110      	movs	r1, #16
 8001c90:	4861      	ldr	r0, [pc, #388]	; (8001e18 <sprint_Minute1+0x21c>)
 8001c92:	f001 fceb 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001c96:	e0b8      	b.n	8001e0a <sprint_Minute1+0x20e>
	case 2:
		HAL_GPIO_WritePin(MINUTE_1_D_GPIO_Port, MINUTE_1_D_Pin, GPIO_PIN_RESET);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c9e:	485d      	ldr	r0, [pc, #372]	; (8001e14 <sprint_Minute1+0x218>)
 8001ca0:	f001 fce4 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_C_GPIO_Port, MINUTE_1_C_Pin, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2120      	movs	r1, #32
 8001ca8:	485a      	ldr	r0, [pc, #360]	; (8001e14 <sprint_Minute1+0x218>)
 8001caa:	f001 fcdf 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_B_GPIO_Port, MINUTE_1_B_Pin, GPIO_PIN_SET);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb4:	4857      	ldr	r0, [pc, #348]	; (8001e14 <sprint_Minute1+0x218>)
 8001cb6:	f001 fcd9 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_A_GPIO_Port, MINUTE_1_A_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2110      	movs	r1, #16
 8001cbe:	4856      	ldr	r0, [pc, #344]	; (8001e18 <sprint_Minute1+0x21c>)
 8001cc0:	f001 fcd4 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001cc4:	e0a1      	b.n	8001e0a <sprint_Minute1+0x20e>
	case 3:
		HAL_GPIO_WritePin(MINUTE_1_D_GPIO_Port, MINUTE_1_D_Pin, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ccc:	4851      	ldr	r0, [pc, #324]	; (8001e14 <sprint_Minute1+0x218>)
 8001cce:	f001 fccd 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_C_GPIO_Port, MINUTE_1_C_Pin, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	484f      	ldr	r0, [pc, #316]	; (8001e14 <sprint_Minute1+0x218>)
 8001cd8:	f001 fcc8 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_B_GPIO_Port, MINUTE_1_B_Pin, GPIO_PIN_SET);
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ce2:	484c      	ldr	r0, [pc, #304]	; (8001e14 <sprint_Minute1+0x218>)
 8001ce4:	f001 fcc2 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_A_GPIO_Port, MINUTE_1_A_Pin, GPIO_PIN_SET);
 8001ce8:	2201      	movs	r2, #1
 8001cea:	2110      	movs	r1, #16
 8001cec:	484a      	ldr	r0, [pc, #296]	; (8001e18 <sprint_Minute1+0x21c>)
 8001cee:	f001 fcbd 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001cf2:	e08a      	b.n	8001e0a <sprint_Minute1+0x20e>
	case 4:
		HAL_GPIO_WritePin(MINUTE_1_D_GPIO_Port, MINUTE_1_D_Pin, GPIO_PIN_RESET);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cfa:	4846      	ldr	r0, [pc, #280]	; (8001e14 <sprint_Minute1+0x218>)
 8001cfc:	f001 fcb6 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_C_GPIO_Port, MINUTE_1_C_Pin, GPIO_PIN_SET);
 8001d00:	2201      	movs	r2, #1
 8001d02:	2120      	movs	r1, #32
 8001d04:	4843      	ldr	r0, [pc, #268]	; (8001e14 <sprint_Minute1+0x218>)
 8001d06:	f001 fcb1 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_B_GPIO_Port, MINUTE_1_B_Pin, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d10:	4840      	ldr	r0, [pc, #256]	; (8001e14 <sprint_Minute1+0x218>)
 8001d12:	f001 fcab 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_A_GPIO_Port, MINUTE_1_A_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2110      	movs	r1, #16
 8001d1a:	483f      	ldr	r0, [pc, #252]	; (8001e18 <sprint_Minute1+0x21c>)
 8001d1c:	f001 fca6 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001d20:	e073      	b.n	8001e0a <sprint_Minute1+0x20e>
	case 5:
		HAL_GPIO_WritePin(MINUTE_1_D_GPIO_Port, MINUTE_1_D_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d28:	483a      	ldr	r0, [pc, #232]	; (8001e14 <sprint_Minute1+0x218>)
 8001d2a:	f001 fc9f 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_C_GPIO_Port, MINUTE_1_C_Pin, GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2120      	movs	r1, #32
 8001d32:	4838      	ldr	r0, [pc, #224]	; (8001e14 <sprint_Minute1+0x218>)
 8001d34:	f001 fc9a 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_B_GPIO_Port, MINUTE_1_B_Pin, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d3e:	4835      	ldr	r0, [pc, #212]	; (8001e14 <sprint_Minute1+0x218>)
 8001d40:	f001 fc94 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_A_GPIO_Port, MINUTE_1_A_Pin, GPIO_PIN_SET);
 8001d44:	2201      	movs	r2, #1
 8001d46:	2110      	movs	r1, #16
 8001d48:	4833      	ldr	r0, [pc, #204]	; (8001e18 <sprint_Minute1+0x21c>)
 8001d4a:	f001 fc8f 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001d4e:	e05c      	b.n	8001e0a <sprint_Minute1+0x20e>
	case 6:
		HAL_GPIO_WritePin(MINUTE_1_D_GPIO_Port, MINUTE_1_D_Pin, GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d56:	482f      	ldr	r0, [pc, #188]	; (8001e14 <sprint_Minute1+0x218>)
 8001d58:	f001 fc88 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_C_GPIO_Port, MINUTE_1_C_Pin, GPIO_PIN_SET);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2120      	movs	r1, #32
 8001d60:	482c      	ldr	r0, [pc, #176]	; (8001e14 <sprint_Minute1+0x218>)
 8001d62:	f001 fc83 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_B_GPIO_Port, MINUTE_1_B_Pin, GPIO_PIN_SET);
 8001d66:	2201      	movs	r2, #1
 8001d68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d6c:	4829      	ldr	r0, [pc, #164]	; (8001e14 <sprint_Minute1+0x218>)
 8001d6e:	f001 fc7d 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_A_GPIO_Port, MINUTE_1_A_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2110      	movs	r1, #16
 8001d76:	4828      	ldr	r0, [pc, #160]	; (8001e18 <sprint_Minute1+0x21c>)
 8001d78:	f001 fc78 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001d7c:	e045      	b.n	8001e0a <sprint_Minute1+0x20e>
	case 7:
		HAL_GPIO_WritePin(MINUTE_1_D_GPIO_Port, MINUTE_1_D_Pin, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d84:	4823      	ldr	r0, [pc, #140]	; (8001e14 <sprint_Minute1+0x218>)
 8001d86:	f001 fc71 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_C_GPIO_Port, MINUTE_1_C_Pin, GPIO_PIN_SET);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2120      	movs	r1, #32
 8001d8e:	4821      	ldr	r0, [pc, #132]	; (8001e14 <sprint_Minute1+0x218>)
 8001d90:	f001 fc6c 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_B_GPIO_Port, MINUTE_1_B_Pin, GPIO_PIN_SET);
 8001d94:	2201      	movs	r2, #1
 8001d96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d9a:	481e      	ldr	r0, [pc, #120]	; (8001e14 <sprint_Minute1+0x218>)
 8001d9c:	f001 fc66 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_A_GPIO_Port, MINUTE_1_A_Pin, GPIO_PIN_SET);
 8001da0:	2201      	movs	r2, #1
 8001da2:	2110      	movs	r1, #16
 8001da4:	481c      	ldr	r0, [pc, #112]	; (8001e18 <sprint_Minute1+0x21c>)
 8001da6:	f001 fc61 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001daa:	e02e      	b.n	8001e0a <sprint_Minute1+0x20e>
	case 8:
		HAL_GPIO_WritePin(MINUTE_1_D_GPIO_Port, MINUTE_1_D_Pin, GPIO_PIN_SET);
 8001dac:	2201      	movs	r2, #1
 8001dae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001db2:	4818      	ldr	r0, [pc, #96]	; (8001e14 <sprint_Minute1+0x218>)
 8001db4:	f001 fc5a 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_C_GPIO_Port, MINUTE_1_C_Pin, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2120      	movs	r1, #32
 8001dbc:	4815      	ldr	r0, [pc, #84]	; (8001e14 <sprint_Minute1+0x218>)
 8001dbe:	f001 fc55 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_B_GPIO_Port, MINUTE_1_B_Pin, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc8:	4812      	ldr	r0, [pc, #72]	; (8001e14 <sprint_Minute1+0x218>)
 8001dca:	f001 fc4f 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_A_GPIO_Port, MINUTE_1_A_Pin, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2110      	movs	r1, #16
 8001dd2:	4811      	ldr	r0, [pc, #68]	; (8001e18 <sprint_Minute1+0x21c>)
 8001dd4:	f001 fc4a 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001dd8:	e017      	b.n	8001e0a <sprint_Minute1+0x20e>
	case 9:
		HAL_GPIO_WritePin(MINUTE_1_D_GPIO_Port, MINUTE_1_D_Pin, GPIO_PIN_SET);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <sprint_Minute1+0x218>)
 8001de2:	f001 fc43 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_C_GPIO_Port, MINUTE_1_C_Pin, GPIO_PIN_RESET);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2120      	movs	r1, #32
 8001dea:	480a      	ldr	r0, [pc, #40]	; (8001e14 <sprint_Minute1+0x218>)
 8001dec:	f001 fc3e 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_B_GPIO_Port, MINUTE_1_B_Pin, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df6:	4807      	ldr	r0, [pc, #28]	; (8001e14 <sprint_Minute1+0x218>)
 8001df8:	f001 fc38 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_1_A_GPIO_Port, MINUTE_1_A_Pin, GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	2110      	movs	r1, #16
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <sprint_Minute1+0x21c>)
 8001e02:	f001 fc33 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001e06:	e000      	b.n	8001e0a <sprint_Minute1+0x20e>
	default:
		break;
 8001e08:	bf00      	nop
	}
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800

08001e1c <sprint_Minute2>:

void sprint_Minute2(int digit) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	switch (digit) {
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b09      	cmp	r3, #9
 8001e28:	f200 80fe 	bhi.w	8002028 <sprint_Minute2+0x20c>
 8001e2c:	a201      	add	r2, pc, #4	; (adr r2, 8001e34 <sprint_Minute2+0x18>)
 8001e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e32:	bf00      	nop
 8001e34:	08001e5d 	.word	0x08001e5d
 8001e38:	08001e8b 	.word	0x08001e8b
 8001e3c:	08001eb9 	.word	0x08001eb9
 8001e40:	08001ee7 	.word	0x08001ee7
 8001e44:	08001f15 	.word	0x08001f15
 8001e48:	08001f43 	.word	0x08001f43
 8001e4c:	08001f71 	.word	0x08001f71
 8001e50:	08001f9f 	.word	0x08001f9f
 8001e54:	08001fcd 	.word	0x08001fcd
 8001e58:	08001ffb 	.word	0x08001ffb
	case 0:
		HAL_GPIO_WritePin(MINUTE_2_D_GPIO_Port, MINUTE_2_D_Pin, GPIO_PIN_RESET);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2102      	movs	r1, #2
 8001e60:	4874      	ldr	r0, [pc, #464]	; (8002034 <sprint_Minute2+0x218>)
 8001e62:	f001 fc03 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_C_GPIO_Port, MINUTE_2_C_Pin, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e6c:	4871      	ldr	r0, [pc, #452]	; (8002034 <sprint_Minute2+0x218>)
 8001e6e:	f001 fbfd 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_B_GPIO_Port, MINUTE_2_B_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e78:	486e      	ldr	r0, [pc, #440]	; (8002034 <sprint_Minute2+0x218>)
 8001e7a:	f001 fbf7 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_A_GPIO_Port, MINUTE_2_A_Pin, GPIO_PIN_RESET);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2110      	movs	r1, #16
 8001e82:	486c      	ldr	r0, [pc, #432]	; (8002034 <sprint_Minute2+0x218>)
 8001e84:	f001 fbf2 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001e88:	e0cf      	b.n	800202a <sprint_Minute2+0x20e>
	case 1:
		HAL_GPIO_WritePin(MINUTE_2_D_GPIO_Port, MINUTE_2_D_Pin, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	4869      	ldr	r0, [pc, #420]	; (8002034 <sprint_Minute2+0x218>)
 8001e90:	f001 fbec 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_C_GPIO_Port, MINUTE_2_C_Pin, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e9a:	4866      	ldr	r0, [pc, #408]	; (8002034 <sprint_Minute2+0x218>)
 8001e9c:	f001 fbe6 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_B_GPIO_Port, MINUTE_2_B_Pin, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ea6:	4863      	ldr	r0, [pc, #396]	; (8002034 <sprint_Minute2+0x218>)
 8001ea8:	f001 fbe0 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_A_GPIO_Port, MINUTE_2_A_Pin, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	2110      	movs	r1, #16
 8001eb0:	4860      	ldr	r0, [pc, #384]	; (8002034 <sprint_Minute2+0x218>)
 8001eb2:	f001 fbdb 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001eb6:	e0b8      	b.n	800202a <sprint_Minute2+0x20e>
	case 2:
		HAL_GPIO_WritePin(MINUTE_2_D_GPIO_Port, MINUTE_2_D_Pin, GPIO_PIN_RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2102      	movs	r1, #2
 8001ebc:	485d      	ldr	r0, [pc, #372]	; (8002034 <sprint_Minute2+0x218>)
 8001ebe:	f001 fbd5 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_C_GPIO_Port, MINUTE_2_C_Pin, GPIO_PIN_RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ec8:	485a      	ldr	r0, [pc, #360]	; (8002034 <sprint_Minute2+0x218>)
 8001eca:	f001 fbcf 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_B_GPIO_Port, MINUTE_2_B_Pin, GPIO_PIN_SET);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ed4:	4857      	ldr	r0, [pc, #348]	; (8002034 <sprint_Minute2+0x218>)
 8001ed6:	f001 fbc9 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_A_GPIO_Port, MINUTE_2_A_Pin, GPIO_PIN_RESET);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2110      	movs	r1, #16
 8001ede:	4855      	ldr	r0, [pc, #340]	; (8002034 <sprint_Minute2+0x218>)
 8001ee0:	f001 fbc4 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001ee4:	e0a1      	b.n	800202a <sprint_Minute2+0x20e>
	case 3:
		HAL_GPIO_WritePin(MINUTE_2_D_GPIO_Port, MINUTE_2_D_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2102      	movs	r1, #2
 8001eea:	4852      	ldr	r0, [pc, #328]	; (8002034 <sprint_Minute2+0x218>)
 8001eec:	f001 fbbe 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_C_GPIO_Port, MINUTE_2_C_Pin, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef6:	484f      	ldr	r0, [pc, #316]	; (8002034 <sprint_Minute2+0x218>)
 8001ef8:	f001 fbb8 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_B_GPIO_Port, MINUTE_2_B_Pin, GPIO_PIN_SET);
 8001efc:	2201      	movs	r2, #1
 8001efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f02:	484c      	ldr	r0, [pc, #304]	; (8002034 <sprint_Minute2+0x218>)
 8001f04:	f001 fbb2 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_A_GPIO_Port, MINUTE_2_A_Pin, GPIO_PIN_SET);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	2110      	movs	r1, #16
 8001f0c:	4849      	ldr	r0, [pc, #292]	; (8002034 <sprint_Minute2+0x218>)
 8001f0e:	f001 fbad 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001f12:	e08a      	b.n	800202a <sprint_Minute2+0x20e>
	case 4:
		HAL_GPIO_WritePin(MINUTE_2_D_GPIO_Port, MINUTE_2_D_Pin, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2102      	movs	r1, #2
 8001f18:	4846      	ldr	r0, [pc, #280]	; (8002034 <sprint_Minute2+0x218>)
 8001f1a:	f001 fba7 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_C_GPIO_Port, MINUTE_2_C_Pin, GPIO_PIN_SET);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f24:	4843      	ldr	r0, [pc, #268]	; (8002034 <sprint_Minute2+0x218>)
 8001f26:	f001 fba1 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_B_GPIO_Port, MINUTE_2_B_Pin, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f30:	4840      	ldr	r0, [pc, #256]	; (8002034 <sprint_Minute2+0x218>)
 8001f32:	f001 fb9b 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_A_GPIO_Port, MINUTE_2_A_Pin, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2110      	movs	r1, #16
 8001f3a:	483e      	ldr	r0, [pc, #248]	; (8002034 <sprint_Minute2+0x218>)
 8001f3c:	f001 fb96 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001f40:	e073      	b.n	800202a <sprint_Minute2+0x20e>
	case 5:
		HAL_GPIO_WritePin(MINUTE_2_D_GPIO_Port, MINUTE_2_D_Pin, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2102      	movs	r1, #2
 8001f46:	483b      	ldr	r0, [pc, #236]	; (8002034 <sprint_Minute2+0x218>)
 8001f48:	f001 fb90 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_C_GPIO_Port, MINUTE_2_C_Pin, GPIO_PIN_SET);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f52:	4838      	ldr	r0, [pc, #224]	; (8002034 <sprint_Minute2+0x218>)
 8001f54:	f001 fb8a 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_B_GPIO_Port, MINUTE_2_B_Pin, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f5e:	4835      	ldr	r0, [pc, #212]	; (8002034 <sprint_Minute2+0x218>)
 8001f60:	f001 fb84 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_A_GPIO_Port, MINUTE_2_A_Pin, GPIO_PIN_SET);
 8001f64:	2201      	movs	r2, #1
 8001f66:	2110      	movs	r1, #16
 8001f68:	4832      	ldr	r0, [pc, #200]	; (8002034 <sprint_Minute2+0x218>)
 8001f6a:	f001 fb7f 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001f6e:	e05c      	b.n	800202a <sprint_Minute2+0x20e>
	case 6:
		HAL_GPIO_WritePin(MINUTE_2_D_GPIO_Port, MINUTE_2_D_Pin, GPIO_PIN_RESET);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2102      	movs	r1, #2
 8001f74:	482f      	ldr	r0, [pc, #188]	; (8002034 <sprint_Minute2+0x218>)
 8001f76:	f001 fb79 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_C_GPIO_Port, MINUTE_2_C_Pin, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f80:	482c      	ldr	r0, [pc, #176]	; (8002034 <sprint_Minute2+0x218>)
 8001f82:	f001 fb73 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_B_GPIO_Port, MINUTE_2_B_Pin, GPIO_PIN_SET);
 8001f86:	2201      	movs	r2, #1
 8001f88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f8c:	4829      	ldr	r0, [pc, #164]	; (8002034 <sprint_Minute2+0x218>)
 8001f8e:	f001 fb6d 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_A_GPIO_Port, MINUTE_2_A_Pin, GPIO_PIN_RESET);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2110      	movs	r1, #16
 8001f96:	4827      	ldr	r0, [pc, #156]	; (8002034 <sprint_Minute2+0x218>)
 8001f98:	f001 fb68 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001f9c:	e045      	b.n	800202a <sprint_Minute2+0x20e>
	case 7:
		HAL_GPIO_WritePin(MINUTE_2_D_GPIO_Port, MINUTE_2_D_Pin, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	4824      	ldr	r0, [pc, #144]	; (8002034 <sprint_Minute2+0x218>)
 8001fa4:	f001 fb62 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_C_GPIO_Port, MINUTE_2_C_Pin, GPIO_PIN_SET);
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fae:	4821      	ldr	r0, [pc, #132]	; (8002034 <sprint_Minute2+0x218>)
 8001fb0:	f001 fb5c 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_B_GPIO_Port, MINUTE_2_B_Pin, GPIO_PIN_SET);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fba:	481e      	ldr	r0, [pc, #120]	; (8002034 <sprint_Minute2+0x218>)
 8001fbc:	f001 fb56 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_A_GPIO_Port, MINUTE_2_A_Pin, GPIO_PIN_SET);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	2110      	movs	r1, #16
 8001fc4:	481b      	ldr	r0, [pc, #108]	; (8002034 <sprint_Minute2+0x218>)
 8001fc6:	f001 fb51 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001fca:	e02e      	b.n	800202a <sprint_Minute2+0x20e>
	case 8:
		HAL_GPIO_WritePin(MINUTE_2_D_GPIO_Port, MINUTE_2_D_Pin, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2102      	movs	r1, #2
 8001fd0:	4818      	ldr	r0, [pc, #96]	; (8002034 <sprint_Minute2+0x218>)
 8001fd2:	f001 fb4b 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_C_GPIO_Port, MINUTE_2_C_Pin, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	4815      	ldr	r0, [pc, #84]	; (8002034 <sprint_Minute2+0x218>)
 8001fde:	f001 fb45 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_B_GPIO_Port, MINUTE_2_B_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fe8:	4812      	ldr	r0, [pc, #72]	; (8002034 <sprint_Minute2+0x218>)
 8001fea:	f001 fb3f 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_A_GPIO_Port, MINUTE_2_A_Pin, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2110      	movs	r1, #16
 8001ff2:	4810      	ldr	r0, [pc, #64]	; (8002034 <sprint_Minute2+0x218>)
 8001ff4:	f001 fb3a 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8001ff8:	e017      	b.n	800202a <sprint_Minute2+0x20e>
	case 9:
		HAL_GPIO_WritePin(MINUTE_2_D_GPIO_Port, MINUTE_2_D_Pin, GPIO_PIN_SET);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	480d      	ldr	r0, [pc, #52]	; (8002034 <sprint_Minute2+0x218>)
 8002000:	f001 fb34 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_C_GPIO_Port, MINUTE_2_C_Pin, GPIO_PIN_RESET);
 8002004:	2200      	movs	r2, #0
 8002006:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800200a:	480a      	ldr	r0, [pc, #40]	; (8002034 <sprint_Minute2+0x218>)
 800200c:	f001 fb2e 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_B_GPIO_Port, MINUTE_2_B_Pin, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002016:	4807      	ldr	r0, [pc, #28]	; (8002034 <sprint_Minute2+0x218>)
 8002018:	f001 fb28 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MINUTE_2_A_GPIO_Port, MINUTE_2_A_Pin, GPIO_PIN_SET);
 800201c:	2201      	movs	r2, #1
 800201e:	2110      	movs	r1, #16
 8002020:	4804      	ldr	r0, [pc, #16]	; (8002034 <sprint_Minute2+0x218>)
 8002022:	f001 fb23 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8002026:	e000      	b.n	800202a <sprint_Minute2+0x20e>
	default:
		break;
 8002028:	bf00      	nop
	}
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40020400 	.word	0x40020400

08002038 <sprint_Second1>:

void sprint_Second1(int digit) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	switch (digit) {
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b09      	cmp	r3, #9
 8002044:	f200 80f4 	bhi.w	8002230 <sprint_Second1+0x1f8>
 8002048:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <sprint_Second1+0x18>)
 800204a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204e:	bf00      	nop
 8002050:	08002079 	.word	0x08002079
 8002054:	080020a5 	.word	0x080020a5
 8002058:	080020d1 	.word	0x080020d1
 800205c:	080020fd 	.word	0x080020fd
 8002060:	08002129 	.word	0x08002129
 8002064:	08002155 	.word	0x08002155
 8002068:	08002181 	.word	0x08002181
 800206c:	080021ad 	.word	0x080021ad
 8002070:	080021d9 	.word	0x080021d9
 8002074:	08002205 	.word	0x08002205
	case 0:
		HAL_GPIO_WritePin(SECOND_1_D_GPIO_Port, SECOND_1_D_Pin, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	2180      	movs	r1, #128	; 0x80
 800207c:	486f      	ldr	r0, [pc, #444]	; (800223c <sprint_Second1+0x204>)
 800207e:	f001 faf5 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_C_GPIO_Port, SECOND_1_C_Pin, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	2140      	movs	r1, #64	; 0x40
 8002086:	486e      	ldr	r0, [pc, #440]	; (8002240 <sprint_Second1+0x208>)
 8002088:	f001 faf0 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_B_GPIO_Port, SECOND_1_B_Pin, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	486c      	ldr	r0, [pc, #432]	; (8002244 <sprint_Second1+0x20c>)
 8002092:	f001 faeb 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_A_GPIO_Port, SECOND_1_A_Pin, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 7180 	mov.w	r1, #256	; 0x100
 800209c:	4867      	ldr	r0, [pc, #412]	; (800223c <sprint_Second1+0x204>)
 800209e:	f001 fae5 	bl	800366c <HAL_GPIO_WritePin>
		break;
 80020a2:	e0c6      	b.n	8002232 <sprint_Second1+0x1fa>
	case 1:
		HAL_GPIO_WritePin(SECOND_1_D_GPIO_Port, SECOND_1_D_Pin, GPIO_PIN_RESET);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	4864      	ldr	r0, [pc, #400]	; (800223c <sprint_Second1+0x204>)
 80020aa:	f001 fadf 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_C_GPIO_Port, SECOND_1_C_Pin, GPIO_PIN_RESET);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2140      	movs	r1, #64	; 0x40
 80020b2:	4863      	ldr	r0, [pc, #396]	; (8002240 <sprint_Second1+0x208>)
 80020b4:	f001 fada 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_B_GPIO_Port, SECOND_1_B_Pin, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	4861      	ldr	r0, [pc, #388]	; (8002244 <sprint_Second1+0x20c>)
 80020be:	f001 fad5 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_A_GPIO_Port, SECOND_1_A_Pin, GPIO_PIN_SET);
 80020c2:	2201      	movs	r2, #1
 80020c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c8:	485c      	ldr	r0, [pc, #368]	; (800223c <sprint_Second1+0x204>)
 80020ca:	f001 facf 	bl	800366c <HAL_GPIO_WritePin>
		break;
 80020ce:	e0b0      	b.n	8002232 <sprint_Second1+0x1fa>
	case 2:
		HAL_GPIO_WritePin(SECOND_1_D_GPIO_Port, SECOND_1_D_Pin, GPIO_PIN_RESET);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	4859      	ldr	r0, [pc, #356]	; (800223c <sprint_Second1+0x204>)
 80020d6:	f001 fac9 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_C_GPIO_Port, SECOND_1_C_Pin, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	2140      	movs	r1, #64	; 0x40
 80020de:	4858      	ldr	r0, [pc, #352]	; (8002240 <sprint_Second1+0x208>)
 80020e0:	f001 fac4 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_B_GPIO_Port, SECOND_1_B_Pin, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	4856      	ldr	r0, [pc, #344]	; (8002244 <sprint_Second1+0x20c>)
 80020ea:	f001 fabf 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_A_GPIO_Port, SECOND_1_A_Pin, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020f4:	4851      	ldr	r0, [pc, #324]	; (800223c <sprint_Second1+0x204>)
 80020f6:	f001 fab9 	bl	800366c <HAL_GPIO_WritePin>
		break;
 80020fa:	e09a      	b.n	8002232 <sprint_Second1+0x1fa>
	case 3:
		HAL_GPIO_WritePin(SECOND_1_D_GPIO_Port, SECOND_1_D_Pin, GPIO_PIN_RESET);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2180      	movs	r1, #128	; 0x80
 8002100:	484e      	ldr	r0, [pc, #312]	; (800223c <sprint_Second1+0x204>)
 8002102:	f001 fab3 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_C_GPIO_Port, SECOND_1_C_Pin, GPIO_PIN_RESET);
 8002106:	2200      	movs	r2, #0
 8002108:	2140      	movs	r1, #64	; 0x40
 800210a:	484d      	ldr	r0, [pc, #308]	; (8002240 <sprint_Second1+0x208>)
 800210c:	f001 faae 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_B_GPIO_Port, SECOND_1_B_Pin, GPIO_PIN_SET);
 8002110:	2201      	movs	r2, #1
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	484b      	ldr	r0, [pc, #300]	; (8002244 <sprint_Second1+0x20c>)
 8002116:	f001 faa9 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_A_GPIO_Port, SECOND_1_A_Pin, GPIO_PIN_SET);
 800211a:	2201      	movs	r2, #1
 800211c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002120:	4846      	ldr	r0, [pc, #280]	; (800223c <sprint_Second1+0x204>)
 8002122:	f001 faa3 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8002126:	e084      	b.n	8002232 <sprint_Second1+0x1fa>
	case 4:
		HAL_GPIO_WritePin(SECOND_1_D_GPIO_Port, SECOND_1_D_Pin, GPIO_PIN_RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	2180      	movs	r1, #128	; 0x80
 800212c:	4843      	ldr	r0, [pc, #268]	; (800223c <sprint_Second1+0x204>)
 800212e:	f001 fa9d 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_C_GPIO_Port, SECOND_1_C_Pin, GPIO_PIN_SET);
 8002132:	2201      	movs	r2, #1
 8002134:	2140      	movs	r1, #64	; 0x40
 8002136:	4842      	ldr	r0, [pc, #264]	; (8002240 <sprint_Second1+0x208>)
 8002138:	f001 fa98 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_B_GPIO_Port, SECOND_1_B_Pin, GPIO_PIN_RESET);
 800213c:	2200      	movs	r2, #0
 800213e:	2180      	movs	r1, #128	; 0x80
 8002140:	4840      	ldr	r0, [pc, #256]	; (8002244 <sprint_Second1+0x20c>)
 8002142:	f001 fa93 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_A_GPIO_Port, SECOND_1_A_Pin, GPIO_PIN_RESET);
 8002146:	2200      	movs	r2, #0
 8002148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800214c:	483b      	ldr	r0, [pc, #236]	; (800223c <sprint_Second1+0x204>)
 800214e:	f001 fa8d 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8002152:	e06e      	b.n	8002232 <sprint_Second1+0x1fa>
	case 5:
		HAL_GPIO_WritePin(SECOND_1_D_GPIO_Port, SECOND_1_D_Pin, GPIO_PIN_RESET);
 8002154:	2200      	movs	r2, #0
 8002156:	2180      	movs	r1, #128	; 0x80
 8002158:	4838      	ldr	r0, [pc, #224]	; (800223c <sprint_Second1+0x204>)
 800215a:	f001 fa87 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_C_GPIO_Port, SECOND_1_C_Pin, GPIO_PIN_SET);
 800215e:	2201      	movs	r2, #1
 8002160:	2140      	movs	r1, #64	; 0x40
 8002162:	4837      	ldr	r0, [pc, #220]	; (8002240 <sprint_Second1+0x208>)
 8002164:	f001 fa82 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_B_GPIO_Port, SECOND_1_B_Pin, GPIO_PIN_RESET);
 8002168:	2200      	movs	r2, #0
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	4835      	ldr	r0, [pc, #212]	; (8002244 <sprint_Second1+0x20c>)
 800216e:	f001 fa7d 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_A_GPIO_Port, SECOND_1_A_Pin, GPIO_PIN_SET);
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002178:	4830      	ldr	r0, [pc, #192]	; (800223c <sprint_Second1+0x204>)
 800217a:	f001 fa77 	bl	800366c <HAL_GPIO_WritePin>
		break;
 800217e:	e058      	b.n	8002232 <sprint_Second1+0x1fa>
	case 6:
		HAL_GPIO_WritePin(SECOND_1_D_GPIO_Port, SECOND_1_D_Pin, GPIO_PIN_RESET);
 8002180:	2200      	movs	r2, #0
 8002182:	2180      	movs	r1, #128	; 0x80
 8002184:	482d      	ldr	r0, [pc, #180]	; (800223c <sprint_Second1+0x204>)
 8002186:	f001 fa71 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_C_GPIO_Port, SECOND_1_C_Pin, GPIO_PIN_SET);
 800218a:	2201      	movs	r2, #1
 800218c:	2140      	movs	r1, #64	; 0x40
 800218e:	482c      	ldr	r0, [pc, #176]	; (8002240 <sprint_Second1+0x208>)
 8002190:	f001 fa6c 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_B_GPIO_Port, SECOND_1_B_Pin, GPIO_PIN_SET);
 8002194:	2201      	movs	r2, #1
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	482a      	ldr	r0, [pc, #168]	; (8002244 <sprint_Second1+0x20c>)
 800219a:	f001 fa67 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_A_GPIO_Port, SECOND_1_A_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a4:	4825      	ldr	r0, [pc, #148]	; (800223c <sprint_Second1+0x204>)
 80021a6:	f001 fa61 	bl	800366c <HAL_GPIO_WritePin>
		break;
 80021aa:	e042      	b.n	8002232 <sprint_Second1+0x1fa>
	case 7:
		HAL_GPIO_WritePin(SECOND_1_D_GPIO_Port, SECOND_1_D_Pin, GPIO_PIN_RESET);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2180      	movs	r1, #128	; 0x80
 80021b0:	4822      	ldr	r0, [pc, #136]	; (800223c <sprint_Second1+0x204>)
 80021b2:	f001 fa5b 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_C_GPIO_Port, SECOND_1_C_Pin, GPIO_PIN_SET);
 80021b6:	2201      	movs	r2, #1
 80021b8:	2140      	movs	r1, #64	; 0x40
 80021ba:	4821      	ldr	r0, [pc, #132]	; (8002240 <sprint_Second1+0x208>)
 80021bc:	f001 fa56 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_B_GPIO_Port, SECOND_1_B_Pin, GPIO_PIN_SET);
 80021c0:	2201      	movs	r2, #1
 80021c2:	2180      	movs	r1, #128	; 0x80
 80021c4:	481f      	ldr	r0, [pc, #124]	; (8002244 <sprint_Second1+0x20c>)
 80021c6:	f001 fa51 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_A_GPIO_Port, SECOND_1_A_Pin, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021d0:	481a      	ldr	r0, [pc, #104]	; (800223c <sprint_Second1+0x204>)
 80021d2:	f001 fa4b 	bl	800366c <HAL_GPIO_WritePin>
		break;
 80021d6:	e02c      	b.n	8002232 <sprint_Second1+0x1fa>
	case 8:
		HAL_GPIO_WritePin(SECOND_1_D_GPIO_Port, SECOND_1_D_Pin, GPIO_PIN_SET);
 80021d8:	2201      	movs	r2, #1
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	4817      	ldr	r0, [pc, #92]	; (800223c <sprint_Second1+0x204>)
 80021de:	f001 fa45 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_C_GPIO_Port, SECOND_1_C_Pin, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2140      	movs	r1, #64	; 0x40
 80021e6:	4816      	ldr	r0, [pc, #88]	; (8002240 <sprint_Second1+0x208>)
 80021e8:	f001 fa40 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_B_GPIO_Port, SECOND_1_B_Pin, GPIO_PIN_RESET);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2180      	movs	r1, #128	; 0x80
 80021f0:	4814      	ldr	r0, [pc, #80]	; (8002244 <sprint_Second1+0x20c>)
 80021f2:	f001 fa3b 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_A_GPIO_Port, SECOND_1_A_Pin, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021fc:	480f      	ldr	r0, [pc, #60]	; (800223c <sprint_Second1+0x204>)
 80021fe:	f001 fa35 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8002202:	e016      	b.n	8002232 <sprint_Second1+0x1fa>
	case 9:
		HAL_GPIO_WritePin(SECOND_1_D_GPIO_Port, SECOND_1_D_Pin, GPIO_PIN_SET);
 8002204:	2201      	movs	r2, #1
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	480c      	ldr	r0, [pc, #48]	; (800223c <sprint_Second1+0x204>)
 800220a:	f001 fa2f 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_C_GPIO_Port, SECOND_1_C_Pin, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	2140      	movs	r1, #64	; 0x40
 8002212:	480b      	ldr	r0, [pc, #44]	; (8002240 <sprint_Second1+0x208>)
 8002214:	f001 fa2a 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_B_GPIO_Port, SECOND_1_B_Pin, GPIO_PIN_RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	4809      	ldr	r0, [pc, #36]	; (8002244 <sprint_Second1+0x20c>)
 800221e:	f001 fa25 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_1_A_GPIO_Port, SECOND_1_A_Pin, GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <sprint_Second1+0x204>)
 800222a:	f001 fa1f 	bl	800366c <HAL_GPIO_WritePin>
		break;
 800222e:	e000      	b.n	8002232 <sprint_Second1+0x1fa>
	default:
		break;
 8002230:	bf00      	nop
	}
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40020000 	.word	0x40020000
 8002240:	40020400 	.word	0x40020400
 8002244:	40020800 	.word	0x40020800

08002248 <sprint_Second2>:

void sprint_Second2(int digit) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	switch (digit) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b09      	cmp	r3, #9
 8002254:	f200 80fe 	bhi.w	8002454 <sprint_Second2+0x20c>
 8002258:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <sprint_Second2+0x18>)
 800225a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225e:	bf00      	nop
 8002260:	08002289 	.word	0x08002289
 8002264:	080022b7 	.word	0x080022b7
 8002268:	080022e5 	.word	0x080022e5
 800226c:	08002313 	.word	0x08002313
 8002270:	08002341 	.word	0x08002341
 8002274:	0800236f 	.word	0x0800236f
 8002278:	0800239d 	.word	0x0800239d
 800227c:	080023cb 	.word	0x080023cb
 8002280:	080023f9 	.word	0x080023f9
 8002284:	08002427 	.word	0x08002427
	case 0:
		HAL_GPIO_WritePin(SECOND_2_D_GPIO_Port, SECOND_2_D_Pin, GPIO_PIN_RESET);
 8002288:	2200      	movs	r2, #0
 800228a:	2140      	movs	r1, #64	; 0x40
 800228c:	4874      	ldr	r0, [pc, #464]	; (8002460 <sprint_Second2+0x218>)
 800228e:	f001 f9ed 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_C_GPIO_Port, SECOND_2_C_Pin, GPIO_PIN_RESET);
 8002292:	2200      	movs	r2, #0
 8002294:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002298:	4871      	ldr	r0, [pc, #452]	; (8002460 <sprint_Second2+0x218>)
 800229a:	f001 f9e7 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_B_GPIO_Port, SECOND_2_B_Pin, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a4:	486f      	ldr	r0, [pc, #444]	; (8002464 <sprint_Second2+0x21c>)
 80022a6:	f001 f9e1 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_A_GPIO_Port, SECOND_2_A_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2104      	movs	r1, #4
 80022ae:	486d      	ldr	r0, [pc, #436]	; (8002464 <sprint_Second2+0x21c>)
 80022b0:	f001 f9dc 	bl	800366c <HAL_GPIO_WritePin>
		break;
 80022b4:	e0cf      	b.n	8002456 <sprint_Second2+0x20e>
	case 1:
		HAL_GPIO_WritePin(SECOND_2_D_GPIO_Port, SECOND_2_D_Pin, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2140      	movs	r1, #64	; 0x40
 80022ba:	4869      	ldr	r0, [pc, #420]	; (8002460 <sprint_Second2+0x218>)
 80022bc:	f001 f9d6 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_C_GPIO_Port, SECOND_2_C_Pin, GPIO_PIN_RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022c6:	4866      	ldr	r0, [pc, #408]	; (8002460 <sprint_Second2+0x218>)
 80022c8:	f001 f9d0 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_B_GPIO_Port, SECOND_2_B_Pin, GPIO_PIN_RESET);
 80022cc:	2200      	movs	r2, #0
 80022ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d2:	4864      	ldr	r0, [pc, #400]	; (8002464 <sprint_Second2+0x21c>)
 80022d4:	f001 f9ca 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_A_GPIO_Port, SECOND_2_A_Pin, GPIO_PIN_SET);
 80022d8:	2201      	movs	r2, #1
 80022da:	2104      	movs	r1, #4
 80022dc:	4861      	ldr	r0, [pc, #388]	; (8002464 <sprint_Second2+0x21c>)
 80022de:	f001 f9c5 	bl	800366c <HAL_GPIO_WritePin>
		break;
 80022e2:	e0b8      	b.n	8002456 <sprint_Second2+0x20e>
	case 2:
		HAL_GPIO_WritePin(SECOND_2_D_GPIO_Port, SECOND_2_D_Pin, GPIO_PIN_RESET);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2140      	movs	r1, #64	; 0x40
 80022e8:	485d      	ldr	r0, [pc, #372]	; (8002460 <sprint_Second2+0x218>)
 80022ea:	f001 f9bf 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_C_GPIO_Port, SECOND_2_C_Pin, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022f4:	485a      	ldr	r0, [pc, #360]	; (8002460 <sprint_Second2+0x218>)
 80022f6:	f001 f9b9 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_B_GPIO_Port, SECOND_2_B_Pin, GPIO_PIN_SET);
 80022fa:	2201      	movs	r2, #1
 80022fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002300:	4858      	ldr	r0, [pc, #352]	; (8002464 <sprint_Second2+0x21c>)
 8002302:	f001 f9b3 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_A_GPIO_Port, SECOND_2_A_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	2104      	movs	r1, #4
 800230a:	4856      	ldr	r0, [pc, #344]	; (8002464 <sprint_Second2+0x21c>)
 800230c:	f001 f9ae 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8002310:	e0a1      	b.n	8002456 <sprint_Second2+0x20e>
	case 3:
		HAL_GPIO_WritePin(SECOND_2_D_GPIO_Port, SECOND_2_D_Pin, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	2140      	movs	r1, #64	; 0x40
 8002316:	4852      	ldr	r0, [pc, #328]	; (8002460 <sprint_Second2+0x218>)
 8002318:	f001 f9a8 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_C_GPIO_Port, SECOND_2_C_Pin, GPIO_PIN_RESET);
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002322:	484f      	ldr	r0, [pc, #316]	; (8002460 <sprint_Second2+0x218>)
 8002324:	f001 f9a2 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_B_GPIO_Port, SECOND_2_B_Pin, GPIO_PIN_SET);
 8002328:	2201      	movs	r2, #1
 800232a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800232e:	484d      	ldr	r0, [pc, #308]	; (8002464 <sprint_Second2+0x21c>)
 8002330:	f001 f99c 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_A_GPIO_Port, SECOND_2_A_Pin, GPIO_PIN_SET);
 8002334:	2201      	movs	r2, #1
 8002336:	2104      	movs	r1, #4
 8002338:	484a      	ldr	r0, [pc, #296]	; (8002464 <sprint_Second2+0x21c>)
 800233a:	f001 f997 	bl	800366c <HAL_GPIO_WritePin>
		break;
 800233e:	e08a      	b.n	8002456 <sprint_Second2+0x20e>
	case 4:
		HAL_GPIO_WritePin(SECOND_2_D_GPIO_Port, SECOND_2_D_Pin, GPIO_PIN_RESET);
 8002340:	2200      	movs	r2, #0
 8002342:	2140      	movs	r1, #64	; 0x40
 8002344:	4846      	ldr	r0, [pc, #280]	; (8002460 <sprint_Second2+0x218>)
 8002346:	f001 f991 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_C_GPIO_Port, SECOND_2_C_Pin, GPIO_PIN_SET);
 800234a:	2201      	movs	r2, #1
 800234c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002350:	4843      	ldr	r0, [pc, #268]	; (8002460 <sprint_Second2+0x218>)
 8002352:	f001 f98b 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_B_GPIO_Port, SECOND_2_B_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800235c:	4841      	ldr	r0, [pc, #260]	; (8002464 <sprint_Second2+0x21c>)
 800235e:	f001 f985 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_A_GPIO_Port, SECOND_2_A_Pin, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	2104      	movs	r1, #4
 8002366:	483f      	ldr	r0, [pc, #252]	; (8002464 <sprint_Second2+0x21c>)
 8002368:	f001 f980 	bl	800366c <HAL_GPIO_WritePin>
		break;
 800236c:	e073      	b.n	8002456 <sprint_Second2+0x20e>
	case 5:
		HAL_GPIO_WritePin(SECOND_2_D_GPIO_Port, SECOND_2_D_Pin, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	2140      	movs	r1, #64	; 0x40
 8002372:	483b      	ldr	r0, [pc, #236]	; (8002460 <sprint_Second2+0x218>)
 8002374:	f001 f97a 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_C_GPIO_Port, SECOND_2_C_Pin, GPIO_PIN_SET);
 8002378:	2201      	movs	r2, #1
 800237a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800237e:	4838      	ldr	r0, [pc, #224]	; (8002460 <sprint_Second2+0x218>)
 8002380:	f001 f974 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_B_GPIO_Port, SECOND_2_B_Pin, GPIO_PIN_RESET);
 8002384:	2200      	movs	r2, #0
 8002386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800238a:	4836      	ldr	r0, [pc, #216]	; (8002464 <sprint_Second2+0x21c>)
 800238c:	f001 f96e 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_A_GPIO_Port, SECOND_2_A_Pin, GPIO_PIN_SET);
 8002390:	2201      	movs	r2, #1
 8002392:	2104      	movs	r1, #4
 8002394:	4833      	ldr	r0, [pc, #204]	; (8002464 <sprint_Second2+0x21c>)
 8002396:	f001 f969 	bl	800366c <HAL_GPIO_WritePin>
		break;
 800239a:	e05c      	b.n	8002456 <sprint_Second2+0x20e>
	case 6:
		HAL_GPIO_WritePin(SECOND_2_D_GPIO_Port, SECOND_2_D_Pin, GPIO_PIN_RESET);
 800239c:	2200      	movs	r2, #0
 800239e:	2140      	movs	r1, #64	; 0x40
 80023a0:	482f      	ldr	r0, [pc, #188]	; (8002460 <sprint_Second2+0x218>)
 80023a2:	f001 f963 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_C_GPIO_Port, SECOND_2_C_Pin, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ac:	482c      	ldr	r0, [pc, #176]	; (8002460 <sprint_Second2+0x218>)
 80023ae:	f001 f95d 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_B_GPIO_Port, SECOND_2_B_Pin, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023b8:	482a      	ldr	r0, [pc, #168]	; (8002464 <sprint_Second2+0x21c>)
 80023ba:	f001 f957 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_A_GPIO_Port, SECOND_2_A_Pin, GPIO_PIN_RESET);
 80023be:	2200      	movs	r2, #0
 80023c0:	2104      	movs	r1, #4
 80023c2:	4828      	ldr	r0, [pc, #160]	; (8002464 <sprint_Second2+0x21c>)
 80023c4:	f001 f952 	bl	800366c <HAL_GPIO_WritePin>
		break;
 80023c8:	e045      	b.n	8002456 <sprint_Second2+0x20e>
	case 7:
		HAL_GPIO_WritePin(SECOND_2_D_GPIO_Port, SECOND_2_D_Pin, GPIO_PIN_RESET);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2140      	movs	r1, #64	; 0x40
 80023ce:	4824      	ldr	r0, [pc, #144]	; (8002460 <sprint_Second2+0x218>)
 80023d0:	f001 f94c 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_C_GPIO_Port, SECOND_2_C_Pin, GPIO_PIN_SET);
 80023d4:	2201      	movs	r2, #1
 80023d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023da:	4821      	ldr	r0, [pc, #132]	; (8002460 <sprint_Second2+0x218>)
 80023dc:	f001 f946 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_B_GPIO_Port, SECOND_2_B_Pin, GPIO_PIN_SET);
 80023e0:	2201      	movs	r2, #1
 80023e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023e6:	481f      	ldr	r0, [pc, #124]	; (8002464 <sprint_Second2+0x21c>)
 80023e8:	f001 f940 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_A_GPIO_Port, SECOND_2_A_Pin, GPIO_PIN_SET);
 80023ec:	2201      	movs	r2, #1
 80023ee:	2104      	movs	r1, #4
 80023f0:	481c      	ldr	r0, [pc, #112]	; (8002464 <sprint_Second2+0x21c>)
 80023f2:	f001 f93b 	bl	800366c <HAL_GPIO_WritePin>
		break;
 80023f6:	e02e      	b.n	8002456 <sprint_Second2+0x20e>
	case 8:
		HAL_GPIO_WritePin(SECOND_2_D_GPIO_Port, SECOND_2_D_Pin, GPIO_PIN_SET);
 80023f8:	2201      	movs	r2, #1
 80023fa:	2140      	movs	r1, #64	; 0x40
 80023fc:	4818      	ldr	r0, [pc, #96]	; (8002460 <sprint_Second2+0x218>)
 80023fe:	f001 f935 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_C_GPIO_Port, SECOND_2_C_Pin, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002408:	4815      	ldr	r0, [pc, #84]	; (8002460 <sprint_Second2+0x218>)
 800240a:	f001 f92f 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_B_GPIO_Port, SECOND_2_B_Pin, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002414:	4813      	ldr	r0, [pc, #76]	; (8002464 <sprint_Second2+0x21c>)
 8002416:	f001 f929 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_A_GPIO_Port, SECOND_2_A_Pin, GPIO_PIN_RESET);
 800241a:	2200      	movs	r2, #0
 800241c:	2104      	movs	r1, #4
 800241e:	4811      	ldr	r0, [pc, #68]	; (8002464 <sprint_Second2+0x21c>)
 8002420:	f001 f924 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8002424:	e017      	b.n	8002456 <sprint_Second2+0x20e>
	case 9:
		HAL_GPIO_WritePin(SECOND_2_D_GPIO_Port, SECOND_2_D_Pin, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	2140      	movs	r1, #64	; 0x40
 800242a:	480d      	ldr	r0, [pc, #52]	; (8002460 <sprint_Second2+0x218>)
 800242c:	f001 f91e 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_C_GPIO_Port, SECOND_2_C_Pin, GPIO_PIN_RESET);
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002436:	480a      	ldr	r0, [pc, #40]	; (8002460 <sprint_Second2+0x218>)
 8002438:	f001 f918 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_B_GPIO_Port, SECOND_2_B_Pin, GPIO_PIN_RESET);
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002442:	4808      	ldr	r0, [pc, #32]	; (8002464 <sprint_Second2+0x21c>)
 8002444:	f001 f912 	bl	800366c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SECOND_2_A_GPIO_Port, SECOND_2_A_Pin, GPIO_PIN_SET);
 8002448:	2201      	movs	r2, #1
 800244a:	2104      	movs	r1, #4
 800244c:	4805      	ldr	r0, [pc, #20]	; (8002464 <sprint_Second2+0x21c>)
 800244e:	f001 f90d 	bl	800366c <HAL_GPIO_WritePin>
		break;
 8002452:	e000      	b.n	8002456 <sprint_Second2+0x20e>
	default:
		break;
 8002454:	bf00      	nop
	}
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40020000 	.word	0x40020000
 8002464:	40020400 	.word	0x40020400

08002468 <Buzzer_Activate>:

void Buzzer_Activate(int delay) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8002470:	2201      	movs	r2, #1
 8002472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002476:	4808      	ldr	r0, [pc, #32]	; (8002498 <Buzzer_Activate+0x30>)
 8002478:	f001 f8f8 	bl	800366c <HAL_GPIO_WritePin>
	HAL_Delay(delay);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fe0e 	bl	80030a0 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800248a:	4803      	ldr	r0, [pc, #12]	; (8002498 <Buzzer_Activate+0x30>)
 800248c:	f001 f8ee 	bl	800366c <HAL_GPIO_WritePin>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40020800 	.word	0x40020800

0800249c <displayHour>:

void displayHour(int digit)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	int part1=digit/10;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a0f      	ldr	r2, [pc, #60]	; (80024e4 <displayHour+0x48>)
 80024a8:	fb82 1203 	smull	r1, r2, r2, r3
 80024ac:	1092      	asrs	r2, r2, #2
 80024ae:	17db      	asrs	r3, r3, #31
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	60fb      	str	r3, [r7, #12]
	int part2=digit%10;
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <displayHour+0x48>)
 80024b8:	fb83 1302 	smull	r1, r3, r3, r2
 80024bc:	1099      	asrs	r1, r3, #2
 80024be:	17d3      	asrs	r3, r2, #31
 80024c0:	1ac9      	subs	r1, r1, r3
 80024c2:	460b      	mov	r3, r1
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	60bb      	str	r3, [r7, #8]
	sprint_Hour1(part1);
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f7ff f97e 	bl	80017d0 <sprint_Hour1>
	sprint_Hour2(part2);
 80024d4:	68b8      	ldr	r0, [r7, #8]
 80024d6:	f7ff fa75 	bl	80019c4 <sprint_Hour2>
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	66666667 	.word	0x66666667

080024e8 <displayMinute>:

void displayMinute(int digit)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	int part1=digit/10;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <displayMinute+0x48>)
 80024f4:	fb82 1203 	smull	r1, r2, r2, r3
 80024f8:	1092      	asrs	r2, r2, #2
 80024fa:	17db      	asrs	r3, r3, #31
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	60fb      	str	r3, [r7, #12]
	int part2=digit%10;
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <displayMinute+0x48>)
 8002504:	fb83 1302 	smull	r1, r3, r3, r2
 8002508:	1099      	asrs	r1, r3, #2
 800250a:	17d3      	asrs	r3, r2, #31
 800250c:	1ac9      	subs	r1, r1, r3
 800250e:	460b      	mov	r3, r1
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	440b      	add	r3, r1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	60bb      	str	r3, [r7, #8]
	sprint_Minute1(part1);
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff fb6e 	bl	8001bfc <sprint_Minute1>
	sprint_Minute2(part2);
 8002520:	68b8      	ldr	r0, [r7, #8]
 8002522:	f7ff fc7b 	bl	8001e1c <sprint_Minute2>
}
 8002526:	bf00      	nop
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	66666667 	.word	0x66666667

08002534 <displaySecond>:

void displaySecond(int digit)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	int part1=digit/10;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a0f      	ldr	r2, [pc, #60]	; (800257c <displaySecond+0x48>)
 8002540:	fb82 1203 	smull	r1, r2, r2, r3
 8002544:	1092      	asrs	r2, r2, #2
 8002546:	17db      	asrs	r3, r3, #31
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	60fb      	str	r3, [r7, #12]
	int part2=digit%10;
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <displaySecond+0x48>)
 8002550:	fb83 1302 	smull	r1, r3, r3, r2
 8002554:	1099      	asrs	r1, r3, #2
 8002556:	17d3      	asrs	r3, r2, #31
 8002558:	1ac9      	subs	r1, r1, r3
 800255a:	460b      	mov	r3, r1
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	60bb      	str	r3, [r7, #8]
	sprint_Second1(part1);
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7ff fd66 	bl	8002038 <sprint_Second1>
	sprint_Second2(part2);
 800256c:	68b8      	ldr	r0, [r7, #8]
 800256e:	f7ff fe6b 	bl	8002248 <sprint_Second2>
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	66666667 	.word	0x66666667

08002580 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002586:	f000 fd19 	bl	8002fbc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800258a:	f000 f8bb 	bl	8002704 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800258e:	f000 f9a5 	bl	80028dc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002592:	f000 f979 	bl	8002888 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8002596:	f000 f91f 	bl	80027d8 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 800259a:	f000 f94b 	bl	8002834 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	NEO6_Init(&GpsState, &huart1);
 800259e:	494e      	ldr	r1, [pc, #312]	; (80026d8 <main+0x158>)
 80025a0:	484e      	ldr	r0, [pc, #312]	; (80026dc <main+0x15c>)
 80025a2:	f7ff f865 	bl	8001670 <NEO6_Init>
	DS3231_Init(&rtc, &hi2c1);
 80025a6:	494e      	ldr	r1, [pc, #312]	; (80026e0 <main+0x160>)
 80025a8:	484e      	ldr	r0, [pc, #312]	; (80026e4 <main+0x164>)
 80025aa:	f7fe fe69 	bl	8001280 <DS3231_Init>
	uint32_t Timer = HAL_GetTick();
 80025ae:	f000 fd6b 	bl	8003088 <HAL_GetTick>
 80025b2:	6078      	str	r0, [r7, #4]

	uint8_t update = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	70fb      	strb	r3, [r7, #3]

	Buzzer_Activate(40);
 80025b8:	2028      	movs	r0, #40	; 0x28
 80025ba:	f7ff ff55 	bl	8002468 <Buzzer_Activate>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if(update==0)
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d102      	bne.n	80025ca <main+0x4a>
		{
			NEO6_Task(&GpsState);
 80025c4:	4845      	ldr	r0, [pc, #276]	; (80026dc <main+0x15c>)
 80025c6:	f7ff f82d 	bl	8001624 <NEO6_Task>
		}


		if ((HAL_GetTick() - Timer) > 100) {
 80025ca:	f000 fd5d 	bl	8003088 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b64      	cmp	r3, #100	; 0x64
 80025d6:	d9f2      	bls.n	80025be <main+0x3e>

			if (GpsState.Year != 00) {
 80025d8:	4b40      	ldr	r3, [pc, #256]	; (80026dc <main+0x15c>)
 80025da:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d02c      	beq.n	800263c <main+0xbc>
				//MessageLength = sprintf((char*) Message,"UTC Time: %02d:%02d:%02d\n\r", GpsState.Hour,GpsState.Minute, GpsState.Second);
				//HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
				//MessageLength = sprintf((char*) Message,"Date: %02d.%02d.20%02d\n\r", GpsState.Day,GpsState.Month, GpsState.Year);
				//HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
				if (update == 0) {
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d127      	bne.n	8002638 <main+0xb8>

					rtc_setup.hour = GpsState.Hour;
 80025e8:	4b3c      	ldr	r3, [pc, #240]	; (80026dc <main+0x15c>)
 80025ea:	f893 2187 	ldrb.w	r2, [r3, #391]	; 0x187
 80025ee:	4b3e      	ldr	r3, [pc, #248]	; (80026e8 <main+0x168>)
 80025f0:	709a      	strb	r2, [r3, #2]
					rtc_setup.minute = GpsState.Minute;
 80025f2:	4b3a      	ldr	r3, [pc, #232]	; (80026dc <main+0x15c>)
 80025f4:	f893 2188 	ldrb.w	r2, [r3, #392]	; 0x188
 80025f8:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <main+0x168>)
 80025fa:	705a      	strb	r2, [r3, #1]
					rtc_setup.second = GpsState.Second;
 80025fc:	4b37      	ldr	r3, [pc, #220]	; (80026dc <main+0x15c>)
 80025fe:	f893 2189 	ldrb.w	r2, [r3, #393]	; 0x189
 8002602:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <main+0x168>)
 8002604:	701a      	strb	r2, [r3, #0]
					rtc_setup.day = GpsState.Day;
 8002606:	4b35      	ldr	r3, [pc, #212]	; (80026dc <main+0x15c>)
 8002608:	f893 218a 	ldrb.w	r2, [r3, #394]	; 0x18a
 800260c:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <main+0x168>)
 800260e:	70da      	strb	r2, [r3, #3]
					rtc_setup.month = GpsState.Month;
 8002610:	4b32      	ldr	r3, [pc, #200]	; (80026dc <main+0x15c>)
 8002612:	f893 218b 	ldrb.w	r2, [r3, #395]	; 0x18b
 8002616:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <main+0x168>)
 8002618:	711a      	strb	r2, [r3, #4]
					rtc_setup.year = GpsState.Year + 2000;
 800261a:	4b30      	ldr	r3, [pc, #192]	; (80026dc <main+0x15c>)
 800261c:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8002620:	b29b      	uxth	r3, r3
 8002622:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002626:	b29a      	uxth	r2, r3
 8002628:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <main+0x168>)
 800262a:	80da      	strh	r2, [r3, #6]
					DS3231_SetDateTime(&rtc_setup);
 800262c:	482e      	ldr	r0, [pc, #184]	; (80026e8 <main+0x168>)
 800262e:	f7fe fdd1 	bl	80011d4 <DS3231_SetDateTime>
					Buzzer_Activate(200);
 8002632:	20c8      	movs	r0, #200	; 0xc8
 8002634:	f7ff ff18 	bl	8002468 <Buzzer_Activate>
				}
				update = 1;
 8002638:	2301      	movs	r3, #1
 800263a:	70fb      	strb	r3, [r7, #3]
			//	my_printf("\r\n");




			if(configMode != 2)
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <main+0x16c>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d03b      	beq.n	80026bc <main+0x13c>
			{
				DS3231_GetDateTime(&rtc);
 8002644:	4827      	ldr	r0, [pc, #156]	; (80026e4 <main+0x164>)
 8002646:	f7fe fcf3 	bl	8001030 <DS3231_GetDateTime>
						//MessageLength = sprintf(Message, "Time RTC: %02d:%02d:%02d\n\r",rtc.hour + timeOffset, rtc.minute, rtc.second);
						//HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);
						//MessageLength = sprintf((char*) Message,"Date RTC: %02d.%02d.%02d\n\r", rtc.day, rtc.month,rtc.year);
						//HAL_UART_Transmit(&huart2, Message, MessageLength, 1000);

						displayHour(rtc.hour+ timeOffset);
 800264a:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <main+0x164>)
 800264c:	799b      	ldrb	r3, [r3, #6]
 800264e:	461a      	mov	r2, r3
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <main+0x170>)
 8002652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002656:	4413      	add	r3, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff1f 	bl	800249c <displayHour>
						displayMinute(rtc.minute);
 800265e:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <main+0x164>)
 8002660:	795b      	ldrb	r3, [r3, #5]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff40 	bl	80024e8 <displayMinute>
						displaySecond(rtc.second);
 8002668:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <main+0x164>)
 800266a:	791b      	ldrb	r3, [r3, #4]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff61 	bl	8002534 <displaySecond>

			if(alarmHour==rtc.hour+timeOffset && alarmMinute==rtc.minute && alarmDeactivate==0)
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <main+0x174>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <main+0x164>)
 800267a:	799b      	ldrb	r3, [r3, #6]
 800267c:	4619      	mov	r1, r3
 800267e:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <main+0x170>)
 8002680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002684:	440b      	add	r3, r1
 8002686:	429a      	cmp	r2, r3
 8002688:	d121      	bne.n	80026ce <main+0x14e>
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <main+0x164>)
 800268c:	795a      	ldrb	r2, [r3, #5]
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <main+0x178>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d11b      	bne.n	80026ce <main+0x14e>
 8002696:	4b19      	ldr	r3, [pc, #100]	; (80026fc <main+0x17c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d117      	bne.n	80026ce <main+0x14e>
			{
			Buzzer_Activate(300);
 800269e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026a2:	f7ff fee1 	bl	8002468 <Buzzer_Activate>
			HAL_Delay(100);
 80026a6:	2064      	movs	r0, #100	; 0x64
 80026a8:	f000 fcfa 	bl	80030a0 <HAL_Delay>
			Buzzer_Activate(300);
 80026ac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026b0:	f7ff feda 	bl	8002468 <Buzzer_Activate>
			alarmDeactivate=1;
 80026b4:	4b11      	ldr	r3, [pc, #68]	; (80026fc <main+0x17c>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e008      	b.n	80026ce <main+0x14e>
			}

			}
			else
			{
				my_printf("Alarm ustawiony na %02d:%02d",alarmHour,alarmMinute);
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <main+0x174>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <main+0x178>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	480d      	ldr	r0, [pc, #52]	; (8002700 <main+0x180>)
 80026ca:	f7ff f86f 	bl	80017ac <my_printf>
			}


			Timer = HAL_GetTick();
 80026ce:	f000 fcdb 	bl	8003088 <HAL_GetTick>
 80026d2:	6078      	str	r0, [r7, #4]
		if(update==0)
 80026d4:	e773      	b.n	80025be <main+0x3e>
 80026d6:	bf00      	nop
 80026d8:	200004b8 	.word	0x200004b8
 80026dc:	20000230 	.word	0x20000230
 80026e0:	20000424 	.word	0x20000424
 80026e4:	200004f8 	.word	0x200004f8
 80026e8:	2000041c 	.word	0x2000041c
 80026ec:	20000203 	.word	0x20000203
 80026f0:	20000208 	.word	0x20000208
 80026f4:	20000204 	.word	0x20000204
 80026f8:	20000205 	.word	0x20000205
 80026fc:	20000206 	.word	0x20000206
 8002700:	0800af24 	.word	0x0800af24

08002704 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b094      	sub	sp, #80	; 0x50
 8002708:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800270a:	f107 0320 	add.w	r3, r7, #32
 800270e:	2230      	movs	r2, #48	; 0x30
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f004 fe50 	bl	80073b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <SystemClock_Config+0xcc>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	4a27      	ldr	r2, [pc, #156]	; (80027d0 <SystemClock_Config+0xcc>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6413      	str	r3, [r2, #64]	; 0x40
 8002738:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <SystemClock_Config+0xcc>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002744:	2300      	movs	r3, #0
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <SystemClock_Config+0xd0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a21      	ldr	r2, [pc, #132]	; (80027d4 <SystemClock_Config+0xd0>)
 800274e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002752:	6013      	str	r3, [r2, #0]
 8002754:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <SystemClock_Config+0xd0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002760:	2302      	movs	r3, #2
 8002762:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002764:	2301      	movs	r3, #1
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002768:	2310      	movs	r3, #16
 800276a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800276c:	2302      	movs	r3, #2
 800276e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002770:	2300      	movs	r3, #0
 8002772:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002774:	2310      	movs	r3, #16
 8002776:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002778:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800277e:	2304      	movs	r3, #4
 8002780:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002782:	2304      	movs	r3, #4
 8002784:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002786:	f107 0320 	add.w	r3, r7, #32
 800278a:	4618      	mov	r0, r3
 800278c:	f003 fa48 	bl	8005c20 <HAL_RCC_OscConfig>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <SystemClock_Config+0x96>
		Error_Handler();
 8002796:	f000 fa49 	bl	8002c2c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800279a:	230f      	movs	r3, #15
 800279c:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800279e:	2302      	movs	r3, #2
 80027a0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027aa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80027b0:	f107 030c 	add.w	r3, r7, #12
 80027b4:	2102      	movs	r1, #2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f003 fca2 	bl	8006100 <HAL_RCC_ClockConfig>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <SystemClock_Config+0xc2>
		Error_Handler();
 80027c2:	f000 fa33 	bl	8002c2c <Error_Handler>
	}
}
 80027c6:	bf00      	nop
 80027c8:	3750      	adds	r7, #80	; 0x50
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40007000 	.word	0x40007000

080027d8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80027dc:	4b12      	ldr	r3, [pc, #72]	; (8002828 <MX_I2C1_Init+0x50>)
 80027de:	4a13      	ldr	r2, [pc, #76]	; (800282c <MX_I2C1_Init+0x54>)
 80027e0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <MX_I2C1_Init+0x50>)
 80027e4:	4a12      	ldr	r2, [pc, #72]	; (8002830 <MX_I2C1_Init+0x58>)
 80027e6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <MX_I2C1_Init+0x50>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_I2C1_Init+0x50>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <MX_I2C1_Init+0x50>)
 80027f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027fa:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <MX_I2C1_Init+0x50>)
 80027fe:	2200      	movs	r2, #0
 8002800:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <MX_I2C1_Init+0x50>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002808:	4b07      	ldr	r3, [pc, #28]	; (8002828 <MX_I2C1_Init+0x50>)
 800280a:	2200      	movs	r2, #0
 800280c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <MX_I2C1_Init+0x50>)
 8002810:	2200      	movs	r2, #0
 8002812:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002814:	4804      	ldr	r0, [pc, #16]	; (8002828 <MX_I2C1_Init+0x50>)
 8002816:	f000 ff5b 	bl	80036d0 <HAL_I2C_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002820:	f000 fa04 	bl	8002c2c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000424 	.word	0x20000424
 800282c:	40005400 	.word	0x40005400
 8002830:	000186a0 	.word	0x000186a0

08002834 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <MX_USART1_UART_Init+0x50>)
 800283c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800283e:	4b10      	ldr	r3, [pc, #64]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002840:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002844:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002848:	2200      	movs	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 800285a:	220c      	movs	r2, #12
 800285c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002864:	4b06      	ldr	r3, [pc, #24]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800286a:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_USART1_UART_Init+0x4c>)
 800286c:	f003 fe3a 	bl	80064e4 <HAL_UART_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8002876:	f000 f9d9 	bl	8002c2c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200004b8 	.word	0x200004b8
 8002884:	40011000 	.word	0x40011000

08002888 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <MX_USART2_UART_Init+0x50>)
 8002890:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002892:	4b10      	ldr	r3, [pc, #64]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 8002894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002898:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80028a6:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028ae:	220c      	movs	r2, #12
 80028b0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028b2:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80028be:	4805      	ldr	r0, [pc, #20]	; (80028d4 <MX_USART2_UART_Init+0x4c>)
 80028c0:	f003 fe10 	bl	80064e4 <HAL_UART_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80028ca:	f000 f9af 	bl	8002c2c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000504 	.word	0x20000504
 80028d8:	40004400 	.word	0x40004400

080028dc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	605a      	str	r2, [r3, #4]
 80028ec:	609a      	str	r2, [r3, #8]
 80028ee:	60da      	str	r2, [r3, #12]
 80028f0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	4b68      	ldr	r3, [pc, #416]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a67      	ldr	r2, [pc, #412]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b61      	ldr	r3, [pc, #388]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a60      	ldr	r2, [pc, #384]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 8002918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	4b5a      	ldr	r3, [pc, #360]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a59      	ldr	r2, [pc, #356]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b57      	ldr	r3, [pc, #348]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <MX_GPIO_Init+0x1bc>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 800297e:	2200      	movs	r2, #0
 8002980:	f641 119f 	movw	r1, #6559	; 0x199f
 8002984:	4845      	ldr	r0, [pc, #276]	; (8002a9c <MX_GPIO_Init+0x1c0>)
 8002986:	f000 fe71 	bl	800366c <HAL_GPIO_WritePin>
			HOUR_1_D_Pin | HOUR_1_C_Pin | HOUR_1_A_Pin | HOUR_1_B_Pin
					| MINUTE_1_A_Pin | SECOND_1_B_Pin | BUZZER_Pin
					| HOUR_2_C_Pin | HOUR_2_B_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800298a:	2200      	movs	r2, #0
 800298c:	f648 11e0 	movw	r1, #35296	; 0x89e0
 8002990:	4843      	ldr	r0, [pc, #268]	; (8002aa0 <MX_GPIO_Init+0x1c4>)
 8002992:	f000 fe6b 	bl	800366c <HAL_GPIO_WritePin>
			LD2_Pin | SECOND_2_D_Pin | SECOND_1_D_Pin | SECOND_1_A_Pin
					| SECOND_2_C_Pin | HOUR_2_A_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002996:	2200      	movs	r2, #0
 8002998:	f24f 4176 	movw	r1, #62582	; 0xf476
 800299c:	4841      	ldr	r0, [pc, #260]	; (8002aa4 <MX_GPIO_Init+0x1c8>)
 800299e:	f000 fe65 	bl	800366c <HAL_GPIO_WritePin>
					| MINUTE_1_B_Pin | MINUTE_1_D_Pin | MINUTE_2_B_Pin
					| MINUTE_2_A_Pin | MINUTE_1_C_Pin | SECOND_1_C_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(HOUR_2_D_GPIO_Port, HOUR_2_D_Pin, GPIO_PIN_RESET);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2104      	movs	r1, #4
 80029a6:	4840      	ldr	r0, [pc, #256]	; (8002aa8 <MX_GPIO_Init+0x1cc>)
 80029a8:	f000 fe60 	bl	800366c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80029ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <MX_GPIO_Init+0x1d0>)
 80029b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	4619      	mov	r1, r3
 80029c0:	4836      	ldr	r0, [pc, #216]	; (8002a9c <MX_GPIO_Init+0x1c0>)
 80029c2:	f000 fcd1 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pins : HOUR_1_D_Pin HOUR_1_C_Pin HOUR_1_A_Pin HOUR_1_B_Pin
	 MINUTE_1_A_Pin SECOND_1_B_Pin BUZZER_Pin HOUR_2_C_Pin
	 HOUR_2_B_Pin */
	GPIO_InitStruct.Pin = HOUR_1_D_Pin | HOUR_1_C_Pin | HOUR_1_A_Pin
 80029c6:	f641 139f 	movw	r3, #6559	; 0x199f
 80029ca:	617b      	str	r3, [r7, #20]
			| HOUR_1_B_Pin | MINUTE_1_A_Pin | SECOND_1_B_Pin | BUZZER_Pin
			| HOUR_2_C_Pin | HOUR_2_B_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029cc:	2301      	movs	r3, #1
 80029ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d4:	2300      	movs	r3, #0
 80029d6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	4619      	mov	r1, r3
 80029de:	482f      	ldr	r0, [pc, #188]	; (8002a9c <MX_GPIO_Init+0x1c0>)
 80029e0:	f000 fcc2 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin SECOND_2_D_Pin SECOND_1_D_Pin SECOND_1_A_Pin
	 SECOND_2_C_Pin HOUR_2_A_Pin */
	GPIO_InitStruct.Pin = LD2_Pin | SECOND_2_D_Pin | SECOND_1_D_Pin
 80029e4:	f648 13e0 	movw	r3, #35296	; 0x89e0
 80029e8:	617b      	str	r3, [r7, #20]
			| SECOND_1_A_Pin | SECOND_2_C_Pin | HOUR_2_A_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ea:	2301      	movs	r3, #1
 80029ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f2:	2300      	movs	r3, #0
 80029f4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	4619      	mov	r1, r3
 80029fc:	4828      	ldr	r0, [pc, #160]	; (8002aa0 <MX_GPIO_Init+0x1c4>)
 80029fe:	f000 fcb3 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pins : BUTTON_2_Pin BUTTON_1_Pin */
	GPIO_InitStruct.Pin = BUTTON_2_Pin | BUTTON_1_Pin;
 8002a02:	2360      	movs	r3, #96	; 0x60
 8002a04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a06:	4b29      	ldr	r3, [pc, #164]	; (8002aac <MX_GPIO_Init+0x1d0>)
 8002a08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	4821      	ldr	r0, [pc, #132]	; (8002a9c <MX_GPIO_Init+0x1c0>)
 8002a16:	f000 fca7 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pins : MINUTE_2_D_Pin SECOND_2_A_Pin MINUTE_2_C_Pin SECOND_2_B_Pin
	 MINUTE_1_B_Pin MINUTE_1_D_Pin MINUTE_2_B_Pin MINUTE_2_A_Pin
	 MINUTE_1_C_Pin SECOND_1_C_Pin */
	GPIO_InitStruct.Pin = MINUTE_2_D_Pin | SECOND_2_A_Pin | MINUTE_2_C_Pin
 8002a1a:	f24f 4376 	movw	r3, #62582	; 0xf476
 8002a1e:	617b      	str	r3, [r7, #20]
			| SECOND_2_B_Pin | MINUTE_1_B_Pin | MINUTE_1_D_Pin | MINUTE_2_B_Pin
			| MINUTE_2_A_Pin | MINUTE_1_C_Pin | SECOND_1_C_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a20:	2301      	movs	r3, #1
 8002a22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4619      	mov	r1, r3
 8002a32:	481c      	ldr	r0, [pc, #112]	; (8002aa4 <MX_GPIO_Init+0x1c8>)
 8002a34:	f000 fc98 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_3_Pin */
	GPIO_InitStruct.Pin = BUTTON_3_Pin;
 8002a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <MX_GPIO_Init+0x1d0>)
 8002a40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BUTTON_3_GPIO_Port, &GPIO_InitStruct);
 8002a46:	f107 0314 	add.w	r3, r7, #20
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4814      	ldr	r0, [pc, #80]	; (8002aa0 <MX_GPIO_Init+0x1c4>)
 8002a4e:	f000 fc8b 	bl	8003368 <HAL_GPIO_Init>

	/*Configure GPIO pin : HOUR_2_D_Pin */
	GPIO_InitStruct.Pin = HOUR_2_D_Pin;
 8002a52:	2304      	movs	r3, #4
 8002a54:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a56:	2301      	movs	r3, #1
 8002a58:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(HOUR_2_D_GPIO_Port, &GPIO_InitStruct);
 8002a62:	f107 0314 	add.w	r3, r7, #20
 8002a66:	4619      	mov	r1, r3
 8002a68:	480f      	ldr	r0, [pc, #60]	; (8002aa8 <MX_GPIO_Init+0x1cc>)
 8002a6a:	f000 fc7d 	bl	8003368 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	2017      	movs	r0, #23
 8002a74:	f000 fc11 	bl	800329a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a78:	2017      	movs	r0, #23
 8002a7a:	f000 fc2a 	bl	80032d2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	2028      	movs	r0, #40	; 0x28
 8002a84:	f000 fc09 	bl	800329a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a88:	2028      	movs	r0, #40	; 0x28
 8002a8a:	f000 fc22 	bl	80032d2 <HAL_NVIC_EnableIRQ>

}
 8002a8e:	bf00      	nop
 8002a90:	3728      	adds	r7, #40	; 0x28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40020800 	.word	0x40020800
 8002aa0:	40020000 	.word	0x40020000
 8002aa4:	40020400 	.word	0x40020400
 8002aa8:	40020c00 	.word	0x40020c00
 8002aac:	10210000 	.word	0x10210000

08002ab0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
	if (huart == GpsState.neo6_huart) {
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <HAL_UART_RxCpltCallback+0x20>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d102      	bne.n	8002ac8 <HAL_UART_RxCpltCallback+0x18>
		NEO6_ReceiveUartChar(&GpsState);
 8002ac2:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <HAL_UART_RxCpltCallback+0x20>)
 8002ac4:	f7fe fc22 	bl	800130c <NEO6_ReceiveUartChar>
	}
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000230 	.word	0x20000230

08002ad4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	80fb      	strh	r3, [r7, #6]

	if (GPIO_PIN == BUTTON_1_Pin) {
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b40      	cmp	r3, #64	; 0x40
 8002ae2:	d128      	bne.n	8002b36 <HAL_GPIO_EXTI_Callback+0x62>
		if (muttexButton1 == 0) {
 8002ae4:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <HAL_GPIO_EXTI_Callback+0x138>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d124      	bne.n	8002b36 <HAL_GPIO_EXTI_Callback+0x62>
			if (configMode == 1) {
 8002aec:	4b48      	ldr	r3, [pc, #288]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d103      	bne.n	8002afc <HAL_GPIO_EXTI_Callback+0x28>
				configMode = 0;
 8002af4:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
 8002afa:	e019      	b.n	8002b30 <HAL_GPIO_EXTI_Callback+0x5c>
			} else if (configMode == 2) {
 8002afc:	4b44      	ldr	r3, [pc, #272]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d112      	bne.n	8002b2a <HAL_GPIO_EXTI_Callback+0x56>
				alarmHour=alarmHour+1;
 8002b04:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_GPIO_EXTI_Callback+0x140>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <HAL_GPIO_EXTI_Callback+0x140>)
 8002b0e:	701a      	strb	r2, [r3, #0]
				displayHour(alarmHour);
 8002b10:	4b40      	ldr	r3, [pc, #256]	; (8002c14 <HAL_GPIO_EXTI_Callback+0x140>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fcc1 	bl	800249c <displayHour>
				if(alarmHour>=24)
 8002b1a:	4b3e      	ldr	r3, [pc, #248]	; (8002c14 <HAL_GPIO_EXTI_Callback+0x140>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b17      	cmp	r3, #23
 8002b20:	d906      	bls.n	8002b30 <HAL_GPIO_EXTI_Callback+0x5c>
				{
					alarmHour=0;
 8002b22:	4b3c      	ldr	r3, [pc, #240]	; (8002c14 <HAL_GPIO_EXTI_Callback+0x140>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	e002      	b.n	8002b30 <HAL_GPIO_EXTI_Callback+0x5c>
				}
			} else {
				configMode = 1;
 8002b2a:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
			}
			muttexButton1 = 1;
 8002b30:	4b36      	ldr	r3, [pc, #216]	; (8002c0c <HAL_GPIO_EXTI_Callback+0x138>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
		}

	}

	if (GPIO_PIN == BUTTON_2_Pin) {
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d12b      	bne.n	8002b94 <HAL_GPIO_EXTI_Callback+0xc0>
		if (muttexButton2 == 0) {
 8002b3c:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_GPIO_EXTI_Callback+0x144>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d127      	bne.n	8002b94 <HAL_GPIO_EXTI_Callback+0xc0>
			if (configMode == 1) {
 8002b44:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d109      	bne.n	8002b60 <HAL_GPIO_EXTI_Callback+0x8c>
				timeOffset = timeOffset + 1;
 8002b4c:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_GPIO_EXTI_Callback+0x148>)
 8002b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	b21a      	sxth	r2, r3
 8002b5a:	4b30      	ldr	r3, [pc, #192]	; (8002c1c <HAL_GPIO_EXTI_Callback+0x148>)
 8002b5c:	801a      	strh	r2, [r3, #0]
 8002b5e:	e016      	b.n	8002b8e <HAL_GPIO_EXTI_Callback+0xba>
			}
			else if(configMode == 2) {
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d103      	bne.n	8002b70 <HAL_GPIO_EXTI_Callback+0x9c>
				configMode=0;
 8002b68:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e00e      	b.n	8002b8e <HAL_GPIO_EXTI_Callback+0xba>
			}
			else
			{
				configMode=2;
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002b72:	2202      	movs	r2, #2
 8002b74:	701a      	strb	r2, [r3, #0]
				alarmDeactivate=0;
 8002b76:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
				displayHour(0);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7ff fc8d 	bl	800249c <displayHour>
				displayMinute(0);
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7ff fcb0 	bl	80024e8 <displayMinute>
				displaySecond(0);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7ff fcd3 	bl	8002534 <displaySecond>
			}



			muttexButton2 = 1;
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <HAL_GPIO_EXTI_Callback+0x144>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
		}
	}
	if (GPIO_PIN == BUTTON_3_Pin) {
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9a:	d12a      	bne.n	8002bf2 <HAL_GPIO_EXTI_Callback+0x11e>
		if (muttexButton3 == 0) {
 8002b9c:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <HAL_GPIO_EXTI_Callback+0x150>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d126      	bne.n	8002bf2 <HAL_GPIO_EXTI_Callback+0x11e>
			if (configMode == 1) {
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d109      	bne.n	8002bc0 <HAL_GPIO_EXTI_Callback+0xec>
				timeOffset = timeOffset - 1;
 8002bac:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_GPIO_EXTI_Callback+0x148>)
 8002bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	b21a      	sxth	r2, r3
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_GPIO_EXTI_Callback+0x148>)
 8002bbc:	801a      	strh	r2, [r3, #0]
 8002bbe:	e015      	b.n	8002bec <HAL_GPIO_EXTI_Callback+0x118>
			} else if (configMode == 2) {
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d111      	bne.n	8002bec <HAL_GPIO_EXTI_Callback+0x118>
			   alarmMinute=alarmMinute+1;
 8002bc8:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <HAL_GPIO_EXTI_Callback+0x154>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_GPIO_EXTI_Callback+0x154>)
 8002bd2:	701a      	strb	r2, [r3, #0]
			   displayMinute(alarmMinute);
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <HAL_GPIO_EXTI_Callback+0x154>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fc85 	bl	80024e8 <displayMinute>
			   if(alarmMinute>=60)
 8002bde:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_GPIO_EXTI_Callback+0x154>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b3b      	cmp	r3, #59	; 0x3b
 8002be4:	d902      	bls.n	8002bec <HAL_GPIO_EXTI_Callback+0x118>
			   				{
				   alarmMinute=0;
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <HAL_GPIO_EXTI_Callback+0x154>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
			   				}
			}
			muttexButton3 = 1;
 8002bec:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_GPIO_EXTI_Callback+0x150>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
		}
	}

	muttexButton1 = 0;
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_GPIO_EXTI_Callback+0x138>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
	muttexButton2 = 0;
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_GPIO_EXTI_Callback+0x144>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
	muttexButton3 = 0;
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_GPIO_EXTI_Callback+0x150>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000200 	.word	0x20000200
 8002c10:	20000203 	.word	0x20000203
 8002c14:	20000204 	.word	0x20000204
 8002c18:	20000201 	.word	0x20000201
 8002c1c:	20000208 	.word	0x20000208
 8002c20:	20000206 	.word	0x20000206
 8002c24:	20000202 	.word	0x20000202
 8002c28:	20000205 	.word	0x20000205

08002c2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a0f      	ldr	r2, [pc, #60]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a08      	ldr	r2, [pc, #32]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <HAL_MspInit+0x4c>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c7a:	2007      	movs	r0, #7
 8002c7c:	f000 fb02 	bl	8003284 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800

08002c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <HAL_I2C_MspInit+0x94>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d134      	bne.n	8002d18 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	4b1c      	ldr	r3, [pc, #112]	; (8002d24 <HAL_I2C_MspInit+0x98>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a1b      	ldr	r2, [pc, #108]	; (8002d24 <HAL_I2C_MspInit+0x98>)
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_I2C_MspInit+0x98>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cd0:	2312      	movs	r3, #18
 8002cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cdc:	2304      	movs	r3, #4
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4810      	ldr	r0, [pc, #64]	; (8002d28 <HAL_I2C_MspInit+0x9c>)
 8002ce8:	f000 fb3e 	bl	8003368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <HAL_I2C_MspInit+0x98>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	4a0b      	ldr	r2, [pc, #44]	; (8002d24 <HAL_I2C_MspInit+0x98>)
 8002cf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_I2C_MspInit+0x98>)
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	201f      	movs	r0, #31
 8002d0e:	f000 fac4 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002d12:	201f      	movs	r0, #31
 8002d14:	f000 fadd 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40005400 	.word	0x40005400
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40020400 	.word	0x40020400

08002d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08c      	sub	sp, #48	; 0x30
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 031c 	add.w	r3, r7, #28
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a36      	ldr	r2, [pc, #216]	; (8002e24 <HAL_UART_MspInit+0xf8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d135      	bne.n	8002dba <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61bb      	str	r3, [r7, #24]
 8002d52:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <HAL_UART_MspInit+0xfc>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <HAL_UART_MspInit+0xfc>)
 8002d58:	f043 0310 	orr.w	r3, r3, #16
 8002d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5e:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <HAL_UART_MspInit+0xfc>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_UART_MspInit+0xfc>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a2d      	ldr	r2, [pc, #180]	; (8002e28 <HAL_UART_MspInit+0xfc>)
 8002d74:	f043 0301 	orr.w	r3, r3, #1
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_UART_MspInit+0xfc>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d98:	2307      	movs	r3, #7
 8002d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	4619      	mov	r1, r3
 8002da2:	4822      	ldr	r0, [pc, #136]	; (8002e2c <HAL_UART_MspInit+0x100>)
 8002da4:	f000 fae0 	bl	8003368 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002da8:	2200      	movs	r2, #0
 8002daa:	2100      	movs	r1, #0
 8002dac:	2025      	movs	r0, #37	; 0x25
 8002dae:	f000 fa74 	bl	800329a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002db2:	2025      	movs	r0, #37	; 0x25
 8002db4:	f000 fa8d 	bl	80032d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002db8:	e030      	b.n	8002e1c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1c      	ldr	r2, [pc, #112]	; (8002e30 <HAL_UART_MspInit+0x104>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d12b      	bne.n	8002e1c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <HAL_UART_MspInit+0xfc>)
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	4a16      	ldr	r2, [pc, #88]	; (8002e28 <HAL_UART_MspInit+0xfc>)
 8002dce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_UART_MspInit+0xfc>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_UART_MspInit+0xfc>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4a0f      	ldr	r2, [pc, #60]	; (8002e28 <HAL_UART_MspInit+0xfc>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6313      	str	r3, [r2, #48]	; 0x30
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <HAL_UART_MspInit+0xfc>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e00:	2302      	movs	r3, #2
 8002e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e0c:	2307      	movs	r3, #7
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e10:	f107 031c 	add.w	r3, r7, #28
 8002e14:	4619      	mov	r1, r3
 8002e16:	4805      	ldr	r0, [pc, #20]	; (8002e2c <HAL_UART_MspInit+0x100>)
 8002e18:	f000 faa6 	bl	8003368 <HAL_GPIO_Init>
}
 8002e1c:	bf00      	nop
 8002e1e:	3730      	adds	r7, #48	; 0x30
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40011000 	.word	0x40011000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	40004400 	.word	0x40004400

08002e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e46:	e7fe      	b.n	8002e46 <HardFault_Handler+0x4>

08002e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <MemManage_Handler+0x4>

08002e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e52:	e7fe      	b.n	8002e52 <BusFault_Handler+0x4>

08002e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e58:	e7fe      	b.n	8002e58 <UsageFault_Handler+0x4>

08002e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e88:	f000 f8ea 	bl	8003060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002e94:	2020      	movs	r0, #32
 8002e96:	f000 fc03 	bl	80036a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002e9a:	2040      	movs	r0, #64	; 0x40
 8002e9c:	f000 fc00 	bl	80036a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ea8:	4802      	ldr	r0, [pc, #8]	; (8002eb4 <I2C1_EV_IRQHandler+0x10>)
 8002eaa:	f001 f869 	bl	8003f80 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20000424 	.word	0x20000424

08002eb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <USART1_IRQHandler+0x10>)
 8002ebe:	f003 fc4d 	bl	800675c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200004b8 	.word	0x200004b8

08002ecc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002ed0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ed4:	f000 fbe4 	bl	80036a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002ed8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002edc:	f000 fbe0 	bl	80036a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <_sbrk+0x50>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <_sbrk+0x16>
		heap_end = &end;
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <_sbrk+0x50>)
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <_sbrk+0x54>)
 8002ef8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <_sbrk+0x50>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <_sbrk+0x50>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	466a      	mov	r2, sp
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d907      	bls.n	8002f1e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002f0e:	f004 fa29 	bl	8007364 <__errno>
 8002f12:	4602      	mov	r2, r0
 8002f14:	230c      	movs	r3, #12
 8002f16:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1c:	e006      	b.n	8002f2c <_sbrk+0x48>
	}

	heap_end += incr;
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <_sbrk+0x50>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	4a03      	ldr	r2, [pc, #12]	; (8002f34 <_sbrk+0x50>)
 8002f28:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	2000020c 	.word	0x2000020c
 8002f38:	20000550 	.word	0x20000550

08002f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <SystemInit+0x28>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <SystemInit+0x28>)
 8002f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <SystemInit+0x28>)
 8002f52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f56:	609a      	str	r2, [r3, #8]
#endif
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fa0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f6e:	e003      	b.n	8002f78 <LoopCopyDataInit>

08002f70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f76:	3104      	adds	r1, #4

08002f78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f78:	480b      	ldr	r0, [pc, #44]	; (8002fa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f80:	d3f6      	bcc.n	8002f70 <CopyDataInit>
  ldr  r2, =_sbss
 8002f82:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f84:	e002      	b.n	8002f8c <LoopFillZerobss>

08002f86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f88:	f842 3b04 	str.w	r3, [r2], #4

08002f8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f90:	d3f9      	bcc.n	8002f86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f92:	f7ff ffd3 	bl	8002f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f96:	f004 f9eb 	bl	8007370 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f9a:	f7ff faf1 	bl	8002580 <main>
  bx  lr    
 8002f9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002fa0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002fa4:	0800b220 	.word	0x0800b220
  ldr  r0, =_sdata
 8002fa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002fac:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002fb0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002fb4:	2000054c 	.word	0x2000054c

08002fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fb8:	e7fe      	b.n	8002fb8 <ADC_IRQHandler>
	...

08002fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_Init+0x40>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0d      	ldr	r2, [pc, #52]	; (8002ffc <HAL_Init+0x40>)
 8002fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <HAL_Init+0x40>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <HAL_Init+0x40>)
 8002fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <HAL_Init+0x40>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <HAL_Init+0x40>)
 8002fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe4:	2003      	movs	r0, #3
 8002fe6:	f000 f94d 	bl	8003284 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f000 f808 	bl	8003000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ff0:	f7ff fe24 	bl	8002c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023c00 	.word	0x40023c00

08003000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003008:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_InitTick+0x54>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <HAL_InitTick+0x58>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	4619      	mov	r1, r3
 8003012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003016:	fbb3 f3f1 	udiv	r3, r3, r1
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	4618      	mov	r0, r3
 8003020:	f000 f965 	bl	80032ee <HAL_SYSTICK_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e00e      	b.n	800304c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b0f      	cmp	r3, #15
 8003032:	d80a      	bhi.n	800304a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003034:	2200      	movs	r2, #0
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	f04f 30ff 	mov.w	r0, #4294967295
 800303c:	f000 f92d 	bl	800329a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003040:	4a06      	ldr	r2, [pc, #24]	; (800305c <HAL_InitTick+0x5c>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	e000      	b.n	800304c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20000000 	.word	0x20000000
 8003058:	20000008 	.word	0x20000008
 800305c:	20000004 	.word	0x20000004

08003060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_IncTick+0x20>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_IncTick+0x24>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4413      	add	r3, r2
 8003070:	4a04      	ldr	r2, [pc, #16]	; (8003084 <HAL_IncTick+0x24>)
 8003072:	6013      	str	r3, [r2, #0]
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000008 	.word	0x20000008
 8003084:	20000544 	.word	0x20000544

08003088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return uwTick;
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <HAL_GetTick+0x14>)
 800308e:	681b      	ldr	r3, [r3, #0]
}
 8003090:	4618      	mov	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000544 	.word	0x20000544

080030a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a8:	f7ff ffee 	bl	8003088 <HAL_GetTick>
 80030ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d005      	beq.n	80030c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_Delay+0x40>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030c6:	bf00      	nop
 80030c8:	f7ff ffde 	bl	8003088 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d8f7      	bhi.n	80030c8 <HAL_Delay+0x28>
  {
  }
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000008 	.word	0x20000008

080030e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b085      	sub	sp, #20
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003100:	4013      	ands	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800310c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003116:	4a04      	ldr	r2, [pc, #16]	; (8003128 <__NVIC_SetPriorityGrouping+0x44>)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	60d3      	str	r3, [r2, #12]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003130:	4b04      	ldr	r3, [pc, #16]	; (8003144 <__NVIC_GetPriorityGrouping+0x18>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 0307 	and.w	r3, r3, #7
}
 800313a:	4618      	mov	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	2b00      	cmp	r3, #0
 8003158:	db0b      	blt.n	8003172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	f003 021f 	and.w	r2, r3, #31
 8003160:	4907      	ldr	r1, [pc, #28]	; (8003180 <__NVIC_EnableIRQ+0x38>)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2001      	movs	r0, #1
 800316a:	fa00 f202 	lsl.w	r2, r0, r2
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	e000e100 	.word	0xe000e100

08003184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003194:	2b00      	cmp	r3, #0
 8003196:	db0a      	blt.n	80031ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	490c      	ldr	r1, [pc, #48]	; (80031d0 <__NVIC_SetPriority+0x4c>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	0112      	lsls	r2, r2, #4
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	440b      	add	r3, r1
 80031a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031ac:	e00a      	b.n	80031c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4908      	ldr	r1, [pc, #32]	; (80031d4 <__NVIC_SetPriority+0x50>)
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	3b04      	subs	r3, #4
 80031bc:	0112      	lsls	r2, r2, #4
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	440b      	add	r3, r1
 80031c2:	761a      	strb	r2, [r3, #24]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	e000e100 	.word	0xe000e100
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d8:	b480      	push	{r7}
 80031da:	b089      	sub	sp, #36	; 0x24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f1c3 0307 	rsb	r3, r3, #7
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	bf28      	it	cs
 80031f6:	2304      	movcs	r3, #4
 80031f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3304      	adds	r3, #4
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d902      	bls.n	8003208 <NVIC_EncodePriority+0x30>
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3b03      	subs	r3, #3
 8003206:	e000      	b.n	800320a <NVIC_EncodePriority+0x32>
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320c:	f04f 32ff 	mov.w	r2, #4294967295
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	fa02 f303 	lsl.w	r3, r2, r3
 8003216:	43da      	mvns	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	401a      	ands	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003220:	f04f 31ff 	mov.w	r1, #4294967295
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	43d9      	mvns	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003230:	4313      	orrs	r3, r2
         );
}
 8003232:	4618      	mov	r0, r3
 8003234:	3724      	adds	r7, #36	; 0x24
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003250:	d301      	bcc.n	8003256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003252:	2301      	movs	r3, #1
 8003254:	e00f      	b.n	8003276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003256:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <SysTick_Config+0x40>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325e:	210f      	movs	r1, #15
 8003260:	f04f 30ff 	mov.w	r0, #4294967295
 8003264:	f7ff ff8e 	bl	8003184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <SysTick_Config+0x40>)
 800326a:	2200      	movs	r2, #0
 800326c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326e:	4b04      	ldr	r3, [pc, #16]	; (8003280 <SysTick_Config+0x40>)
 8003270:	2207      	movs	r2, #7
 8003272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	e000e010 	.word	0xe000e010

08003284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7ff ff29 	bl	80030e4 <__NVIC_SetPriorityGrouping>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800329a:	b580      	push	{r7, lr}
 800329c:	b086      	sub	sp, #24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	4603      	mov	r3, r0
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
 80032a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032ac:	f7ff ff3e 	bl	800312c <__NVIC_GetPriorityGrouping>
 80032b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	68b9      	ldr	r1, [r7, #8]
 80032b6:	6978      	ldr	r0, [r7, #20]
 80032b8:	f7ff ff8e 	bl	80031d8 <NVIC_EncodePriority>
 80032bc:	4602      	mov	r2, r0
 80032be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032c2:	4611      	mov	r1, r2
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff5d 	bl	8003184 <__NVIC_SetPriority>
}
 80032ca:	bf00      	nop
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	4603      	mov	r3, r0
 80032da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff31 	bl	8003148 <__NVIC_EnableIRQ>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7ff ffa2 	bl	8003240 <SysTick_Config>
 80032fc:	4603      	mov	r3, r0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d004      	beq.n	8003324 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e00c      	b.n	800333e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2205      	movs	r2, #5
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0201 	bic.w	r2, r2, #1
 800333a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003358:	b2db      	uxtb	r3, r3
}
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e159      	b.n	8003638 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003384:	2201      	movs	r2, #1
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	429a      	cmp	r2, r3
 800339e:	f040 8148 	bne.w	8003632 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d00b      	beq.n	80033c2 <HAL_GPIO_Init+0x5a>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d007      	beq.n	80033c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033b6:	2b11      	cmp	r3, #17
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b12      	cmp	r3, #18
 80033c0:	d130      	bne.n	8003424 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	2203      	movs	r2, #3
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4013      	ands	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033f8:	2201      	movs	r2, #1
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 0201 	and.w	r2, r3, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d003      	beq.n	8003464 <HAL_GPIO_Init+0xfc>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b12      	cmp	r3, #18
 8003462:	d123      	bne.n	80034ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	08da      	lsrs	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3208      	adds	r2, #8
 800346c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003470:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	220f      	movs	r2, #15
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	08da      	lsrs	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	3208      	adds	r2, #8
 80034a6:	69b9      	ldr	r1, [r7, #24]
 80034a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0203 	and.w	r2, r3, #3
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 80a2 	beq.w	8003632 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	4b56      	ldr	r3, [pc, #344]	; (800364c <HAL_GPIO_Init+0x2e4>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	4a55      	ldr	r2, [pc, #340]	; (800364c <HAL_GPIO_Init+0x2e4>)
 80034f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034fc:	6453      	str	r3, [r2, #68]	; 0x44
 80034fe:	4b53      	ldr	r3, [pc, #332]	; (800364c <HAL_GPIO_Init+0x2e4>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800350a:	4a51      	ldr	r2, [pc, #324]	; (8003650 <HAL_GPIO_Init+0x2e8>)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	3302      	adds	r3, #2
 8003512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0303 	and.w	r3, r3, #3
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	220f      	movs	r2, #15
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a48      	ldr	r2, [pc, #288]	; (8003654 <HAL_GPIO_Init+0x2ec>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d019      	beq.n	800356a <HAL_GPIO_Init+0x202>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a47      	ldr	r2, [pc, #284]	; (8003658 <HAL_GPIO_Init+0x2f0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d013      	beq.n	8003566 <HAL_GPIO_Init+0x1fe>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a46      	ldr	r2, [pc, #280]	; (800365c <HAL_GPIO_Init+0x2f4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00d      	beq.n	8003562 <HAL_GPIO_Init+0x1fa>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a45      	ldr	r2, [pc, #276]	; (8003660 <HAL_GPIO_Init+0x2f8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <HAL_GPIO_Init+0x1f6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a44      	ldr	r2, [pc, #272]	; (8003664 <HAL_GPIO_Init+0x2fc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d101      	bne.n	800355a <HAL_GPIO_Init+0x1f2>
 8003556:	2304      	movs	r3, #4
 8003558:	e008      	b.n	800356c <HAL_GPIO_Init+0x204>
 800355a:	2307      	movs	r3, #7
 800355c:	e006      	b.n	800356c <HAL_GPIO_Init+0x204>
 800355e:	2303      	movs	r3, #3
 8003560:	e004      	b.n	800356c <HAL_GPIO_Init+0x204>
 8003562:	2302      	movs	r3, #2
 8003564:	e002      	b.n	800356c <HAL_GPIO_Init+0x204>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_GPIO_Init+0x204>
 800356a:	2300      	movs	r3, #0
 800356c:	69fa      	ldr	r2, [r7, #28]
 800356e:	f002 0203 	and.w	r2, r2, #3
 8003572:	0092      	lsls	r2, r2, #2
 8003574:	4093      	lsls	r3, r2
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800357c:	4934      	ldr	r1, [pc, #208]	; (8003650 <HAL_GPIO_Init+0x2e8>)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	3302      	adds	r3, #2
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_GPIO_Init+0x300>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	43db      	mvns	r3, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4013      	ands	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ae:	4a2e      	ldr	r2, [pc, #184]	; (8003668 <HAL_GPIO_Init+0x300>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <HAL_GPIO_Init+0x300>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035d8:	4a23      	ldr	r2, [pc, #140]	; (8003668 <HAL_GPIO_Init+0x300>)
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035de:	4b22      	ldr	r3, [pc, #136]	; (8003668 <HAL_GPIO_Init+0x300>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003602:	4a19      	ldr	r2, [pc, #100]	; (8003668 <HAL_GPIO_Init+0x300>)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003608:	4b17      	ldr	r3, [pc, #92]	; (8003668 <HAL_GPIO_Init+0x300>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800362c:	4a0e      	ldr	r2, [pc, #56]	; (8003668 <HAL_GPIO_Init+0x300>)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3301      	adds	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	2b0f      	cmp	r3, #15
 800363c:	f67f aea2 	bls.w	8003384 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003640:	bf00      	nop
 8003642:	3724      	adds	r7, #36	; 0x24
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	40023800 	.word	0x40023800
 8003650:	40013800 	.word	0x40013800
 8003654:	40020000 	.word	0x40020000
 8003658:	40020400 	.word	0x40020400
 800365c:	40020800 	.word	0x40020800
 8003660:	40020c00 	.word	0x40020c00
 8003664:	40021000 	.word	0x40021000
 8003668:	40013c00 	.word	0x40013c00

0800366c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	807b      	strh	r3, [r7, #2]
 8003678:	4613      	mov	r3, r2
 800367a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800367c:	787b      	ldrb	r3, [r7, #1]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003682:	887a      	ldrh	r2, [r7, #2]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003688:	e003      	b.n	8003692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800368a:	887b      	ldrh	r3, [r7, #2]
 800368c:	041a      	lsls	r2, r3, #16
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	619a      	str	r2, [r3, #24]
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036aa:	4b08      	ldr	r3, [pc, #32]	; (80036cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d006      	beq.n	80036c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036b6:	4a05      	ldr	r2, [pc, #20]	; (80036cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	4618      	mov	r0, r3
 80036c0:	f7ff fa08 	bl	8002ad4 <HAL_GPIO_EXTI_Callback>
  }
}
 80036c4:	bf00      	nop
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40013c00 	.word	0x40013c00

080036d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e11f      	b.n	8003922 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff fac8 	bl	8002c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2224      	movs	r2, #36	; 0x24
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003722:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003732:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003734:	f002 feae 	bl	8006494 <HAL_RCC_GetPCLK1Freq>
 8003738:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4a7b      	ldr	r2, [pc, #492]	; (800392c <HAL_I2C_Init+0x25c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d807      	bhi.n	8003754 <HAL_I2C_Init+0x84>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a7a      	ldr	r2, [pc, #488]	; (8003930 <HAL_I2C_Init+0x260>)
 8003748:	4293      	cmp	r3, r2
 800374a:	bf94      	ite	ls
 800374c:	2301      	movls	r3, #1
 800374e:	2300      	movhi	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	e006      	b.n	8003762 <HAL_I2C_Init+0x92>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a77      	ldr	r2, [pc, #476]	; (8003934 <HAL_I2C_Init+0x264>)
 8003758:	4293      	cmp	r3, r2
 800375a:	bf94      	ite	ls
 800375c:	2301      	movls	r3, #1
 800375e:	2300      	movhi	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0db      	b.n	8003922 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a72      	ldr	r2, [pc, #456]	; (8003938 <HAL_I2C_Init+0x268>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	0c9b      	lsrs	r3, r3, #18
 8003774:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a64      	ldr	r2, [pc, #400]	; (800392c <HAL_I2C_Init+0x25c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d802      	bhi.n	80037a4 <HAL_I2C_Init+0xd4>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	3301      	adds	r3, #1
 80037a2:	e009      	b.n	80037b8 <HAL_I2C_Init+0xe8>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	4a63      	ldr	r2, [pc, #396]	; (800393c <HAL_I2C_Init+0x26c>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	099b      	lsrs	r3, r3, #6
 80037b6:	3301      	adds	r3, #1
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	430b      	orrs	r3, r1
 80037be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4956      	ldr	r1, [pc, #344]	; (800392c <HAL_I2C_Init+0x25c>)
 80037d4:	428b      	cmp	r3, r1
 80037d6:	d80d      	bhi.n	80037f4 <HAL_I2C_Init+0x124>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e59      	subs	r1, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037e6:	3301      	adds	r3, #1
 80037e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	bf38      	it	cc
 80037f0:	2304      	movcc	r3, #4
 80037f2:	e04f      	b.n	8003894 <HAL_I2C_Init+0x1c4>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d111      	bne.n	8003820 <HAL_I2C_Init+0x150>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1e58      	subs	r0, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	440b      	add	r3, r1
 800380a:	fbb0 f3f3 	udiv	r3, r0, r3
 800380e:	3301      	adds	r3, #1
 8003810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e012      	b.n	8003846 <HAL_I2C_Init+0x176>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1e58      	subs	r0, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	0099      	lsls	r1, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	fbb0 f3f3 	udiv	r3, r0, r3
 8003836:	3301      	adds	r3, #1
 8003838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383c:	2b00      	cmp	r3, #0
 800383e:	bf0c      	ite	eq
 8003840:	2301      	moveq	r3, #1
 8003842:	2300      	movne	r3, #0
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <HAL_I2C_Init+0x17e>
 800384a:	2301      	movs	r3, #1
 800384c:	e022      	b.n	8003894 <HAL_I2C_Init+0x1c4>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10e      	bne.n	8003874 <HAL_I2C_Init+0x1a4>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1e58      	subs	r0, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6859      	ldr	r1, [r3, #4]
 800385e:	460b      	mov	r3, r1
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	440b      	add	r3, r1
 8003864:	fbb0 f3f3 	udiv	r3, r0, r3
 8003868:	3301      	adds	r3, #1
 800386a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003872:	e00f      	b.n	8003894 <HAL_I2C_Init+0x1c4>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1e58      	subs	r0, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6859      	ldr	r1, [r3, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	0099      	lsls	r1, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	fbb0 f3f3 	udiv	r3, r0, r3
 800388a:	3301      	adds	r3, #1
 800388c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	6809      	ldr	r1, [r1, #0]
 8003898:	4313      	orrs	r3, r2
 800389a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69da      	ldr	r2, [r3, #28]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6911      	ldr	r1, [r2, #16]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68d2      	ldr	r2, [r2, #12]
 80038ce:	4311      	orrs	r1, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695a      	ldr	r2, [r3, #20]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	000186a0 	.word	0x000186a0
 8003930:	001e847f 	.word	0x001e847f
 8003934:	003d08ff 	.word	0x003d08ff
 8003938:	431bde83 	.word	0x431bde83
 800393c:	10624dd3 	.word	0x10624dd3

08003940 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	4608      	mov	r0, r1
 800394a:	4611      	mov	r1, r2
 800394c:	461a      	mov	r2, r3
 800394e:	4603      	mov	r3, r0
 8003950:	817b      	strh	r3, [r7, #10]
 8003952:	460b      	mov	r3, r1
 8003954:	813b      	strh	r3, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800395a:	f7ff fb95 	bl	8003088 <HAL_GetTick>
 800395e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b20      	cmp	r3, #32
 800396a:	f040 80d9 	bne.w	8003b20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	2319      	movs	r3, #25
 8003974:	2201      	movs	r2, #1
 8003976:	496d      	ldr	r1, [pc, #436]	; (8003b2c <HAL_I2C_Mem_Write+0x1ec>)
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f001 ff58 	bl	800582e <I2C_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
 8003986:	e0cc      	b.n	8003b22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_I2C_Mem_Write+0x56>
 8003992:	2302      	movs	r3, #2
 8003994:	e0c5      	b.n	8003b22 <HAL_I2C_Mem_Write+0x1e2>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d007      	beq.n	80039bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2221      	movs	r2, #33	; 0x21
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a3a      	ldr	r2, [r7, #32]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4a4d      	ldr	r2, [pc, #308]	; (8003b30 <HAL_I2C_Mem_Write+0x1f0>)
 80039fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039fe:	88f8      	ldrh	r0, [r7, #6]
 8003a00:	893a      	ldrh	r2, [r7, #8]
 8003a02:	8979      	ldrh	r1, [r7, #10]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	9301      	str	r3, [sp, #4]
 8003a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f001 fd14 	bl	800543c <I2C_RequestMemoryWrite>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d052      	beq.n	8003ac0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e081      	b.n	8003b22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f001 ffd9 	bl	80059da <I2C_WaitOnTXEFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00d      	beq.n	8003a4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d107      	bne.n	8003a46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e06b      	b.n	8003b22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d11b      	bne.n	8003ac0 <HAL_I2C_Mem_Write+0x180>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d017      	beq.n	8003ac0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1aa      	bne.n	8003a1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f001 ffc5 	bl	8005a5c <I2C_WaitOnBTFFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00d      	beq.n	8003af4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	2b04      	cmp	r3, #4
 8003ade:	d107      	bne.n	8003af0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e016      	b.n	8003b22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e000      	b.n	8003b22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b20:	2302      	movs	r3, #2
  }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	00100002 	.word	0x00100002
 8003b30:	ffff0000 	.word	0xffff0000

08003b34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08c      	sub	sp, #48	; 0x30
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	4608      	mov	r0, r1
 8003b3e:	4611      	mov	r1, r2
 8003b40:	461a      	mov	r2, r3
 8003b42:	4603      	mov	r3, r0
 8003b44:	817b      	strh	r3, [r7, #10]
 8003b46:	460b      	mov	r3, r1
 8003b48:	813b      	strh	r3, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b4e:	f7ff fa9b 	bl	8003088 <HAL_GetTick>
 8003b52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	f040 8208 	bne.w	8003f72 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2319      	movs	r3, #25
 8003b68:	2201      	movs	r2, #1
 8003b6a:	497b      	ldr	r1, [pc, #492]	; (8003d58 <HAL_I2C_Mem_Read+0x224>)
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f001 fe5e 	bl	800582e <I2C_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e1fb      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_I2C_Mem_Read+0x56>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e1f4      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d007      	beq.n	8003bb0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2222      	movs	r2, #34	; 0x22
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2240      	movs	r2, #64	; 0x40
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a5b      	ldr	r2, [pc, #364]	; (8003d5c <HAL_I2C_Mem_Read+0x228>)
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bf2:	88f8      	ldrh	r0, [r7, #6]
 8003bf4:	893a      	ldrh	r2, [r7, #8]
 8003bf6:	8979      	ldrh	r1, [r7, #10]
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	4603      	mov	r3, r0
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f001 fcae 	bl	8005564 <I2C_RequestMemoryRead>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e1b0      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d113      	bne.n	8003c42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	623b      	str	r3, [r7, #32]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	623b      	str	r3, [r7, #32]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	623b      	str	r3, [r7, #32]
 8003c2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e184      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d11b      	bne.n	8003c82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	e164      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d11b      	bne.n	8003cc2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003caa:	2300      	movs	r3, #0
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	e144      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cd8:	e138      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	f200 80f1 	bhi.w	8003ec6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d123      	bne.n	8003d34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f001 fef4 	bl	8005ade <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e139      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d32:	e10b      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d14e      	bne.n	8003dda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d42:	2200      	movs	r2, #0
 8003d44:	4906      	ldr	r1, [pc, #24]	; (8003d60 <HAL_I2C_Mem_Read+0x22c>)
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f001 fd71 	bl	800582e <I2C_WaitOnFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d008      	beq.n	8003d64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e10e      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
 8003d56:	bf00      	nop
 8003d58:	00100002 	.word	0x00100002
 8003d5c:	ffff0000 	.word	0xffff0000
 8003d60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	691a      	ldr	r2, [r3, #16]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dd8:	e0b8      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de0:	2200      	movs	r2, #0
 8003de2:	4966      	ldr	r1, [pc, #408]	; (8003f7c <HAL_I2C_Mem_Read+0x448>)
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f001 fd22 	bl	800582e <I2C_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e0bf      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	494f      	ldr	r1, [pc, #316]	; (8003f7c <HAL_I2C_Mem_Read+0x448>)
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f001 fcf4 	bl	800582e <I2C_WaitOnFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e091      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ec4:	e042      	b.n	8003f4c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f001 fe07 	bl	8005ade <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e04c      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	691a      	ldr	r2, [r3, #16]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d118      	bne.n	8003f4c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f47f aec2 	bne.w	8003cda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	e000      	b.n	8003f74 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
  }
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3728      	adds	r7, #40	; 0x28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	00010004 	.word	0x00010004

08003f80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fa0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	2b10      	cmp	r3, #16
 8003fae:	d003      	beq.n	8003fb8 <HAL_I2C_EV_IRQHandler+0x38>
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	f040 80b6 	bne.w	8004124 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10d      	bne.n	8003fee <HAL_I2C_EV_IRQHandler+0x6e>
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003fd8:	d003      	beq.n	8003fe2 <HAL_I2C_EV_IRQHandler+0x62>
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003fe0:	d101      	bne.n	8003fe6 <HAL_I2C_EV_IRQHandler+0x66>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <HAL_I2C_EV_IRQHandler+0x68>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	f000 8127 	beq.w	800423c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00c      	beq.n	8004012 <HAL_I2C_EV_IRQHandler+0x92>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	0a5b      	lsrs	r3, r3, #9
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d006      	beq.n	8004012 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f001 fdef 	bl	8005be8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fc75 	bl	80048fa <I2C_Master_SB>
 8004010:	e087      	b.n	8004122 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	08db      	lsrs	r3, r3, #3
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d009      	beq.n	8004032 <HAL_I2C_EV_IRQHandler+0xb2>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	0a5b      	lsrs	r3, r3, #9
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fceb 	bl	8004a06 <I2C_Master_ADD10>
 8004030:	e077      	b.n	8004122 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	085b      	lsrs	r3, r3, #1
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_I2C_EV_IRQHandler+0xd2>
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	0a5b      	lsrs	r3, r3, #9
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fd05 	bl	8004a5a <I2C_Master_ADDR>
 8004050:	e067      	b.n	8004122 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d030      	beq.n	80040c0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800406c:	f000 80e8 	beq.w	8004240 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	09db      	lsrs	r3, r3, #7
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00f      	beq.n	800409c <HAL_I2C_EV_IRQHandler+0x11c>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	0a9b      	lsrs	r3, r3, #10
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <HAL_I2C_EV_IRQHandler+0x11c>
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	089b      	lsrs	r3, r3, #2
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b00      	cmp	r3, #0
 8004092:	d103      	bne.n	800409c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f941 	bl	800431c <I2C_MasterTransmit_TXE>
 800409a:	e042      	b.n	8004122 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	089b      	lsrs	r3, r3, #2
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80cb 	beq.w	8004240 <HAL_I2C_EV_IRQHandler+0x2c0>
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	0a5b      	lsrs	r3, r3, #9
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80c4 	beq.w	8004240 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f9cb 	bl	8004454 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040be:	e0bf      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040ce:	f000 80b7 	beq.w	8004240 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	099b      	lsrs	r3, r3, #6
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00f      	beq.n	80040fe <HAL_I2C_EV_IRQHandler+0x17e>
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	0a9b      	lsrs	r3, r3, #10
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <HAL_I2C_EV_IRQHandler+0x17e>
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d103      	bne.n	80040fe <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fa93 	bl	8004622 <I2C_MasterReceive_RXNE>
 80040fc:	e011      	b.n	8004122 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	089b      	lsrs	r3, r3, #2
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 809a 	beq.w	8004240 <HAL_I2C_EV_IRQHandler+0x2c0>
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	0a5b      	lsrs	r3, r3, #9
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8093 	beq.w	8004240 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fb03 	bl	8004726 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004120:	e08e      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004122:	e08d      	b.n	8004240 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004128:	2b00      	cmp	r3, #0
 800412a:	d004      	beq.n	8004136 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	61fb      	str	r3, [r7, #28]
 8004134:	e007      	b.n	8004146 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d012      	beq.n	8004178 <HAL_I2C_EV_IRQHandler+0x1f8>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	0a5b      	lsrs	r3, r3, #9
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800416e:	69b9      	ldr	r1, [r7, #24]
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fec1 	bl	8004ef8 <I2C_Slave_ADDR>
 8004176:	e066      	b.n	8004246 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	091b      	lsrs	r3, r3, #4
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d009      	beq.n	8004198 <HAL_I2C_EV_IRQHandler+0x218>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	0a5b      	lsrs	r3, r3, #9
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 fef5 	bl	8004f80 <I2C_Slave_STOPF>
 8004196:	e056      	b.n	8004246 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004198:	7bbb      	ldrb	r3, [r7, #14]
 800419a:	2b21      	cmp	r3, #33	; 0x21
 800419c:	d002      	beq.n	80041a4 <HAL_I2C_EV_IRQHandler+0x224>
 800419e:	7bbb      	ldrb	r3, [r7, #14]
 80041a0:	2b29      	cmp	r3, #41	; 0x29
 80041a2:	d125      	bne.n	80041f0 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	09db      	lsrs	r3, r3, #7
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00f      	beq.n	80041d0 <HAL_I2C_EV_IRQHandler+0x250>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	0a9b      	lsrs	r3, r3, #10
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_I2C_EV_IRQHandler+0x250>
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	089b      	lsrs	r3, r3, #2
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d103      	bne.n	80041d0 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fdd7 	bl	8004d7c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ce:	e039      	b.n	8004244 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	089b      	lsrs	r3, r3, #2
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d033      	beq.n	8004244 <HAL_I2C_EV_IRQHandler+0x2c4>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	0a5b      	lsrs	r3, r3, #9
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d02d      	beq.n	8004244 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fe04 	bl	8004df6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041ee:	e029      	b.n	8004244 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	099b      	lsrs	r3, r3, #6
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00f      	beq.n	800421c <HAL_I2C_EV_IRQHandler+0x29c>
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	0a9b      	lsrs	r3, r3, #10
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <HAL_I2C_EV_IRQHandler+0x29c>
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d103      	bne.n	800421c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fe0f 	bl	8004e38 <I2C_SlaveReceive_RXNE>
 800421a:	e014      	b.n	8004246 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	089b      	lsrs	r3, r3, #2
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	0a5b      	lsrs	r3, r3, #9
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fe3d 	bl	8004eb4 <I2C_SlaveReceive_BTF>
 800423a:	e004      	b.n	8004246 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 800423c:	bf00      	nop
 800423e:	e002      	b.n	8004246 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004240:	bf00      	nop
 8004242:	e000      	b.n	8004246 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004244:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
 80042a8:	4613      	mov	r3, r2
 80042aa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004332:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d150      	bne.n	80043e4 <I2C_MasterTransmit_TXE+0xc8>
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	2b21      	cmp	r3, #33	; 0x21
 8004346:	d14d      	bne.n	80043e4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b08      	cmp	r3, #8
 800434c:	d01d      	beq.n	800438a <I2C_MasterTransmit_TXE+0x6e>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b20      	cmp	r3, #32
 8004352:	d01a      	beq.n	800438a <I2C_MasterTransmit_TXE+0x6e>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800435a:	d016      	beq.n	800438a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800436a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2211      	movs	r2, #17
 8004370:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff ff62 	bl	800424c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004388:	e060      	b.n	800444c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004398:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d107      	bne.n	80043d4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff ff7d 	bl	80042cc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043d2:	e03b      	b.n	800444c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff ff35 	bl	800424c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043e2:	e033      	b.n	800444c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	2b21      	cmp	r3, #33	; 0x21
 80043e8:	d005      	beq.n	80043f6 <I2C_MasterTransmit_TXE+0xda>
 80043ea:	7bbb      	ldrb	r3, [r7, #14]
 80043ec:	2b40      	cmp	r3, #64	; 0x40
 80043ee:	d12d      	bne.n	800444c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b22      	cmp	r3, #34	; 0x22
 80043f4:	d12a      	bne.n	800444c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d108      	bne.n	8004412 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004410:	e01c      	b.n	800444c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d103      	bne.n	8004426 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f898 	bl	8004554 <I2C_MemoryTransmit_TXE_BTF>
}
 8004424:	e012      	b.n	800444c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	781a      	ldrb	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800444a:	e7ff      	b.n	800444c <I2C_MasterTransmit_TXE+0x130>
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b21      	cmp	r3, #33	; 0x21
 800446c:	d165      	bne.n	800453a <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d012      	beq.n	800449e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	781a      	ldrb	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800449c:	e056      	b.n	800454c <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d01d      	beq.n	80044e0 <I2C_MasterTransmit_BTF+0x8c>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d01a      	beq.n	80044e0 <I2C_MasterTransmit_BTF+0x8c>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044b0:	d016      	beq.n	80044e0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044c0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2211      	movs	r2, #17
 80044c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff feb7 	bl	800424c <HAL_I2C_MasterTxCpltCallback>
}
 80044de:	e035      	b.n	800454c <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044ee:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044fe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d107      	bne.n	800452a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fed2 	bl	80042cc <HAL_I2C_MemTxCpltCallback>
}
 8004528:	e010      	b.n	800454c <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fe8a 	bl	800424c <HAL_I2C_MasterTxCpltCallback>
}
 8004538:	e008      	b.n	800454c <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d102      	bne.n	800454c <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f804 	bl	8004554 <I2C_MemoryTransmit_TXE_BTF>
}
 800454c:	bf00      	nop
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004560:	2b00      	cmp	r3, #0
 8004562:	d11d      	bne.n	80045a0 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d10b      	bne.n	8004584 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004570:	b2da      	uxtb	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457c:	1c9a      	adds	r2, r3, #2
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004582:	e048      	b.n	8004616 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004588:	b29b      	uxth	r3, r3
 800458a:	121b      	asrs	r3, r3, #8
 800458c:	b2da      	uxtb	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800459e:	e03a      	b.n	8004616 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10b      	bne.n	80045c0 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045be:	e02a      	b.n	8004616 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d126      	bne.n	8004616 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b22      	cmp	r3, #34	; 0x22
 80045d2:	d108      	bne.n	80045e6 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	e017      	b.n	8004616 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b21      	cmp	r3, #33	; 0x21
 80045f0:	d111      	bne.n	8004616 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	781a      	ldrb	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b22      	cmp	r3, #34	; 0x22
 8004634:	d173      	bne.n	800471e <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b03      	cmp	r3, #3
 8004642:	d920      	bls.n	8004686 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	2b03      	cmp	r3, #3
 8004672:	d154      	bne.n	800471e <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004682:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004684:	e04b      	b.n	800471e <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	2b02      	cmp	r3, #2
 800468c:	d047      	beq.n	800471e <I2C_MasterReceive_RXNE+0xfc>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d002      	beq.n	800469a <I2C_MasterReceive_RXNE+0x78>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d141      	bne.n	800471e <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046a8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b8:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d10a      	bne.n	800470a <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff fdec 	bl	80042e0 <HAL_I2C_MemRxCpltCallback>
}
 8004708:	e009      	b.n	800471e <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2212      	movs	r2, #18
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7ff fda1 	bl	8004260 <HAL_I2C_MasterRxCpltCallback>
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b04      	cmp	r3, #4
 800473c:	d11b      	bne.n	8004776 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004774:	e0bd      	b.n	80048f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	2b03      	cmp	r3, #3
 800477e:	d129      	bne.n	80047d4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b04      	cmp	r3, #4
 8004794:	d00a      	beq.n	80047ac <I2C_MasterReceive_BTF+0x86>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d007      	beq.n	80047ac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	1c5a      	adds	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	3b01      	subs	r3, #1
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047d2:	e08e      	b.n	80048f2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d176      	bne.n	80048cc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d002      	beq.n	80047ea <I2C_MasterReceive_BTF+0xc4>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d108      	bne.n	80047fc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e019      	b.n	8004830 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d002      	beq.n	8004808 <I2C_MasterReceive_BTF+0xe2>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d108      	bne.n	800481a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e00a      	b.n	8004830 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b10      	cmp	r3, #16
 800481e:	d007      	beq.n	8004830 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800488a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	d10a      	bne.n	80048b6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff fd16 	bl	80042e0 <HAL_I2C_MemRxCpltCallback>
}
 80048b4:	e01d      	b.n	80048f2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2212      	movs	r2, #18
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fccb 	bl	8004260 <HAL_I2C_MasterRxCpltCallback>
}
 80048ca:	e012      	b.n	80048f2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b40      	cmp	r3, #64	; 0x40
 800490c:	d117      	bne.n	800493e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	b2db      	uxtb	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004926:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004928:	e067      	b.n	80049fa <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492e:	b2db      	uxtb	r3, r3
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	b2da      	uxtb	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	611a      	str	r2, [r3, #16]
}
 800493c:	e05d      	b.n	80049fa <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004946:	d133      	bne.n	80049b0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b21      	cmp	r3, #33	; 0x21
 8004952:	d109      	bne.n	8004968 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004958:	b2db      	uxtb	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004964:	611a      	str	r2, [r3, #16]
 8004966:	e008      	b.n	800497a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496c:	b2db      	uxtb	r3, r3
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	b2da      	uxtb	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497e:	2b00      	cmp	r3, #0
 8004980:	d004      	beq.n	800498c <I2C_Master_SB+0x92>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004988:	2b00      	cmp	r3, #0
 800498a:	d108      	bne.n	800499e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004990:	2b00      	cmp	r3, #0
 8004992:	d032      	beq.n	80049fa <I2C_Master_SB+0x100>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d02d      	beq.n	80049fa <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049ac:	605a      	str	r2, [r3, #4]
}
 80049ae:	e024      	b.n	80049fa <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10e      	bne.n	80049d6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049bc:	b29b      	uxth	r3, r3
 80049be:	11db      	asrs	r3, r3, #7
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f003 0306 	and.w	r3, r3, #6
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	f063 030f 	orn	r3, r3, #15
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	611a      	str	r2, [r3, #16]
}
 80049d4:	e011      	b.n	80049fa <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d10d      	bne.n	80049fa <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	11db      	asrs	r3, r3, #7
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f003 0306 	and.w	r3, r3, #6
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f063 030e 	orn	r3, r3, #14
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	611a      	str	r2, [r3, #16]
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d103      	bne.n	8004a2a <I2C_Master_ADD10+0x24>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d011      	beq.n	8004a4e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d104      	bne.n	8004a3e <I2C_Master_ADD10+0x38>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a4c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b091      	sub	sp, #68	; 0x44
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b22      	cmp	r3, #34	; 0x22
 8004a82:	f040 8169 	bne.w	8004d58 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <I2C_Master_ADDR+0x54>
 8004a8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a92:	2b40      	cmp	r3, #64	; 0x40
 8004a94:	d10b      	bne.n	8004aae <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a96:	2300      	movs	r3, #0
 8004a98:	633b      	str	r3, [r7, #48]	; 0x30
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	e160      	b.n	8004d70 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d11d      	bne.n	8004af2 <I2C_Master_ADDR+0x98>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004abe:	d118      	bne.n	8004af2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ae4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	651a      	str	r2, [r3, #80]	; 0x50
 8004af0:	e13e      	b.n	8004d70 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d113      	bne.n	8004b24 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afc:	2300      	movs	r3, #0
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	e115      	b.n	8004d50 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	f040 808a 	bne.w	8004c44 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b36:	d137      	bne.n	8004ba8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b46:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b56:	d113      	bne.n	8004b80 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b66:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b68:	2300      	movs	r3, #0
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	e0e7      	b.n	8004d50 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b80:	2300      	movs	r3, #0
 8004b82:	623b      	str	r3, [r7, #32]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	623b      	str	r3, [r7, #32]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	623b      	str	r3, [r7, #32]
 8004b94:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e0d3      	b.n	8004d50 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d02e      	beq.n	8004c0c <I2C_Master_ADDR+0x1b2>
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d02b      	beq.n	8004c0c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb6:	2b12      	cmp	r3, #18
 8004bb8:	d102      	bne.n	8004bc0 <I2C_Master_ADDR+0x166>
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d125      	bne.n	8004c0c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d00e      	beq.n	8004be4 <I2C_Master_ADDR+0x18a>
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d00b      	beq.n	8004be4 <I2C_Master_ADDR+0x18a>
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bce:	2b10      	cmp	r3, #16
 8004bd0:	d008      	beq.n	8004be4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e007      	b.n	8004bf4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bf2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	e0a1      	b.n	8004d50 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	61bb      	str	r3, [r7, #24]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	e085      	b.n	8004d50 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d14d      	bne.n	8004cea <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d016      	beq.n	8004c82 <I2C_Master_ADDR+0x228>
 8004c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d013      	beq.n	8004c82 <I2C_Master_ADDR+0x228>
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	2b10      	cmp	r3, #16
 8004c5e:	d010      	beq.n	8004c82 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	e007      	b.n	8004c92 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c90:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca0:	d117      	bne.n	8004cd2 <I2C_Master_ADDR+0x278>
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ca8:	d00b      	beq.n	8004cc2 <I2C_Master_ADDR+0x268>
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d008      	beq.n	8004cc2 <I2C_Master_ADDR+0x268>
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d005      	beq.n	8004cc2 <I2C_Master_ADDR+0x268>
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb8:	2b10      	cmp	r3, #16
 8004cba:	d002      	beq.n	8004cc2 <I2C_Master_ADDR+0x268>
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	2b20      	cmp	r3, #32
 8004cc0:	d107      	bne.n	8004cd2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cd0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	e032      	b.n	8004d50 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cf8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d08:	d117      	bne.n	8004d3a <I2C_Master_ADDR+0x2e0>
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d10:	d00b      	beq.n	8004d2a <I2C_Master_ADDR+0x2d0>
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d008      	beq.n	8004d2a <I2C_Master_ADDR+0x2d0>
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d005      	beq.n	8004d2a <I2C_Master_ADDR+0x2d0>
 8004d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d20:	2b10      	cmp	r3, #16
 8004d22:	d002      	beq.n	8004d2a <I2C_Master_ADDR+0x2d0>
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d107      	bne.n	8004d3a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d38:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	613b      	str	r3, [r7, #16]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	613b      	str	r3, [r7, #16]
 8004d4e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004d56:	e00b      	b.n	8004d70 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
}
 8004d6e:	e7ff      	b.n	8004d70 <I2C_Master_ADDR+0x316>
 8004d70:	bf00      	nop
 8004d72:	3744      	adds	r7, #68	; 0x44
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02b      	beq.n	8004dee <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	781a      	ldrb	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	3b01      	subs	r3, #1
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d114      	bne.n	8004dee <I2C_SlaveTransmit_TXE+0x72>
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	2b29      	cmp	r3, #41	; 0x29
 8004dc8:	d111      	bne.n	8004dee <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2221      	movs	r2, #33	; 0x21
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2228      	movs	r2, #40	; 0x28
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff fa43 	bl	8004274 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d011      	beq.n	8004e2c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	781a      	ldrb	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e46:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d02c      	beq.n	8004eac <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d114      	bne.n	8004eac <I2C_SlaveReceive_RXNE+0x74>
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	2b2a      	cmp	r3, #42	; 0x2a
 8004e86:	d111      	bne.n	8004eac <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e96:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2222      	movs	r2, #34	; 0x22
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2228      	movs	r2, #40	; 0x28
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff f9ee 	bl	8004288 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d012      	beq.n	8004eec <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	691a      	ldr	r2, [r3, #16]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004f02:	2300      	movs	r3, #0
 8004f04:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f12:	2b28      	cmp	r3, #40	; 0x28
 8004f14:	d127      	bne.n	8004f66 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f24:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	089b      	lsrs	r3, r3, #2
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004f32:	2301      	movs	r3, #1
 8004f34:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	09db      	lsrs	r3, r3, #7
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d103      	bne.n	8004f4a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	81bb      	strh	r3, [r7, #12]
 8004f48:	e002      	b.n	8004f50 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004f58:	89ba      	ldrh	r2, [r7, #12]
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff f99c 	bl	800429c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004f64:	e008      	b.n	8004f78 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f06f 0202 	mvn.w	r2, #2
 8004f6e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004f78:	bf00      	nop
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f9e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fcc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fdc:	d172      	bne.n	80050c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	2b22      	cmp	r3, #34	; 0x22
 8004fe2:	d002      	beq.n	8004fea <I2C_Slave_STOPF+0x6a>
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe8:	d135      	bne.n	8005056 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d005      	beq.n	800500e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f043 0204 	orr.w	r2, r3, #4
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800501c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	4618      	mov	r0, r3
 8005024:	f7fe f991 	bl	800334a <HAL_DMA_GetState>
 8005028:	4603      	mov	r3, r0
 800502a:	2b01      	cmp	r3, #1
 800502c:	d049      	beq.n	80050c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	4a69      	ldr	r2, [pc, #420]	; (80051d8 <I2C_Slave_STOPF+0x258>)
 8005034:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe f963 	bl	8003306 <HAL_DMA_Abort_IT>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d03d      	beq.n	80050c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005050:	4610      	mov	r0, r2
 8005052:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005054:	e035      	b.n	80050c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f043 0204 	orr.w	r2, r3, #4
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005088:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe f95b 	bl	800334a <HAL_DMA_GetState>
 8005094:	4603      	mov	r3, r0
 8005096:	2b01      	cmp	r3, #1
 8005098:	d014      	beq.n	80050c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800509e:	4a4e      	ldr	r2, [pc, #312]	; (80051d8 <I2C_Slave_STOPF+0x258>)
 80050a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fe f92d 	bl	8003306 <HAL_DMA_Abort_IT>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80050bc:	4610      	mov	r0, r2
 80050be:	4798      	blx	r3
 80050c0:	e000      	b.n	80050c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d03e      	beq.n	800514c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d112      	bne.n	8005102 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510c:	2b40      	cmp	r3, #64	; 0x40
 800510e:	d112      	bne.n	8005136 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d005      	beq.n	800514c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	f043 0204 	orr.w	r2, r3, #4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f843 	bl	80051e0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800515a:	e039      	b.n	80051d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b2a      	cmp	r3, #42	; 0x2a
 8005160:	d109      	bne.n	8005176 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2228      	movs	r2, #40	; 0x28
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7ff f889 	bl	8004288 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b28      	cmp	r3, #40	; 0x28
 8005180:	d111      	bne.n	80051a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a15      	ldr	r2, [pc, #84]	; (80051dc <I2C_Slave_STOPF+0x25c>)
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7ff f88a 	bl	80042b8 <HAL_I2C_ListenCpltCallback>
}
 80051a4:	e014      	b.n	80051d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	2b22      	cmp	r3, #34	; 0x22
 80051ac:	d002      	beq.n	80051b4 <I2C_Slave_STOPF+0x234>
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	2b22      	cmp	r3, #34	; 0x22
 80051b2:	d10d      	bne.n	80051d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff f85c 	bl	8004288 <HAL_I2C_SlaveRxCpltCallback>
}
 80051d0:	bf00      	nop
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	08005731 	.word	0x08005731
 80051dc:	ffff0000 	.word	0xffff0000

080051e0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d10a      	bne.n	8005212 <I2C_ITError+0x32>
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	2b22      	cmp	r3, #34	; 0x22
 8005200:	d107      	bne.n	8005212 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005210:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005212:	7bfb      	ldrb	r3, [r7, #15]
 8005214:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005218:	2b28      	cmp	r3, #40	; 0x28
 800521a:	d107      	bne.n	800522c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2228      	movs	r2, #40	; 0x28
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800522a:	e015      	b.n	8005258 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523a:	d006      	beq.n	800524a <I2C_ITError+0x6a>
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	2b60      	cmp	r3, #96	; 0x60
 8005240:	d003      	beq.n	800524a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005266:	d162      	bne.n	800532e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685a      	ldr	r2, [r3, #4]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005276:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d020      	beq.n	80052c8 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528a:	4a6a      	ldr	r2, [pc, #424]	; (8005434 <I2C_ITError+0x254>)
 800528c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005292:	4618      	mov	r0, r3
 8005294:	f7fe f837 	bl	8003306 <HAL_DMA_Abort_IT>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 8089 	beq.w	80053b2 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052c2:	4610      	mov	r0, r2
 80052c4:	4798      	blx	r3
 80052c6:	e074      	b.n	80053b2 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	4a59      	ldr	r2, [pc, #356]	; (8005434 <I2C_ITError+0x254>)
 80052ce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe f816 	bl	8003306 <HAL_DMA_Abort_IT>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d068      	beq.n	80053b2 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b40      	cmp	r3, #64	; 0x40
 80052ec:	d10b      	bne.n	8005306 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0201 	bic.w	r2, r2, #1
 8005314:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005328:	4610      	mov	r0, r2
 800532a:	4798      	blx	r3
 800532c:	e041      	b.n	80053b2 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b60      	cmp	r3, #96	; 0x60
 8005338:	d125      	bne.n	8005386 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b40      	cmp	r3, #64	; 0x40
 8005354:	d10b      	bne.n	800536e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0201 	bic.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fe ffc2 	bl	8004308 <HAL_I2C_AbortCpltCallback>
 8005384:	e015      	b.n	80053b2 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d10b      	bne.n	80053ac <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fe ffa1 	bl	80042f4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10e      	bne.n	80053e0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b04      	cmp	r3, #4
 8005402:	d113      	bne.n	800542c <I2C_ITError+0x24c>
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2b28      	cmp	r3, #40	; 0x28
 8005408:	d110      	bne.n	800542c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a0a      	ldr	r2, [pc, #40]	; (8005438 <I2C_ITError+0x258>)
 800540e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f7fe ff46 	bl	80042b8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	08005731 	.word	0x08005731
 8005438:	ffff0000 	.word	0xffff0000

0800543c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	4608      	mov	r0, r1
 8005446:	4611      	mov	r1, r2
 8005448:	461a      	mov	r2, r3
 800544a:	4603      	mov	r3, r0
 800544c:	817b      	strh	r3, [r7, #10]
 800544e:	460b      	mov	r3, r1
 8005450:	813b      	strh	r3, [r7, #8]
 8005452:	4613      	mov	r3, r2
 8005454:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005464:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	2200      	movs	r2, #0
 800546e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f9db 	bl	800582e <I2C_WaitOnFlagUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00c      	beq.n	8005498 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005492:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e05f      	b.n	8005558 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005498:	897b      	ldrh	r3, [r7, #10]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	6a3a      	ldr	r2, [r7, #32]
 80054ac:	492c      	ldr	r1, [pc, #176]	; (8005560 <I2C_RequestMemoryWrite+0x124>)
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 fa14 	bl	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e04c      	b.n	8005558 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	617b      	str	r3, [r7, #20]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d6:	6a39      	ldr	r1, [r7, #32]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fa7e 	bl	80059da <I2C_WaitOnTXEFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00d      	beq.n	8005500 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d107      	bne.n	80054fc <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e02b      	b.n	8005558 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d105      	bne.n	8005512 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005506:	893b      	ldrh	r3, [r7, #8]
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	611a      	str	r2, [r3, #16]
 8005510:	e021      	b.n	8005556 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005512:	893b      	ldrh	r3, [r7, #8]
 8005514:	0a1b      	lsrs	r3, r3, #8
 8005516:	b29b      	uxth	r3, r3
 8005518:	b2da      	uxtb	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005522:	6a39      	ldr	r1, [r7, #32]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fa58 	bl	80059da <I2C_WaitOnTXEFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005534:	2b04      	cmp	r3, #4
 8005536:	d107      	bne.n	8005548 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005546:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e005      	b.n	8005558 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800554c:	893b      	ldrh	r3, [r7, #8]
 800554e:	b2da      	uxtb	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	00010002 	.word	0x00010002

08005564 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	4608      	mov	r0, r1
 800556e:	4611      	mov	r1, r2
 8005570:	461a      	mov	r2, r3
 8005572:	4603      	mov	r3, r0
 8005574:	817b      	strh	r3, [r7, #10]
 8005576:	460b      	mov	r3, r1
 8005578:	813b      	strh	r3, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800558c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f93f 	bl	800582e <I2C_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e0a9      	b.n	8005724 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055d0:	897b      	ldrh	r3, [r7, #10]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	6a3a      	ldr	r2, [r7, #32]
 80055e4:	4951      	ldr	r1, [pc, #324]	; (800572c <I2C_RequestMemoryRead+0x1c8>)
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 f978 	bl	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e096      	b.n	8005724 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800560c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560e:	6a39      	ldr	r1, [r7, #32]
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f9e2 	bl	80059da <I2C_WaitOnTXEFlagUntilTimeout>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00d      	beq.n	8005638 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005620:	2b04      	cmp	r3, #4
 8005622:	d107      	bne.n	8005634 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005632:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e075      	b.n	8005724 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d105      	bne.n	800564a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800563e:	893b      	ldrh	r3, [r7, #8]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	611a      	str	r2, [r3, #16]
 8005648:	e021      	b.n	800568e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800564a:	893b      	ldrh	r3, [r7, #8]
 800564c:	0a1b      	lsrs	r3, r3, #8
 800564e:	b29b      	uxth	r3, r3
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565a:	6a39      	ldr	r1, [r7, #32]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f9bc 	bl	80059da <I2C_WaitOnTXEFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00d      	beq.n	8005684 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2b04      	cmp	r3, #4
 800566e:	d107      	bne.n	8005680 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e04f      	b.n	8005724 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005684:	893b      	ldrh	r3, [r7, #8]
 8005686:	b2da      	uxtb	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800568e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005690:	6a39      	ldr	r1, [r7, #32]
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f9a1 	bl	80059da <I2C_WaitOnTXEFlagUntilTimeout>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00d      	beq.n	80056ba <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d107      	bne.n	80056b6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e034      	b.n	8005724 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 f8a9 	bl	800582e <I2C_WaitOnFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00c      	beq.n	80056fc <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e013      	b.n	8005724 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056fc:	897b      	ldrh	r3, [r7, #10]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	b2da      	uxtb	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	6a3a      	ldr	r2, [r7, #32]
 8005710:	4906      	ldr	r1, [pc, #24]	; (800572c <I2C_RequestMemoryRead+0x1c8>)
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 f8e2 	bl	80058dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	00010002 	.word	0x00010002

08005730 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005744:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005752:	2200      	movs	r2, #0
 8005754:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	2200      	movs	r2, #0
 8005764:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005774:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005788:	2200      	movs	r2, #0
 800578a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	2200      	movs	r2, #0
 800579a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0201 	bic.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b60      	cmp	r3, #96	; 0x60
 80057b6:	d10e      	bne.n	80057d6 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f7fe fd9a 	bl	8004308 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057d4:	e027      	b.n	8005826 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057d6:	7afb      	ldrb	r3, [r7, #11]
 80057d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057dc:	2b28      	cmp	r3, #40	; 0x28
 80057de:	d117      	bne.n	8005810 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057fe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2228      	movs	r2, #40	; 0x28
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800580e:	e007      	b.n	8005820 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7fe fd67 	bl	80042f4 <HAL_I2C_ErrorCallback>
}
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	4613      	mov	r3, r2
 800583c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800583e:	e025      	b.n	800588c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d021      	beq.n	800588c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005848:	f7fd fc1e 	bl	8003088 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	429a      	cmp	r2, r3
 8005856:	d302      	bcc.n	800585e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d116      	bne.n	800588c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	f043 0220 	orr.w	r2, r3, #32
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e023      	b.n	80058d4 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	0c1b      	lsrs	r3, r3, #16
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b01      	cmp	r3, #1
 8005894:	d10d      	bne.n	80058b2 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	43da      	mvns	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4013      	ands	r3, r2
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf0c      	ite	eq
 80058a8:	2301      	moveq	r3, #1
 80058aa:	2300      	movne	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	e00c      	b.n	80058cc <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	43da      	mvns	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4013      	ands	r3, r2
 80058be:	b29b      	uxth	r3, r3
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	461a      	mov	r2, r3
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d0b6      	beq.n	8005840 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058ea:	e051      	b.n	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058fa:	d123      	bne.n	8005944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005914:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	f043 0204 	orr.w	r2, r3, #4
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e046      	b.n	80059d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d021      	beq.n	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800594c:	f7fd fb9c 	bl	8003088 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	429a      	cmp	r2, r3
 800595a:	d302      	bcc.n	8005962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d116      	bne.n	8005990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	f043 0220 	orr.w	r2, r3, #32
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e020      	b.n	80059d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	0c1b      	lsrs	r3, r3, #16
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	d10c      	bne.n	80059b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	43da      	mvns	r2, r3
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	4013      	ands	r3, r2
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	bf14      	ite	ne
 80059ac:	2301      	movne	r3, #1
 80059ae:	2300      	moveq	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e00b      	b.n	80059cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	43da      	mvns	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4013      	ands	r3, r2
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bf14      	ite	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	2300      	moveq	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d18d      	bne.n	80058ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059e6:	e02d      	b.n	8005a44 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f8ce 	bl	8005b8a <I2C_IsAcknowledgeFailed>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e02d      	b.n	8005a54 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059fe:	d021      	beq.n	8005a44 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a00:	f7fd fb42 	bl	8003088 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d302      	bcc.n	8005a16 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d116      	bne.n	8005a44 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	f043 0220 	orr.w	r2, r3, #32
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e007      	b.n	8005a54 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4e:	2b80      	cmp	r3, #128	; 0x80
 8005a50:	d1ca      	bne.n	80059e8 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a68:	e02d      	b.n	8005ac6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 f88d 	bl	8005b8a <I2C_IsAcknowledgeFailed>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e02d      	b.n	8005ad6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d021      	beq.n	8005ac6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a82:	f7fd fb01 	bl	8003088 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d302      	bcc.n	8005a98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d116      	bne.n	8005ac6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	f043 0220 	orr.w	r2, r3, #32
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e007      	b.n	8005ad6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	d1ca      	bne.n	8005a6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005aea:	e042      	b.n	8005b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b10      	cmp	r3, #16
 8005af8:	d119      	bne.n	8005b2e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f06f 0210 	mvn.w	r2, #16
 8005b02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e029      	b.n	8005b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2e:	f7fd faab 	bl	8003088 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d302      	bcc.n	8005b44 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d116      	bne.n	8005b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	f043 0220 	orr.w	r2, r3, #32
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e007      	b.n	8005b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7c:	2b40      	cmp	r3, #64	; 0x40
 8005b7e:	d1b5      	bne.n	8005aec <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba0:	d11b      	bne.n	8005bda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005baa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	f043 0204 	orr.w	r2, r3, #4
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005bf8:	d103      	bne.n	8005c02 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c00:	e007      	b.n	8005c12 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c0a:	d102      	bne.n	8005c12 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2208      	movs	r2, #8
 8005c10:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e25b      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d075      	beq.n	8005d2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c3e:	4ba3      	ldr	r3, [pc, #652]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 030c 	and.w	r3, r3, #12
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d00c      	beq.n	8005c64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c4a:	4ba0      	ldr	r3, [pc, #640]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d112      	bne.n	8005c7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c56:	4b9d      	ldr	r3, [pc, #628]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c62:	d10b      	bne.n	8005c7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c64:	4b99      	ldr	r3, [pc, #612]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d05b      	beq.n	8005d28 <HAL_RCC_OscConfig+0x108>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d157      	bne.n	8005d28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e236      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c84:	d106      	bne.n	8005c94 <HAL_RCC_OscConfig+0x74>
 8005c86:	4b91      	ldr	r3, [pc, #580]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a90      	ldr	r2, [pc, #576]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	e01d      	b.n	8005cd0 <HAL_RCC_OscConfig+0xb0>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c9c:	d10c      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x98>
 8005c9e:	4b8b      	ldr	r3, [pc, #556]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a8a      	ldr	r2, [pc, #552]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	4b88      	ldr	r3, [pc, #544]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a87      	ldr	r2, [pc, #540]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	e00b      	b.n	8005cd0 <HAL_RCC_OscConfig+0xb0>
 8005cb8:	4b84      	ldr	r3, [pc, #528]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a83      	ldr	r2, [pc, #524]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	4b81      	ldr	r3, [pc, #516]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a80      	ldr	r2, [pc, #512]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d013      	beq.n	8005d00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd8:	f7fd f9d6 	bl	8003088 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce0:	f7fd f9d2 	bl	8003088 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b64      	cmp	r3, #100	; 0x64
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e1fb      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf2:	4b76      	ldr	r3, [pc, #472]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0f0      	beq.n	8005ce0 <HAL_RCC_OscConfig+0xc0>
 8005cfe:	e014      	b.n	8005d2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d00:	f7fd f9c2 	bl	8003088 <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d08:	f7fd f9be 	bl	8003088 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b64      	cmp	r3, #100	; 0x64
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e1e7      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1a:	4b6c      	ldr	r3, [pc, #432]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f0      	bne.n	8005d08 <HAL_RCC_OscConfig+0xe8>
 8005d26:	e000      	b.n	8005d2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d063      	beq.n	8005dfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d36:	4b65      	ldr	r3, [pc, #404]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 030c 	and.w	r3, r3, #12
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00b      	beq.n	8005d5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d42:	4b62      	ldr	r3, [pc, #392]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	d11c      	bne.n	8005d88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d4e:	4b5f      	ldr	r3, [pc, #380]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d116      	bne.n	8005d88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5a:	4b5c      	ldr	r3, [pc, #368]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_RCC_OscConfig+0x152>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d001      	beq.n	8005d72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e1bb      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d72:	4b56      	ldr	r3, [pc, #344]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4952      	ldr	r1, [pc, #328]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d86:	e03a      	b.n	8005dfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d90:	4b4f      	ldr	r3, [pc, #316]	; (8005ed0 <HAL_RCC_OscConfig+0x2b0>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d96:	f7fd f977 	bl	8003088 <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d9e:	f7fd f973 	bl	8003088 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e19c      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db0:	4b46      	ldr	r3, [pc, #280]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dbc:	4b43      	ldr	r3, [pc, #268]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	4940      	ldr	r1, [pc, #256]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	600b      	str	r3, [r1, #0]
 8005dd0:	e015      	b.n	8005dfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dd2:	4b3f      	ldr	r3, [pc, #252]	; (8005ed0 <HAL_RCC_OscConfig+0x2b0>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fd f956 	bl	8003088 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005de0:	f7fd f952 	bl	8003088 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e17b      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df2:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d030      	beq.n	8005e6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d016      	beq.n	8005e40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e12:	4b30      	ldr	r3, [pc, #192]	; (8005ed4 <HAL_RCC_OscConfig+0x2b4>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e18:	f7fd f936 	bl	8003088 <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e20:	f7fd f932 	bl	8003088 <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e15b      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e32:	4b26      	ldr	r3, [pc, #152]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f0      	beq.n	8005e20 <HAL_RCC_OscConfig+0x200>
 8005e3e:	e015      	b.n	8005e6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e40:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <HAL_RCC_OscConfig+0x2b4>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e46:	f7fd f91f 	bl	8003088 <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e4e:	f7fd f91b 	bl	8003088 <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e144      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e60:	4b1a      	ldr	r3, [pc, #104]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f0      	bne.n	8005e4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80a0 	beq.w	8005fba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10f      	bne.n	8005eaa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	4a0e      	ldr	r2, [pc, #56]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e98:	6413      	str	r3, [r2, #64]	; 0x40
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	60bb      	str	r3, [r7, #8]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <HAL_RCC_OscConfig+0x2b8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d121      	bne.n	8005efa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <HAL_RCC_OscConfig+0x2b8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a07      	ldr	r2, [pc, #28]	; (8005ed8 <HAL_RCC_OscConfig+0x2b8>)
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ec2:	f7fd f8e1 	bl	8003088 <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec8:	e011      	b.n	8005eee <HAL_RCC_OscConfig+0x2ce>
 8005eca:	bf00      	nop
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	42470000 	.word	0x42470000
 8005ed4:	42470e80 	.word	0x42470e80
 8005ed8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005edc:	f7fd f8d4 	bl	8003088 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e0fd      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eee:	4b81      	ldr	r3, [pc, #516]	; (80060f4 <HAL_RCC_OscConfig+0x4d4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d106      	bne.n	8005f10 <HAL_RCC_OscConfig+0x2f0>
 8005f02:	4b7d      	ldr	r3, [pc, #500]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	4a7c      	ldr	r2, [pc, #496]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f0e:	e01c      	b.n	8005f4a <HAL_RCC_OscConfig+0x32a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	2b05      	cmp	r3, #5
 8005f16:	d10c      	bne.n	8005f32 <HAL_RCC_OscConfig+0x312>
 8005f18:	4b77      	ldr	r3, [pc, #476]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	4a76      	ldr	r2, [pc, #472]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f1e:	f043 0304 	orr.w	r3, r3, #4
 8005f22:	6713      	str	r3, [r2, #112]	; 0x70
 8005f24:	4b74      	ldr	r3, [pc, #464]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	4a73      	ldr	r2, [pc, #460]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f2a:	f043 0301 	orr.w	r3, r3, #1
 8005f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f30:	e00b      	b.n	8005f4a <HAL_RCC_OscConfig+0x32a>
 8005f32:	4b71      	ldr	r3, [pc, #452]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f36:	4a70      	ldr	r2, [pc, #448]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f3e:	4b6e      	ldr	r3, [pc, #440]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	4a6d      	ldr	r2, [pc, #436]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f44:	f023 0304 	bic.w	r3, r3, #4
 8005f48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d015      	beq.n	8005f7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f52:	f7fd f899 	bl	8003088 <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f58:	e00a      	b.n	8005f70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f5a:	f7fd f895 	bl	8003088 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e0bc      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f70:	4b61      	ldr	r3, [pc, #388]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0ee      	beq.n	8005f5a <HAL_RCC_OscConfig+0x33a>
 8005f7c:	e014      	b.n	8005fa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f7e:	f7fd f883 	bl	8003088 <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f84:	e00a      	b.n	8005f9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f86:	f7fd f87f 	bl	8003088 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e0a6      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f9c:	4b56      	ldr	r3, [pc, #344]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1ee      	bne.n	8005f86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d105      	bne.n	8005fba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fae:	4b52      	ldr	r3, [pc, #328]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	4a51      	ldr	r2, [pc, #324]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 8092 	beq.w	80060e8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fc4:	4b4c      	ldr	r3, [pc, #304]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 030c 	and.w	r3, r3, #12
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d05c      	beq.n	800608a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d141      	bne.n	800605c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd8:	4b48      	ldr	r3, [pc, #288]	; (80060fc <HAL_RCC_OscConfig+0x4dc>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fde:	f7fd f853 	bl	8003088 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe6:	f7fd f84f 	bl	8003088 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e078      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ff8:	4b3f      	ldr	r3, [pc, #252]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f0      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	019b      	lsls	r3, r3, #6
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	3b01      	subs	r3, #1
 800601e:	041b      	lsls	r3, r3, #16
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	061b      	lsls	r3, r3, #24
 8006028:	4933      	ldr	r1, [pc, #204]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 800602a:	4313      	orrs	r3, r2
 800602c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800602e:	4b33      	ldr	r3, [pc, #204]	; (80060fc <HAL_RCC_OscConfig+0x4dc>)
 8006030:	2201      	movs	r2, #1
 8006032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006034:	f7fd f828 	bl	8003088 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800603a:	e008      	b.n	800604e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800603c:	f7fd f824 	bl	8003088 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e04d      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800604e:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f0      	beq.n	800603c <HAL_RCC_OscConfig+0x41c>
 800605a:	e045      	b.n	80060e8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800605c:	4b27      	ldr	r3, [pc, #156]	; (80060fc <HAL_RCC_OscConfig+0x4dc>)
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006062:	f7fd f811 	bl	8003088 <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006068:	e008      	b.n	800607c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800606a:	f7fd f80d 	bl	8003088 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e036      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607c:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1f0      	bne.n	800606a <HAL_RCC_OscConfig+0x44a>
 8006088:	e02e      	b.n	80060e8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e029      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006096:	4b18      	ldr	r3, [pc, #96]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d11c      	bne.n	80060e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d115      	bne.n	80060e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060be:	4013      	ands	r3, r2
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d10d      	bne.n	80060e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d106      	bne.n	80060e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d001      	beq.n	80060e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	40007000 	.word	0x40007000
 80060f8:	40023800 	.word	0x40023800
 80060fc:	42470060 	.word	0x42470060

08006100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e0cc      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006114:	4b68      	ldr	r3, [pc, #416]	; (80062b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d90c      	bls.n	800613c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006122:	4b65      	ldr	r3, [pc, #404]	; (80062b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800612a:	4b63      	ldr	r3, [pc, #396]	; (80062b8 <HAL_RCC_ClockConfig+0x1b8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d001      	beq.n	800613c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e0b8      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d020      	beq.n	800618a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006154:	4b59      	ldr	r3, [pc, #356]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	4a58      	ldr	r2, [pc, #352]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 800615a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800615e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800616c:	4b53      	ldr	r3, [pc, #332]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	4a52      	ldr	r2, [pc, #328]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006178:	4b50      	ldr	r3, [pc, #320]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	494d      	ldr	r1, [pc, #308]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006186:	4313      	orrs	r3, r2
 8006188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d044      	beq.n	8006220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d107      	bne.n	80061ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800619e:	4b47      	ldr	r3, [pc, #284]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d119      	bne.n	80061de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e07f      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d003      	beq.n	80061be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d107      	bne.n	80061ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061be:	4b3f      	ldr	r3, [pc, #252]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e06f      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ce:	4b3b      	ldr	r3, [pc, #236]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e067      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061de:	4b37      	ldr	r3, [pc, #220]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f023 0203 	bic.w	r2, r3, #3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	4934      	ldr	r1, [pc, #208]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061f0:	f7fc ff4a 	bl	8003088 <HAL_GetTick>
 80061f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061f6:	e00a      	b.n	800620e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061f8:	f7fc ff46 	bl	8003088 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	f241 3288 	movw	r2, #5000	; 0x1388
 8006206:	4293      	cmp	r3, r2
 8006208:	d901      	bls.n	800620e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e04f      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800620e:	4b2b      	ldr	r3, [pc, #172]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 020c 	and.w	r2, r3, #12
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	429a      	cmp	r2, r3
 800621e:	d1eb      	bne.n	80061f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006220:	4b25      	ldr	r3, [pc, #148]	; (80062b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d20c      	bcs.n	8006248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622e:	4b22      	ldr	r3, [pc, #136]	; (80062b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006236:	4b20      	ldr	r3, [pc, #128]	; (80062b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d001      	beq.n	8006248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e032      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006254:	4b19      	ldr	r3, [pc, #100]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	4916      	ldr	r1, [pc, #88]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006262:	4313      	orrs	r3, r2
 8006264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d009      	beq.n	8006286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006272:	4b12      	ldr	r3, [pc, #72]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	490e      	ldr	r1, [pc, #56]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	4313      	orrs	r3, r2
 8006284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006286:	f000 f821 	bl	80062cc <HAL_RCC_GetSysClockFreq>
 800628a:	4601      	mov	r1, r0
 800628c:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	091b      	lsrs	r3, r3, #4
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	4a0a      	ldr	r2, [pc, #40]	; (80062c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006298:	5cd3      	ldrb	r3, [r2, r3]
 800629a:	fa21 f303 	lsr.w	r3, r1, r3
 800629e:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 80062a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062a2:	4b09      	ldr	r3, [pc, #36]	; (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fc feaa 	bl	8003000 <HAL_InitTick>

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40023c00 	.word	0x40023c00
 80062bc:	40023800 	.word	0x40023800
 80062c0:	0800af44 	.word	0x0800af44
 80062c4:	20000000 	.word	0x20000000
 80062c8:	20000004 	.word	0x20000004

080062cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	2300      	movs	r3, #0
 80062dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062e2:	4b63      	ldr	r3, [pc, #396]	; (8006470 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d007      	beq.n	80062fe <HAL_RCC_GetSysClockFreq+0x32>
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d008      	beq.n	8006304 <HAL_RCC_GetSysClockFreq+0x38>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f040 80b4 	bne.w	8006460 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062f8:	4b5e      	ldr	r3, [pc, #376]	; (8006474 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80062fa:	60bb      	str	r3, [r7, #8]
       break;
 80062fc:	e0b3      	b.n	8006466 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062fe:	4b5e      	ldr	r3, [pc, #376]	; (8006478 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006300:	60bb      	str	r3, [r7, #8]
      break;
 8006302:	e0b0      	b.n	8006466 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006304:	4b5a      	ldr	r3, [pc, #360]	; (8006470 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800630c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800630e:	4b58      	ldr	r3, [pc, #352]	; (8006470 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d04a      	beq.n	80063b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800631a:	4b55      	ldr	r3, [pc, #340]	; (8006470 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	099b      	lsrs	r3, r3, #6
 8006320:	f04f 0400 	mov.w	r4, #0
 8006324:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	ea03 0501 	and.w	r5, r3, r1
 8006330:	ea04 0602 	and.w	r6, r4, r2
 8006334:	4629      	mov	r1, r5
 8006336:	4632      	mov	r2, r6
 8006338:	f04f 0300 	mov.w	r3, #0
 800633c:	f04f 0400 	mov.w	r4, #0
 8006340:	0154      	lsls	r4, r2, #5
 8006342:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006346:	014b      	lsls	r3, r1, #5
 8006348:	4619      	mov	r1, r3
 800634a:	4622      	mov	r2, r4
 800634c:	1b49      	subs	r1, r1, r5
 800634e:	eb62 0206 	sbc.w	r2, r2, r6
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	f04f 0400 	mov.w	r4, #0
 800635a:	0194      	lsls	r4, r2, #6
 800635c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006360:	018b      	lsls	r3, r1, #6
 8006362:	1a5b      	subs	r3, r3, r1
 8006364:	eb64 0402 	sbc.w	r4, r4, r2
 8006368:	f04f 0100 	mov.w	r1, #0
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	00e2      	lsls	r2, r4, #3
 8006372:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006376:	00d9      	lsls	r1, r3, #3
 8006378:	460b      	mov	r3, r1
 800637a:	4614      	mov	r4, r2
 800637c:	195b      	adds	r3, r3, r5
 800637e:	eb44 0406 	adc.w	r4, r4, r6
 8006382:	f04f 0100 	mov.w	r1, #0
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	0262      	lsls	r2, r4, #9
 800638c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006390:	0259      	lsls	r1, r3, #9
 8006392:	460b      	mov	r3, r1
 8006394:	4614      	mov	r4, r2
 8006396:	4618      	mov	r0, r3
 8006398:	4621      	mov	r1, r4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f04f 0400 	mov.w	r4, #0
 80063a0:	461a      	mov	r2, r3
 80063a2:	4623      	mov	r3, r4
 80063a4:	f7fa fc88 	bl	8000cb8 <__aeabi_uldivmod>
 80063a8:	4603      	mov	r3, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	e049      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063b0:	4b2f      	ldr	r3, [pc, #188]	; (8006470 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	099b      	lsrs	r3, r3, #6
 80063b6:	f04f 0400 	mov.w	r4, #0
 80063ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	ea03 0501 	and.w	r5, r3, r1
 80063c6:	ea04 0602 	and.w	r6, r4, r2
 80063ca:	4629      	mov	r1, r5
 80063cc:	4632      	mov	r2, r6
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	f04f 0400 	mov.w	r4, #0
 80063d6:	0154      	lsls	r4, r2, #5
 80063d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80063dc:	014b      	lsls	r3, r1, #5
 80063de:	4619      	mov	r1, r3
 80063e0:	4622      	mov	r2, r4
 80063e2:	1b49      	subs	r1, r1, r5
 80063e4:	eb62 0206 	sbc.w	r2, r2, r6
 80063e8:	f04f 0300 	mov.w	r3, #0
 80063ec:	f04f 0400 	mov.w	r4, #0
 80063f0:	0194      	lsls	r4, r2, #6
 80063f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80063f6:	018b      	lsls	r3, r1, #6
 80063f8:	1a5b      	subs	r3, r3, r1
 80063fa:	eb64 0402 	sbc.w	r4, r4, r2
 80063fe:	f04f 0100 	mov.w	r1, #0
 8006402:	f04f 0200 	mov.w	r2, #0
 8006406:	00e2      	lsls	r2, r4, #3
 8006408:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800640c:	00d9      	lsls	r1, r3, #3
 800640e:	460b      	mov	r3, r1
 8006410:	4614      	mov	r4, r2
 8006412:	195b      	adds	r3, r3, r5
 8006414:	eb44 0406 	adc.w	r4, r4, r6
 8006418:	f04f 0100 	mov.w	r1, #0
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	02a2      	lsls	r2, r4, #10
 8006422:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006426:	0299      	lsls	r1, r3, #10
 8006428:	460b      	mov	r3, r1
 800642a:	4614      	mov	r4, r2
 800642c:	4618      	mov	r0, r3
 800642e:	4621      	mov	r1, r4
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f04f 0400 	mov.w	r4, #0
 8006436:	461a      	mov	r2, r3
 8006438:	4623      	mov	r3, r4
 800643a:	f7fa fc3d 	bl	8000cb8 <__aeabi_uldivmod>
 800643e:	4603      	mov	r3, r0
 8006440:	460c      	mov	r4, r1
 8006442:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	0c1b      	lsrs	r3, r3, #16
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	3301      	adds	r3, #1
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	60bb      	str	r3, [r7, #8]
      break;
 800645e:	e002      	b.n	8006466 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006460:	4b04      	ldr	r3, [pc, #16]	; (8006474 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006462:	60bb      	str	r3, [r7, #8]
      break;
 8006464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006466:	68bb      	ldr	r3, [r7, #8]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3714      	adds	r7, #20
 800646c:	46bd      	mov	sp, r7
 800646e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006470:	40023800 	.word	0x40023800
 8006474:	00f42400 	.word	0x00f42400
 8006478:	007a1200 	.word	0x007a1200

0800647c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006480:	4b03      	ldr	r3, [pc, #12]	; (8006490 <HAL_RCC_GetHCLKFreq+0x14>)
 8006482:	681b      	ldr	r3, [r3, #0]
}
 8006484:	4618      	mov	r0, r3
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	20000000 	.word	0x20000000

08006494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006498:	f7ff fff0 	bl	800647c <HAL_RCC_GetHCLKFreq>
 800649c:	4601      	mov	r1, r0
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	0a9b      	lsrs	r3, r3, #10
 80064a4:	f003 0307 	and.w	r3, r3, #7
 80064a8:	4a03      	ldr	r2, [pc, #12]	; (80064b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064aa:	5cd3      	ldrb	r3, [r2, r3]
 80064ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40023800 	.word	0x40023800
 80064b8:	0800af54 	.word	0x0800af54

080064bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80064c0:	f7ff ffdc 	bl	800647c <HAL_RCC_GetHCLKFreq>
 80064c4:	4601      	mov	r1, r0
 80064c6:	4b05      	ldr	r3, [pc, #20]	; (80064dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	0b5b      	lsrs	r3, r3, #13
 80064cc:	f003 0307 	and.w	r3, r3, #7
 80064d0:	4a03      	ldr	r2, [pc, #12]	; (80064e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064d2:	5cd3      	ldrb	r3, [r2, r3]
 80064d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064d8:	4618      	mov	r0, r3
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40023800 	.word	0x40023800
 80064e0:	0800af54 	.word	0x0800af54

080064e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e03f      	b.n	8006576 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d106      	bne.n	8006510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7fc fc0e 	bl	8002d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2224      	movs	r2, #36	; 0x24
 8006514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fb97 	bl	8006c5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800653c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	695a      	ldr	r2, [r3, #20]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800654c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800655c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b088      	sub	sp, #32
 8006582:	af02      	add	r7, sp, #8
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	603b      	str	r3, [r7, #0]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b20      	cmp	r3, #32
 800659c:	f040 8083 	bne.w	80066a6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <HAL_UART_Transmit+0x2e>
 80065a6:	88fb      	ldrh	r3, [r7, #6]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e07b      	b.n	80066a8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_UART_Transmit+0x40>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e074      	b.n	80066a8 <HAL_UART_Transmit+0x12a>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2221      	movs	r2, #33	; 0x21
 80065d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80065d4:	f7fc fd58 	bl	8003088 <HAL_GetTick>
 80065d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	88fa      	ldrh	r2, [r7, #6]
 80065de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	88fa      	ldrh	r2, [r7, #6]
 80065e4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80065ee:	e042      	b.n	8006676 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006606:	d122      	bne.n	800664e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2200      	movs	r2, #0
 8006610:	2180      	movs	r1, #128	; 0x80
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f9b6 	bl	8006984 <UART_WaitOnFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e042      	b.n	80066a8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	881b      	ldrh	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006634:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d103      	bne.n	8006646 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3302      	adds	r3, #2
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	e017      	b.n	8006676 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	3301      	adds	r3, #1
 800664a:	60bb      	str	r3, [r7, #8]
 800664c:	e013      	b.n	8006676 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2200      	movs	r2, #0
 8006656:	2180      	movs	r1, #128	; 0x80
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 f993 	bl	8006984 <UART_WaitOnFlagUntilTimeout>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e01f      	b.n	80066a8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	60ba      	str	r2, [r7, #8]
 800666e:	781a      	ldrb	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800667a:	b29b      	uxth	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1b7      	bne.n	80065f0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2200      	movs	r2, #0
 8006688:	2140      	movs	r1, #64	; 0x40
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 f97a 	bl	8006984 <UART_WaitOnFlagUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e006      	b.n	80066a8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e000      	b.n	80066a8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
  }
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	4613      	mov	r3, r2
 80066bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d140      	bne.n	800674c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <HAL_UART_Receive_IT+0x26>
 80066d0:	88fb      	ldrh	r3, [r7, #6]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e039      	b.n	800674e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <HAL_UART_Receive_IT+0x38>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e032      	b.n	800674e <HAL_UART_Receive_IT+0x9e>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	88fa      	ldrh	r2, [r7, #6]
 80066fa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	88fa      	ldrh	r2, [r7, #6]
 8006700:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2222      	movs	r2, #34	; 0x22
 800670c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68da      	ldr	r2, [r3, #12]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006726:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	695a      	ldr	r2, [r3, #20]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0220 	orr.w	r2, r2, #32
 8006746:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	e000      	b.n	800674e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
  }
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
	...

0800675c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800677c:	2300      	movs	r3, #0
 800677e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f003 030f 	and.w	r3, r3, #15
 800678a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10d      	bne.n	80067ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	f003 0320 	and.w	r3, r3, #32
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <HAL_UART_IRQHandler+0x52>
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f9d6 	bl	8006b58 <UART_Receive_IT>
      return;
 80067ac:	e0d1      	b.n	8006952 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80b0 	beq.w	8006916 <HAL_UART_IRQHandler+0x1ba>
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <HAL_UART_IRQHandler+0x70>
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80a5 	beq.w	8006916 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <HAL_UART_IRQHandler+0x90>
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e4:	f043 0201 	orr.w	r2, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <HAL_UART_IRQHandler+0xb0>
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006804:	f043 0202 	orr.w	r2, r3, #2
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <HAL_UART_IRQHandler+0xd0>
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006824:	f043 0204 	orr.w	r2, r3, #4
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00f      	beq.n	8006856 <HAL_UART_IRQHandler+0xfa>
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	f003 0320 	and.w	r3, r3, #32
 800683c:	2b00      	cmp	r3, #0
 800683e:	d104      	bne.n	800684a <HAL_UART_IRQHandler+0xee>
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d005      	beq.n	8006856 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684e:	f043 0208 	orr.w	r2, r3, #8
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685a:	2b00      	cmp	r3, #0
 800685c:	d078      	beq.n	8006950 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	f003 0320 	and.w	r3, r3, #32
 8006864:	2b00      	cmp	r3, #0
 8006866:	d007      	beq.n	8006878 <HAL_UART_IRQHandler+0x11c>
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f970 	bl	8006b58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006882:	2b40      	cmp	r3, #64	; 0x40
 8006884:	bf0c      	ite	eq
 8006886:	2301      	moveq	r3, #1
 8006888:	2300      	movne	r3, #0
 800688a:	b2db      	uxtb	r3, r3
 800688c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006892:	f003 0308 	and.w	r3, r3, #8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d102      	bne.n	80068a0 <HAL_UART_IRQHandler+0x144>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d031      	beq.n	8006904 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f8b9 	bl	8006a18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b0:	2b40      	cmp	r3, #64	; 0x40
 80068b2:	d123      	bne.n	80068fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d013      	beq.n	80068f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d0:	4a21      	ldr	r2, [pc, #132]	; (8006958 <HAL_UART_IRQHandler+0x1fc>)
 80068d2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fc fd14 	bl	8003306 <HAL_DMA_Abort_IT>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d016      	beq.n	8006912 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068ee:	4610      	mov	r0, r2
 80068f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f2:	e00e      	b.n	8006912 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f83b 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fa:	e00a      	b.n	8006912 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f837 	bl	8006970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006902:	e006      	b.n	8006912 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f833 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006910:	e01e      	b.n	8006950 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006912:	bf00      	nop
    return;
 8006914:	e01c      	b.n	8006950 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691c:	2b00      	cmp	r3, #0
 800691e:	d008      	beq.n	8006932 <HAL_UART_IRQHandler+0x1d6>
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f8a6 	bl	8006a7c <UART_Transmit_IT>
    return;
 8006930:	e00f      	b.n	8006952 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <HAL_UART_IRQHandler+0x1f6>
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f8ee 	bl	8006b28 <UART_EndTransmit_IT>
    return;
 800694c:	bf00      	nop
 800694e:	e000      	b.n	8006952 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006950:	bf00      	nop
  }
}
 8006952:	3720      	adds	r7, #32
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	08006a55 	.word	0x08006a55

0800695c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	4613      	mov	r3, r2
 8006992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006994:	e02c      	b.n	80069f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699c:	d028      	beq.n	80069f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d007      	beq.n	80069b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80069a4:	f7fc fb70 	bl	8003088 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d21d      	bcs.n	80069f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695a      	ldr	r2, [r3, #20]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0201 	bic.w	r2, r2, #1
 80069d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e00f      	b.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	4013      	ands	r3, r2
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	bf0c      	ite	eq
 8006a00:	2301      	moveq	r3, #1
 8006a02:	2300      	movne	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	461a      	mov	r2, r3
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d0c3      	beq.n	8006996 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a2e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	695a      	ldr	r2, [r3, #20]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 0201 	bic.w	r2, r2, #1
 8006a3e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff ff7e 	bl	8006970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a74:	bf00      	nop
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b21      	cmp	r3, #33	; 0x21
 8006a8e:	d144      	bne.n	8006b1a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a98:	d11a      	bne.n	8006ad0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006aae:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d105      	bne.n	8006ac4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	1c9a      	adds	r2, r3, #2
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	621a      	str	r2, [r3, #32]
 8006ac2:	e00e      	b.n	8006ae2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	621a      	str	r2, [r3, #32]
 8006ace:	e008      	b.n	8006ae2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	1c59      	adds	r1, r3, #1
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6211      	str	r1, [r2, #32]
 8006ada:	781a      	ldrb	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	4619      	mov	r1, r3
 8006af0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10f      	bne.n	8006b16 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e000      	b.n	8006b1c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006b1a:	2302      	movs	r3, #2
  }
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f7ff ff07 	bl	800695c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b22      	cmp	r3, #34	; 0x22
 8006b6a:	d171      	bne.n	8006c50 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b74:	d123      	bne.n	8006bbe <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10e      	bne.n	8006ba2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9a:	1c9a      	adds	r2, r3, #2
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	629a      	str	r2, [r3, #40]	; 0x28
 8006ba0:	e029      	b.n	8006bf6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28
 8006bbc:	e01b      	b.n	8006bf6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10a      	bne.n	8006bdc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6858      	ldr	r0, [r3, #4]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd0:	1c59      	adds	r1, r3, #1
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	6291      	str	r1, [r2, #40]	; 0x28
 8006bd6:	b2c2      	uxtb	r2, r0
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	e00c      	b.n	8006bf6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be8:	1c58      	adds	r0, r3, #1
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	6288      	str	r0, [r1, #40]	; 0x28
 8006bee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006bf2:	b2d2      	uxtb	r2, r2
 8006bf4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	4619      	mov	r1, r3
 8006c04:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d120      	bne.n	8006c4c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0220 	bic.w	r2, r2, #32
 8006c18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695a      	ldr	r2, [r3, #20]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0201 	bic.w	r2, r2, #1
 8006c38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fb ff34 	bl	8002ab0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	e002      	b.n	8006c52 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e000      	b.n	8006c52 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
  }
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
	...

08006c5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	689a      	ldr	r2, [r3, #8]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006c9e:	f023 030c 	bic.w	r3, r3, #12
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6812      	ldr	r2, [r2, #0]
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	430b      	orrs	r3, r1
 8006caa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cca:	f040 818b 	bne.w	8006fe4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4ac1      	ldr	r2, [pc, #772]	; (8006fd8 <UART_SetConfig+0x37c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d005      	beq.n	8006ce4 <UART_SetConfig+0x88>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4abf      	ldr	r2, [pc, #764]	; (8006fdc <UART_SetConfig+0x380>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	f040 80bd 	bne.w	8006e5e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ce4:	f7ff fbea 	bl	80064bc <HAL_RCC_GetPCLK2Freq>
 8006ce8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	461d      	mov	r5, r3
 8006cee:	f04f 0600 	mov.w	r6, #0
 8006cf2:	46a8      	mov	r8, r5
 8006cf4:	46b1      	mov	r9, r6
 8006cf6:	eb18 0308 	adds.w	r3, r8, r8
 8006cfa:	eb49 0409 	adc.w	r4, r9, r9
 8006cfe:	4698      	mov	r8, r3
 8006d00:	46a1      	mov	r9, r4
 8006d02:	eb18 0805 	adds.w	r8, r8, r5
 8006d06:	eb49 0906 	adc.w	r9, r9, r6
 8006d0a:	f04f 0100 	mov.w	r1, #0
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d16:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d1a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d1e:	4688      	mov	r8, r1
 8006d20:	4691      	mov	r9, r2
 8006d22:	eb18 0005 	adds.w	r0, r8, r5
 8006d26:	eb49 0106 	adc.w	r1, r9, r6
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	461d      	mov	r5, r3
 8006d30:	f04f 0600 	mov.w	r6, #0
 8006d34:	196b      	adds	r3, r5, r5
 8006d36:	eb46 0406 	adc.w	r4, r6, r6
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	f7f9 ffbb 	bl	8000cb8 <__aeabi_uldivmod>
 8006d42:	4603      	mov	r3, r0
 8006d44:	460c      	mov	r4, r1
 8006d46:	461a      	mov	r2, r3
 8006d48:	4ba5      	ldr	r3, [pc, #660]	; (8006fe0 <UART_SetConfig+0x384>)
 8006d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	461d      	mov	r5, r3
 8006d58:	f04f 0600 	mov.w	r6, #0
 8006d5c:	46a9      	mov	r9, r5
 8006d5e:	46b2      	mov	sl, r6
 8006d60:	eb19 0309 	adds.w	r3, r9, r9
 8006d64:	eb4a 040a 	adc.w	r4, sl, sl
 8006d68:	4699      	mov	r9, r3
 8006d6a:	46a2      	mov	sl, r4
 8006d6c:	eb19 0905 	adds.w	r9, r9, r5
 8006d70:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d74:	f04f 0100 	mov.w	r1, #0
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d88:	4689      	mov	r9, r1
 8006d8a:	4692      	mov	sl, r2
 8006d8c:	eb19 0005 	adds.w	r0, r9, r5
 8006d90:	eb4a 0106 	adc.w	r1, sl, r6
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	461d      	mov	r5, r3
 8006d9a:	f04f 0600 	mov.w	r6, #0
 8006d9e:	196b      	adds	r3, r5, r5
 8006da0:	eb46 0406 	adc.w	r4, r6, r6
 8006da4:	461a      	mov	r2, r3
 8006da6:	4623      	mov	r3, r4
 8006da8:	f7f9 ff86 	bl	8000cb8 <__aeabi_uldivmod>
 8006dac:	4603      	mov	r3, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	461a      	mov	r2, r3
 8006db2:	4b8b      	ldr	r3, [pc, #556]	; (8006fe0 <UART_SetConfig+0x384>)
 8006db4:	fba3 1302 	umull	r1, r3, r3, r2
 8006db8:	095b      	lsrs	r3, r3, #5
 8006dba:	2164      	movs	r1, #100	; 0x64
 8006dbc:	fb01 f303 	mul.w	r3, r1, r3
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	3332      	adds	r3, #50	; 0x32
 8006dc6:	4a86      	ldr	r2, [pc, #536]	; (8006fe0 <UART_SetConfig+0x384>)
 8006dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dcc:	095b      	lsrs	r3, r3, #5
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006dd4:	4498      	add	r8, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	461d      	mov	r5, r3
 8006dda:	f04f 0600 	mov.w	r6, #0
 8006dde:	46a9      	mov	r9, r5
 8006de0:	46b2      	mov	sl, r6
 8006de2:	eb19 0309 	adds.w	r3, r9, r9
 8006de6:	eb4a 040a 	adc.w	r4, sl, sl
 8006dea:	4699      	mov	r9, r3
 8006dec:	46a2      	mov	sl, r4
 8006dee:	eb19 0905 	adds.w	r9, r9, r5
 8006df2:	eb4a 0a06 	adc.w	sl, sl, r6
 8006df6:	f04f 0100 	mov.w	r1, #0
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e0a:	4689      	mov	r9, r1
 8006e0c:	4692      	mov	sl, r2
 8006e0e:	eb19 0005 	adds.w	r0, r9, r5
 8006e12:	eb4a 0106 	adc.w	r1, sl, r6
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	461d      	mov	r5, r3
 8006e1c:	f04f 0600 	mov.w	r6, #0
 8006e20:	196b      	adds	r3, r5, r5
 8006e22:	eb46 0406 	adc.w	r4, r6, r6
 8006e26:	461a      	mov	r2, r3
 8006e28:	4623      	mov	r3, r4
 8006e2a:	f7f9 ff45 	bl	8000cb8 <__aeabi_uldivmod>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	460c      	mov	r4, r1
 8006e32:	461a      	mov	r2, r3
 8006e34:	4b6a      	ldr	r3, [pc, #424]	; (8006fe0 <UART_SetConfig+0x384>)
 8006e36:	fba3 1302 	umull	r1, r3, r3, r2
 8006e3a:	095b      	lsrs	r3, r3, #5
 8006e3c:	2164      	movs	r1, #100	; 0x64
 8006e3e:	fb01 f303 	mul.w	r3, r1, r3
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	00db      	lsls	r3, r3, #3
 8006e46:	3332      	adds	r3, #50	; 0x32
 8006e48:	4a65      	ldr	r2, [pc, #404]	; (8006fe0 <UART_SetConfig+0x384>)
 8006e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	f003 0207 	and.w	r2, r3, #7
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4442      	add	r2, r8
 8006e5a:	609a      	str	r2, [r3, #8]
 8006e5c:	e26f      	b.n	800733e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e5e:	f7ff fb19 	bl	8006494 <HAL_RCC_GetPCLK1Freq>
 8006e62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	461d      	mov	r5, r3
 8006e68:	f04f 0600 	mov.w	r6, #0
 8006e6c:	46a8      	mov	r8, r5
 8006e6e:	46b1      	mov	r9, r6
 8006e70:	eb18 0308 	adds.w	r3, r8, r8
 8006e74:	eb49 0409 	adc.w	r4, r9, r9
 8006e78:	4698      	mov	r8, r3
 8006e7a:	46a1      	mov	r9, r4
 8006e7c:	eb18 0805 	adds.w	r8, r8, r5
 8006e80:	eb49 0906 	adc.w	r9, r9, r6
 8006e84:	f04f 0100 	mov.w	r1, #0
 8006e88:	f04f 0200 	mov.w	r2, #0
 8006e8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006e90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006e94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006e98:	4688      	mov	r8, r1
 8006e9a:	4691      	mov	r9, r2
 8006e9c:	eb18 0005 	adds.w	r0, r8, r5
 8006ea0:	eb49 0106 	adc.w	r1, r9, r6
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	461d      	mov	r5, r3
 8006eaa:	f04f 0600 	mov.w	r6, #0
 8006eae:	196b      	adds	r3, r5, r5
 8006eb0:	eb46 0406 	adc.w	r4, r6, r6
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	4623      	mov	r3, r4
 8006eb8:	f7f9 fefe 	bl	8000cb8 <__aeabi_uldivmod>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	460c      	mov	r4, r1
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4b47      	ldr	r3, [pc, #284]	; (8006fe0 <UART_SetConfig+0x384>)
 8006ec4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	461d      	mov	r5, r3
 8006ed2:	f04f 0600 	mov.w	r6, #0
 8006ed6:	46a9      	mov	r9, r5
 8006ed8:	46b2      	mov	sl, r6
 8006eda:	eb19 0309 	adds.w	r3, r9, r9
 8006ede:	eb4a 040a 	adc.w	r4, sl, sl
 8006ee2:	4699      	mov	r9, r3
 8006ee4:	46a2      	mov	sl, r4
 8006ee6:	eb19 0905 	adds.w	r9, r9, r5
 8006eea:	eb4a 0a06 	adc.w	sl, sl, r6
 8006eee:	f04f 0100 	mov.w	r1, #0
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006efa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006efe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f02:	4689      	mov	r9, r1
 8006f04:	4692      	mov	sl, r2
 8006f06:	eb19 0005 	adds.w	r0, r9, r5
 8006f0a:	eb4a 0106 	adc.w	r1, sl, r6
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	461d      	mov	r5, r3
 8006f14:	f04f 0600 	mov.w	r6, #0
 8006f18:	196b      	adds	r3, r5, r5
 8006f1a:	eb46 0406 	adc.w	r4, r6, r6
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4623      	mov	r3, r4
 8006f22:	f7f9 fec9 	bl	8000cb8 <__aeabi_uldivmod>
 8006f26:	4603      	mov	r3, r0
 8006f28:	460c      	mov	r4, r1
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	4b2c      	ldr	r3, [pc, #176]	; (8006fe0 <UART_SetConfig+0x384>)
 8006f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8006f32:	095b      	lsrs	r3, r3, #5
 8006f34:	2164      	movs	r1, #100	; 0x64
 8006f36:	fb01 f303 	mul.w	r3, r1, r3
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	00db      	lsls	r3, r3, #3
 8006f3e:	3332      	adds	r3, #50	; 0x32
 8006f40:	4a27      	ldr	r2, [pc, #156]	; (8006fe0 <UART_SetConfig+0x384>)
 8006f42:	fba2 2303 	umull	r2, r3, r2, r3
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f4e:	4498      	add	r8, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	461d      	mov	r5, r3
 8006f54:	f04f 0600 	mov.w	r6, #0
 8006f58:	46a9      	mov	r9, r5
 8006f5a:	46b2      	mov	sl, r6
 8006f5c:	eb19 0309 	adds.w	r3, r9, r9
 8006f60:	eb4a 040a 	adc.w	r4, sl, sl
 8006f64:	4699      	mov	r9, r3
 8006f66:	46a2      	mov	sl, r4
 8006f68:	eb19 0905 	adds.w	r9, r9, r5
 8006f6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f70:	f04f 0100 	mov.w	r1, #0
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f84:	4689      	mov	r9, r1
 8006f86:	4692      	mov	sl, r2
 8006f88:	eb19 0005 	adds.w	r0, r9, r5
 8006f8c:	eb4a 0106 	adc.w	r1, sl, r6
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	461d      	mov	r5, r3
 8006f96:	f04f 0600 	mov.w	r6, #0
 8006f9a:	196b      	adds	r3, r5, r5
 8006f9c:	eb46 0406 	adc.w	r4, r6, r6
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4623      	mov	r3, r4
 8006fa4:	f7f9 fe88 	bl	8000cb8 <__aeabi_uldivmod>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	460c      	mov	r4, r1
 8006fac:	461a      	mov	r2, r3
 8006fae:	4b0c      	ldr	r3, [pc, #48]	; (8006fe0 <UART_SetConfig+0x384>)
 8006fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	2164      	movs	r1, #100	; 0x64
 8006fb8:	fb01 f303 	mul.w	r3, r1, r3
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	3332      	adds	r3, #50	; 0x32
 8006fc2:	4a07      	ldr	r2, [pc, #28]	; (8006fe0 <UART_SetConfig+0x384>)
 8006fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	f003 0207 	and.w	r2, r3, #7
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4442      	add	r2, r8
 8006fd4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006fd6:	e1b2      	b.n	800733e <UART_SetConfig+0x6e2>
 8006fd8:	40011000 	.word	0x40011000
 8006fdc:	40011400 	.word	0x40011400
 8006fe0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4ad7      	ldr	r2, [pc, #860]	; (8007348 <UART_SetConfig+0x6ec>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d005      	beq.n	8006ffa <UART_SetConfig+0x39e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4ad6      	ldr	r2, [pc, #856]	; (800734c <UART_SetConfig+0x6f0>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	f040 80d1 	bne.w	800719c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ffa:	f7ff fa5f 	bl	80064bc <HAL_RCC_GetPCLK2Freq>
 8006ffe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	469a      	mov	sl, r3
 8007004:	f04f 0b00 	mov.w	fp, #0
 8007008:	46d0      	mov	r8, sl
 800700a:	46d9      	mov	r9, fp
 800700c:	eb18 0308 	adds.w	r3, r8, r8
 8007010:	eb49 0409 	adc.w	r4, r9, r9
 8007014:	4698      	mov	r8, r3
 8007016:	46a1      	mov	r9, r4
 8007018:	eb18 080a 	adds.w	r8, r8, sl
 800701c:	eb49 090b 	adc.w	r9, r9, fp
 8007020:	f04f 0100 	mov.w	r1, #0
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800702c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007030:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007034:	4688      	mov	r8, r1
 8007036:	4691      	mov	r9, r2
 8007038:	eb1a 0508 	adds.w	r5, sl, r8
 800703c:	eb4b 0609 	adc.w	r6, fp, r9
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	4619      	mov	r1, r3
 8007046:	f04f 0200 	mov.w	r2, #0
 800704a:	f04f 0300 	mov.w	r3, #0
 800704e:	f04f 0400 	mov.w	r4, #0
 8007052:	0094      	lsls	r4, r2, #2
 8007054:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007058:	008b      	lsls	r3, r1, #2
 800705a:	461a      	mov	r2, r3
 800705c:	4623      	mov	r3, r4
 800705e:	4628      	mov	r0, r5
 8007060:	4631      	mov	r1, r6
 8007062:	f7f9 fe29 	bl	8000cb8 <__aeabi_uldivmod>
 8007066:	4603      	mov	r3, r0
 8007068:	460c      	mov	r4, r1
 800706a:	461a      	mov	r2, r3
 800706c:	4bb8      	ldr	r3, [pc, #736]	; (8007350 <UART_SetConfig+0x6f4>)
 800706e:	fba3 2302 	umull	r2, r3, r3, r2
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	469b      	mov	fp, r3
 800707c:	f04f 0c00 	mov.w	ip, #0
 8007080:	46d9      	mov	r9, fp
 8007082:	46e2      	mov	sl, ip
 8007084:	eb19 0309 	adds.w	r3, r9, r9
 8007088:	eb4a 040a 	adc.w	r4, sl, sl
 800708c:	4699      	mov	r9, r3
 800708e:	46a2      	mov	sl, r4
 8007090:	eb19 090b 	adds.w	r9, r9, fp
 8007094:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007098:	f04f 0100 	mov.w	r1, #0
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070ac:	4689      	mov	r9, r1
 80070ae:	4692      	mov	sl, r2
 80070b0:	eb1b 0509 	adds.w	r5, fp, r9
 80070b4:	eb4c 060a 	adc.w	r6, ip, sl
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	4619      	mov	r1, r3
 80070be:	f04f 0200 	mov.w	r2, #0
 80070c2:	f04f 0300 	mov.w	r3, #0
 80070c6:	f04f 0400 	mov.w	r4, #0
 80070ca:	0094      	lsls	r4, r2, #2
 80070cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070d0:	008b      	lsls	r3, r1, #2
 80070d2:	461a      	mov	r2, r3
 80070d4:	4623      	mov	r3, r4
 80070d6:	4628      	mov	r0, r5
 80070d8:	4631      	mov	r1, r6
 80070da:	f7f9 fded 	bl	8000cb8 <__aeabi_uldivmod>
 80070de:	4603      	mov	r3, r0
 80070e0:	460c      	mov	r4, r1
 80070e2:	461a      	mov	r2, r3
 80070e4:	4b9a      	ldr	r3, [pc, #616]	; (8007350 <UART_SetConfig+0x6f4>)
 80070e6:	fba3 1302 	umull	r1, r3, r3, r2
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	2164      	movs	r1, #100	; 0x64
 80070ee:	fb01 f303 	mul.w	r3, r1, r3
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	011b      	lsls	r3, r3, #4
 80070f6:	3332      	adds	r3, #50	; 0x32
 80070f8:	4a95      	ldr	r2, [pc, #596]	; (8007350 <UART_SetConfig+0x6f4>)
 80070fa:	fba2 2303 	umull	r2, r3, r2, r3
 80070fe:	095b      	lsrs	r3, r3, #5
 8007100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007104:	4498      	add	r8, r3
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	469b      	mov	fp, r3
 800710a:	f04f 0c00 	mov.w	ip, #0
 800710e:	46d9      	mov	r9, fp
 8007110:	46e2      	mov	sl, ip
 8007112:	eb19 0309 	adds.w	r3, r9, r9
 8007116:	eb4a 040a 	adc.w	r4, sl, sl
 800711a:	4699      	mov	r9, r3
 800711c:	46a2      	mov	sl, r4
 800711e:	eb19 090b 	adds.w	r9, r9, fp
 8007122:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007126:	f04f 0100 	mov.w	r1, #0
 800712a:	f04f 0200 	mov.w	r2, #0
 800712e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007132:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007136:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800713a:	4689      	mov	r9, r1
 800713c:	4692      	mov	sl, r2
 800713e:	eb1b 0509 	adds.w	r5, fp, r9
 8007142:	eb4c 060a 	adc.w	r6, ip, sl
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	4619      	mov	r1, r3
 800714c:	f04f 0200 	mov.w	r2, #0
 8007150:	f04f 0300 	mov.w	r3, #0
 8007154:	f04f 0400 	mov.w	r4, #0
 8007158:	0094      	lsls	r4, r2, #2
 800715a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800715e:	008b      	lsls	r3, r1, #2
 8007160:	461a      	mov	r2, r3
 8007162:	4623      	mov	r3, r4
 8007164:	4628      	mov	r0, r5
 8007166:	4631      	mov	r1, r6
 8007168:	f7f9 fda6 	bl	8000cb8 <__aeabi_uldivmod>
 800716c:	4603      	mov	r3, r0
 800716e:	460c      	mov	r4, r1
 8007170:	461a      	mov	r2, r3
 8007172:	4b77      	ldr	r3, [pc, #476]	; (8007350 <UART_SetConfig+0x6f4>)
 8007174:	fba3 1302 	umull	r1, r3, r3, r2
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	2164      	movs	r1, #100	; 0x64
 800717c:	fb01 f303 	mul.w	r3, r1, r3
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	3332      	adds	r3, #50	; 0x32
 8007186:	4a72      	ldr	r2, [pc, #456]	; (8007350 <UART_SetConfig+0x6f4>)
 8007188:	fba2 2303 	umull	r2, r3, r2, r3
 800718c:	095b      	lsrs	r3, r3, #5
 800718e:	f003 020f 	and.w	r2, r3, #15
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4442      	add	r2, r8
 8007198:	609a      	str	r2, [r3, #8]
 800719a:	e0d0      	b.n	800733e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800719c:	f7ff f97a 	bl	8006494 <HAL_RCC_GetPCLK1Freq>
 80071a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	469a      	mov	sl, r3
 80071a6:	f04f 0b00 	mov.w	fp, #0
 80071aa:	46d0      	mov	r8, sl
 80071ac:	46d9      	mov	r9, fp
 80071ae:	eb18 0308 	adds.w	r3, r8, r8
 80071b2:	eb49 0409 	adc.w	r4, r9, r9
 80071b6:	4698      	mov	r8, r3
 80071b8:	46a1      	mov	r9, r4
 80071ba:	eb18 080a 	adds.w	r8, r8, sl
 80071be:	eb49 090b 	adc.w	r9, r9, fp
 80071c2:	f04f 0100 	mov.w	r1, #0
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071d6:	4688      	mov	r8, r1
 80071d8:	4691      	mov	r9, r2
 80071da:	eb1a 0508 	adds.w	r5, sl, r8
 80071de:	eb4b 0609 	adc.w	r6, fp, r9
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	4619      	mov	r1, r3
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	f04f 0400 	mov.w	r4, #0
 80071f4:	0094      	lsls	r4, r2, #2
 80071f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071fa:	008b      	lsls	r3, r1, #2
 80071fc:	461a      	mov	r2, r3
 80071fe:	4623      	mov	r3, r4
 8007200:	4628      	mov	r0, r5
 8007202:	4631      	mov	r1, r6
 8007204:	f7f9 fd58 	bl	8000cb8 <__aeabi_uldivmod>
 8007208:	4603      	mov	r3, r0
 800720a:	460c      	mov	r4, r1
 800720c:	461a      	mov	r2, r3
 800720e:	4b50      	ldr	r3, [pc, #320]	; (8007350 <UART_SetConfig+0x6f4>)
 8007210:	fba3 2302 	umull	r2, r3, r3, r2
 8007214:	095b      	lsrs	r3, r3, #5
 8007216:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	469b      	mov	fp, r3
 800721e:	f04f 0c00 	mov.w	ip, #0
 8007222:	46d9      	mov	r9, fp
 8007224:	46e2      	mov	sl, ip
 8007226:	eb19 0309 	adds.w	r3, r9, r9
 800722a:	eb4a 040a 	adc.w	r4, sl, sl
 800722e:	4699      	mov	r9, r3
 8007230:	46a2      	mov	sl, r4
 8007232:	eb19 090b 	adds.w	r9, r9, fp
 8007236:	eb4a 0a0c 	adc.w	sl, sl, ip
 800723a:	f04f 0100 	mov.w	r1, #0
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007246:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800724a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800724e:	4689      	mov	r9, r1
 8007250:	4692      	mov	sl, r2
 8007252:	eb1b 0509 	adds.w	r5, fp, r9
 8007256:	eb4c 060a 	adc.w	r6, ip, sl
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	4619      	mov	r1, r3
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	f04f 0400 	mov.w	r4, #0
 800726c:	0094      	lsls	r4, r2, #2
 800726e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007272:	008b      	lsls	r3, r1, #2
 8007274:	461a      	mov	r2, r3
 8007276:	4623      	mov	r3, r4
 8007278:	4628      	mov	r0, r5
 800727a:	4631      	mov	r1, r6
 800727c:	f7f9 fd1c 	bl	8000cb8 <__aeabi_uldivmod>
 8007280:	4603      	mov	r3, r0
 8007282:	460c      	mov	r4, r1
 8007284:	461a      	mov	r2, r3
 8007286:	4b32      	ldr	r3, [pc, #200]	; (8007350 <UART_SetConfig+0x6f4>)
 8007288:	fba3 1302 	umull	r1, r3, r3, r2
 800728c:	095b      	lsrs	r3, r3, #5
 800728e:	2164      	movs	r1, #100	; 0x64
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	3332      	adds	r3, #50	; 0x32
 800729a:	4a2d      	ldr	r2, [pc, #180]	; (8007350 <UART_SetConfig+0x6f4>)
 800729c:	fba2 2303 	umull	r2, r3, r2, r3
 80072a0:	095b      	lsrs	r3, r3, #5
 80072a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072a6:	4498      	add	r8, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	469b      	mov	fp, r3
 80072ac:	f04f 0c00 	mov.w	ip, #0
 80072b0:	46d9      	mov	r9, fp
 80072b2:	46e2      	mov	sl, ip
 80072b4:	eb19 0309 	adds.w	r3, r9, r9
 80072b8:	eb4a 040a 	adc.w	r4, sl, sl
 80072bc:	4699      	mov	r9, r3
 80072be:	46a2      	mov	sl, r4
 80072c0:	eb19 090b 	adds.w	r9, r9, fp
 80072c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80072c8:	f04f 0100 	mov.w	r1, #0
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072dc:	4689      	mov	r9, r1
 80072de:	4692      	mov	sl, r2
 80072e0:	eb1b 0509 	adds.w	r5, fp, r9
 80072e4:	eb4c 060a 	adc.w	r6, ip, sl
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	4619      	mov	r1, r3
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	f04f 0300 	mov.w	r3, #0
 80072f6:	f04f 0400 	mov.w	r4, #0
 80072fa:	0094      	lsls	r4, r2, #2
 80072fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007300:	008b      	lsls	r3, r1, #2
 8007302:	461a      	mov	r2, r3
 8007304:	4623      	mov	r3, r4
 8007306:	4628      	mov	r0, r5
 8007308:	4631      	mov	r1, r6
 800730a:	f7f9 fcd5 	bl	8000cb8 <__aeabi_uldivmod>
 800730e:	4603      	mov	r3, r0
 8007310:	460c      	mov	r4, r1
 8007312:	461a      	mov	r2, r3
 8007314:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <UART_SetConfig+0x6f4>)
 8007316:	fba3 1302 	umull	r1, r3, r3, r2
 800731a:	095b      	lsrs	r3, r3, #5
 800731c:	2164      	movs	r1, #100	; 0x64
 800731e:	fb01 f303 	mul.w	r3, r1, r3
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	3332      	adds	r3, #50	; 0x32
 8007328:	4a09      	ldr	r2, [pc, #36]	; (8007350 <UART_SetConfig+0x6f4>)
 800732a:	fba2 2303 	umull	r2, r3, r2, r3
 800732e:	095b      	lsrs	r3, r3, #5
 8007330:	f003 020f 	and.w	r2, r3, #15
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4442      	add	r2, r8
 800733a:	609a      	str	r2, [r3, #8]
}
 800733c:	e7ff      	b.n	800733e <UART_SetConfig+0x6e2>
 800733e:	bf00      	nop
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007348:	40011000 	.word	0x40011000
 800734c:	40011400 	.word	0x40011400
 8007350:	51eb851f 	.word	0x51eb851f

08007354 <atof>:
 8007354:	2100      	movs	r1, #0
 8007356:	f001 bcd7 	b.w	8008d08 <strtod>

0800735a <atoi>:
 800735a:	220a      	movs	r2, #10
 800735c:	2100      	movs	r1, #0
 800735e:	f001 bd75 	b.w	8008e4c <strtol>
	...

08007364 <__errno>:
 8007364:	4b01      	ldr	r3, [pc, #4]	; (800736c <__errno+0x8>)
 8007366:	6818      	ldr	r0, [r3, #0]
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	2000000c 	.word	0x2000000c

08007370 <__libc_init_array>:
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	4e0d      	ldr	r6, [pc, #52]	; (80073a8 <__libc_init_array+0x38>)
 8007374:	4c0d      	ldr	r4, [pc, #52]	; (80073ac <__libc_init_array+0x3c>)
 8007376:	1ba4      	subs	r4, r4, r6
 8007378:	10a4      	asrs	r4, r4, #2
 800737a:	2500      	movs	r5, #0
 800737c:	42a5      	cmp	r5, r4
 800737e:	d109      	bne.n	8007394 <__libc_init_array+0x24>
 8007380:	4e0b      	ldr	r6, [pc, #44]	; (80073b0 <__libc_init_array+0x40>)
 8007382:	4c0c      	ldr	r4, [pc, #48]	; (80073b4 <__libc_init_array+0x44>)
 8007384:	f003 fdba 	bl	800aefc <_init>
 8007388:	1ba4      	subs	r4, r4, r6
 800738a:	10a4      	asrs	r4, r4, #2
 800738c:	2500      	movs	r5, #0
 800738e:	42a5      	cmp	r5, r4
 8007390:	d105      	bne.n	800739e <__libc_init_array+0x2e>
 8007392:	bd70      	pop	{r4, r5, r6, pc}
 8007394:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007398:	4798      	blx	r3
 800739a:	3501      	adds	r5, #1
 800739c:	e7ee      	b.n	800737c <__libc_init_array+0xc>
 800739e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80073a2:	4798      	blx	r3
 80073a4:	3501      	adds	r5, #1
 80073a6:	e7f2      	b.n	800738e <__libc_init_array+0x1e>
 80073a8:	0800b218 	.word	0x0800b218
 80073ac:	0800b218 	.word	0x0800b218
 80073b0:	0800b218 	.word	0x0800b218
 80073b4:	0800b21c 	.word	0x0800b21c

080073b8 <memset>:
 80073b8:	4402      	add	r2, r0
 80073ba:	4603      	mov	r3, r0
 80073bc:	4293      	cmp	r3, r2
 80073be:	d100      	bne.n	80073c2 <memset+0xa>
 80073c0:	4770      	bx	lr
 80073c2:	f803 1b01 	strb.w	r1, [r3], #1
 80073c6:	e7f9      	b.n	80073bc <memset+0x4>

080073c8 <__cvt>:
 80073c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073cc:	ec55 4b10 	vmov	r4, r5, d0
 80073d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80073d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073d6:	2d00      	cmp	r5, #0
 80073d8:	460e      	mov	r6, r1
 80073da:	4691      	mov	r9, r2
 80073dc:	4619      	mov	r1, r3
 80073de:	bfb8      	it	lt
 80073e0:	4622      	movlt	r2, r4
 80073e2:	462b      	mov	r3, r5
 80073e4:	f027 0720 	bic.w	r7, r7, #32
 80073e8:	bfbb      	ittet	lt
 80073ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073ee:	461d      	movlt	r5, r3
 80073f0:	2300      	movge	r3, #0
 80073f2:	232d      	movlt	r3, #45	; 0x2d
 80073f4:	bfb8      	it	lt
 80073f6:	4614      	movlt	r4, r2
 80073f8:	2f46      	cmp	r7, #70	; 0x46
 80073fa:	700b      	strb	r3, [r1, #0]
 80073fc:	d004      	beq.n	8007408 <__cvt+0x40>
 80073fe:	2f45      	cmp	r7, #69	; 0x45
 8007400:	d100      	bne.n	8007404 <__cvt+0x3c>
 8007402:	3601      	adds	r6, #1
 8007404:	2102      	movs	r1, #2
 8007406:	e000      	b.n	800740a <__cvt+0x42>
 8007408:	2103      	movs	r1, #3
 800740a:	ab03      	add	r3, sp, #12
 800740c:	9301      	str	r3, [sp, #4]
 800740e:	ab02      	add	r3, sp, #8
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	4632      	mov	r2, r6
 8007414:	4653      	mov	r3, sl
 8007416:	ec45 4b10 	vmov	d0, r4, r5
 800741a:	f001 fdd9 	bl	8008fd0 <_dtoa_r>
 800741e:	2f47      	cmp	r7, #71	; 0x47
 8007420:	4680      	mov	r8, r0
 8007422:	d102      	bne.n	800742a <__cvt+0x62>
 8007424:	f019 0f01 	tst.w	r9, #1
 8007428:	d026      	beq.n	8007478 <__cvt+0xb0>
 800742a:	2f46      	cmp	r7, #70	; 0x46
 800742c:	eb08 0906 	add.w	r9, r8, r6
 8007430:	d111      	bne.n	8007456 <__cvt+0x8e>
 8007432:	f898 3000 	ldrb.w	r3, [r8]
 8007436:	2b30      	cmp	r3, #48	; 0x30
 8007438:	d10a      	bne.n	8007450 <__cvt+0x88>
 800743a:	2200      	movs	r2, #0
 800743c:	2300      	movs	r3, #0
 800743e:	4620      	mov	r0, r4
 8007440:	4629      	mov	r1, r5
 8007442:	f7f9 fb59 	bl	8000af8 <__aeabi_dcmpeq>
 8007446:	b918      	cbnz	r0, 8007450 <__cvt+0x88>
 8007448:	f1c6 0601 	rsb	r6, r6, #1
 800744c:	f8ca 6000 	str.w	r6, [sl]
 8007450:	f8da 3000 	ldr.w	r3, [sl]
 8007454:	4499      	add	r9, r3
 8007456:	2200      	movs	r2, #0
 8007458:	2300      	movs	r3, #0
 800745a:	4620      	mov	r0, r4
 800745c:	4629      	mov	r1, r5
 800745e:	f7f9 fb4b 	bl	8000af8 <__aeabi_dcmpeq>
 8007462:	b938      	cbnz	r0, 8007474 <__cvt+0xac>
 8007464:	2230      	movs	r2, #48	; 0x30
 8007466:	9b03      	ldr	r3, [sp, #12]
 8007468:	454b      	cmp	r3, r9
 800746a:	d205      	bcs.n	8007478 <__cvt+0xb0>
 800746c:	1c59      	adds	r1, r3, #1
 800746e:	9103      	str	r1, [sp, #12]
 8007470:	701a      	strb	r2, [r3, #0]
 8007472:	e7f8      	b.n	8007466 <__cvt+0x9e>
 8007474:	f8cd 900c 	str.w	r9, [sp, #12]
 8007478:	9b03      	ldr	r3, [sp, #12]
 800747a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800747c:	eba3 0308 	sub.w	r3, r3, r8
 8007480:	4640      	mov	r0, r8
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	b004      	add	sp, #16
 8007486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800748a <__exponent>:
 800748a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800748c:	2900      	cmp	r1, #0
 800748e:	4604      	mov	r4, r0
 8007490:	bfba      	itte	lt
 8007492:	4249      	neglt	r1, r1
 8007494:	232d      	movlt	r3, #45	; 0x2d
 8007496:	232b      	movge	r3, #43	; 0x2b
 8007498:	2909      	cmp	r1, #9
 800749a:	f804 2b02 	strb.w	r2, [r4], #2
 800749e:	7043      	strb	r3, [r0, #1]
 80074a0:	dd20      	ble.n	80074e4 <__exponent+0x5a>
 80074a2:	f10d 0307 	add.w	r3, sp, #7
 80074a6:	461f      	mov	r7, r3
 80074a8:	260a      	movs	r6, #10
 80074aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80074ae:	fb06 1115 	mls	r1, r6, r5, r1
 80074b2:	3130      	adds	r1, #48	; 0x30
 80074b4:	2d09      	cmp	r5, #9
 80074b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80074ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80074be:	4629      	mov	r1, r5
 80074c0:	dc09      	bgt.n	80074d6 <__exponent+0x4c>
 80074c2:	3130      	adds	r1, #48	; 0x30
 80074c4:	3b02      	subs	r3, #2
 80074c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074ca:	42bb      	cmp	r3, r7
 80074cc:	4622      	mov	r2, r4
 80074ce:	d304      	bcc.n	80074da <__exponent+0x50>
 80074d0:	1a10      	subs	r0, r2, r0
 80074d2:	b003      	add	sp, #12
 80074d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074d6:	4613      	mov	r3, r2
 80074d8:	e7e7      	b.n	80074aa <__exponent+0x20>
 80074da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074de:	f804 2b01 	strb.w	r2, [r4], #1
 80074e2:	e7f2      	b.n	80074ca <__exponent+0x40>
 80074e4:	2330      	movs	r3, #48	; 0x30
 80074e6:	4419      	add	r1, r3
 80074e8:	7083      	strb	r3, [r0, #2]
 80074ea:	1d02      	adds	r2, r0, #4
 80074ec:	70c1      	strb	r1, [r0, #3]
 80074ee:	e7ef      	b.n	80074d0 <__exponent+0x46>

080074f0 <_printf_float>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	b08d      	sub	sp, #52	; 0x34
 80074f6:	460c      	mov	r4, r1
 80074f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80074fc:	4616      	mov	r6, r2
 80074fe:	461f      	mov	r7, r3
 8007500:	4605      	mov	r5, r0
 8007502:	f002 fe49 	bl	800a198 <_localeconv_r>
 8007506:	6803      	ldr	r3, [r0, #0]
 8007508:	9304      	str	r3, [sp, #16]
 800750a:	4618      	mov	r0, r3
 800750c:	f7f8 fe72 	bl	80001f4 <strlen>
 8007510:	2300      	movs	r3, #0
 8007512:	930a      	str	r3, [sp, #40]	; 0x28
 8007514:	f8d8 3000 	ldr.w	r3, [r8]
 8007518:	9005      	str	r0, [sp, #20]
 800751a:	3307      	adds	r3, #7
 800751c:	f023 0307 	bic.w	r3, r3, #7
 8007520:	f103 0208 	add.w	r2, r3, #8
 8007524:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007528:	f8d4 b000 	ldr.w	fp, [r4]
 800752c:	f8c8 2000 	str.w	r2, [r8]
 8007530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007534:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007538:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800753c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007540:	9307      	str	r3, [sp, #28]
 8007542:	f8cd 8018 	str.w	r8, [sp, #24]
 8007546:	f04f 32ff 	mov.w	r2, #4294967295
 800754a:	4ba7      	ldr	r3, [pc, #668]	; (80077e8 <_printf_float+0x2f8>)
 800754c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007550:	f7f9 fb04 	bl	8000b5c <__aeabi_dcmpun>
 8007554:	bb70      	cbnz	r0, 80075b4 <_printf_float+0xc4>
 8007556:	f04f 32ff 	mov.w	r2, #4294967295
 800755a:	4ba3      	ldr	r3, [pc, #652]	; (80077e8 <_printf_float+0x2f8>)
 800755c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007560:	f7f9 fade 	bl	8000b20 <__aeabi_dcmple>
 8007564:	bb30      	cbnz	r0, 80075b4 <_printf_float+0xc4>
 8007566:	2200      	movs	r2, #0
 8007568:	2300      	movs	r3, #0
 800756a:	4640      	mov	r0, r8
 800756c:	4649      	mov	r1, r9
 800756e:	f7f9 facd 	bl	8000b0c <__aeabi_dcmplt>
 8007572:	b110      	cbz	r0, 800757a <_printf_float+0x8a>
 8007574:	232d      	movs	r3, #45	; 0x2d
 8007576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800757a:	4a9c      	ldr	r2, [pc, #624]	; (80077ec <_printf_float+0x2fc>)
 800757c:	4b9c      	ldr	r3, [pc, #624]	; (80077f0 <_printf_float+0x300>)
 800757e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007582:	bf8c      	ite	hi
 8007584:	4690      	movhi	r8, r2
 8007586:	4698      	movls	r8, r3
 8007588:	2303      	movs	r3, #3
 800758a:	f02b 0204 	bic.w	r2, fp, #4
 800758e:	6123      	str	r3, [r4, #16]
 8007590:	6022      	str	r2, [r4, #0]
 8007592:	f04f 0900 	mov.w	r9, #0
 8007596:	9700      	str	r7, [sp, #0]
 8007598:	4633      	mov	r3, r6
 800759a:	aa0b      	add	r2, sp, #44	; 0x2c
 800759c:	4621      	mov	r1, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 f9e6 	bl	8007970 <_printf_common>
 80075a4:	3001      	adds	r0, #1
 80075a6:	f040 808d 	bne.w	80076c4 <_printf_float+0x1d4>
 80075aa:	f04f 30ff 	mov.w	r0, #4294967295
 80075ae:	b00d      	add	sp, #52	; 0x34
 80075b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b4:	4642      	mov	r2, r8
 80075b6:	464b      	mov	r3, r9
 80075b8:	4640      	mov	r0, r8
 80075ba:	4649      	mov	r1, r9
 80075bc:	f7f9 face 	bl	8000b5c <__aeabi_dcmpun>
 80075c0:	b110      	cbz	r0, 80075c8 <_printf_float+0xd8>
 80075c2:	4a8c      	ldr	r2, [pc, #560]	; (80077f4 <_printf_float+0x304>)
 80075c4:	4b8c      	ldr	r3, [pc, #560]	; (80077f8 <_printf_float+0x308>)
 80075c6:	e7da      	b.n	800757e <_printf_float+0x8e>
 80075c8:	6861      	ldr	r1, [r4, #4]
 80075ca:	1c4b      	adds	r3, r1, #1
 80075cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80075d0:	a80a      	add	r0, sp, #40	; 0x28
 80075d2:	d13e      	bne.n	8007652 <_printf_float+0x162>
 80075d4:	2306      	movs	r3, #6
 80075d6:	6063      	str	r3, [r4, #4]
 80075d8:	2300      	movs	r3, #0
 80075da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80075de:	ab09      	add	r3, sp, #36	; 0x24
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	ec49 8b10 	vmov	d0, r8, r9
 80075e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075ea:	6022      	str	r2, [r4, #0]
 80075ec:	f8cd a004 	str.w	sl, [sp, #4]
 80075f0:	6861      	ldr	r1, [r4, #4]
 80075f2:	4628      	mov	r0, r5
 80075f4:	f7ff fee8 	bl	80073c8 <__cvt>
 80075f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80075fc:	2b47      	cmp	r3, #71	; 0x47
 80075fe:	4680      	mov	r8, r0
 8007600:	d109      	bne.n	8007616 <_printf_float+0x126>
 8007602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007604:	1cd8      	adds	r0, r3, #3
 8007606:	db02      	blt.n	800760e <_printf_float+0x11e>
 8007608:	6862      	ldr	r2, [r4, #4]
 800760a:	4293      	cmp	r3, r2
 800760c:	dd47      	ble.n	800769e <_printf_float+0x1ae>
 800760e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007612:	fa5f fa8a 	uxtb.w	sl, sl
 8007616:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800761a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800761c:	d824      	bhi.n	8007668 <_printf_float+0x178>
 800761e:	3901      	subs	r1, #1
 8007620:	4652      	mov	r2, sl
 8007622:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007626:	9109      	str	r1, [sp, #36]	; 0x24
 8007628:	f7ff ff2f 	bl	800748a <__exponent>
 800762c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800762e:	1813      	adds	r3, r2, r0
 8007630:	2a01      	cmp	r2, #1
 8007632:	4681      	mov	r9, r0
 8007634:	6123      	str	r3, [r4, #16]
 8007636:	dc02      	bgt.n	800763e <_printf_float+0x14e>
 8007638:	6822      	ldr	r2, [r4, #0]
 800763a:	07d1      	lsls	r1, r2, #31
 800763c:	d501      	bpl.n	8007642 <_printf_float+0x152>
 800763e:	3301      	adds	r3, #1
 8007640:	6123      	str	r3, [r4, #16]
 8007642:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0a5      	beq.n	8007596 <_printf_float+0xa6>
 800764a:	232d      	movs	r3, #45	; 0x2d
 800764c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007650:	e7a1      	b.n	8007596 <_printf_float+0xa6>
 8007652:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007656:	f000 8177 	beq.w	8007948 <_printf_float+0x458>
 800765a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800765e:	d1bb      	bne.n	80075d8 <_printf_float+0xe8>
 8007660:	2900      	cmp	r1, #0
 8007662:	d1b9      	bne.n	80075d8 <_printf_float+0xe8>
 8007664:	2301      	movs	r3, #1
 8007666:	e7b6      	b.n	80075d6 <_printf_float+0xe6>
 8007668:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800766c:	d119      	bne.n	80076a2 <_printf_float+0x1b2>
 800766e:	2900      	cmp	r1, #0
 8007670:	6863      	ldr	r3, [r4, #4]
 8007672:	dd0c      	ble.n	800768e <_printf_float+0x19e>
 8007674:	6121      	str	r1, [r4, #16]
 8007676:	b913      	cbnz	r3, 800767e <_printf_float+0x18e>
 8007678:	6822      	ldr	r2, [r4, #0]
 800767a:	07d2      	lsls	r2, r2, #31
 800767c:	d502      	bpl.n	8007684 <_printf_float+0x194>
 800767e:	3301      	adds	r3, #1
 8007680:	440b      	add	r3, r1
 8007682:	6123      	str	r3, [r4, #16]
 8007684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007686:	65a3      	str	r3, [r4, #88]	; 0x58
 8007688:	f04f 0900 	mov.w	r9, #0
 800768c:	e7d9      	b.n	8007642 <_printf_float+0x152>
 800768e:	b913      	cbnz	r3, 8007696 <_printf_float+0x1a6>
 8007690:	6822      	ldr	r2, [r4, #0]
 8007692:	07d0      	lsls	r0, r2, #31
 8007694:	d501      	bpl.n	800769a <_printf_float+0x1aa>
 8007696:	3302      	adds	r3, #2
 8007698:	e7f3      	b.n	8007682 <_printf_float+0x192>
 800769a:	2301      	movs	r3, #1
 800769c:	e7f1      	b.n	8007682 <_printf_float+0x192>
 800769e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80076a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80076a6:	4293      	cmp	r3, r2
 80076a8:	db05      	blt.n	80076b6 <_printf_float+0x1c6>
 80076aa:	6822      	ldr	r2, [r4, #0]
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	07d1      	lsls	r1, r2, #31
 80076b0:	d5e8      	bpl.n	8007684 <_printf_float+0x194>
 80076b2:	3301      	adds	r3, #1
 80076b4:	e7e5      	b.n	8007682 <_printf_float+0x192>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	bfd4      	ite	le
 80076ba:	f1c3 0302 	rsble	r3, r3, #2
 80076be:	2301      	movgt	r3, #1
 80076c0:	4413      	add	r3, r2
 80076c2:	e7de      	b.n	8007682 <_printf_float+0x192>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	055a      	lsls	r2, r3, #21
 80076c8:	d407      	bmi.n	80076da <_printf_float+0x1ea>
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	4642      	mov	r2, r8
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	d12b      	bne.n	8007730 <_printf_float+0x240>
 80076d8:	e767      	b.n	80075aa <_printf_float+0xba>
 80076da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80076de:	f240 80dc 	bls.w	800789a <_printf_float+0x3aa>
 80076e2:	2200      	movs	r2, #0
 80076e4:	2300      	movs	r3, #0
 80076e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076ea:	f7f9 fa05 	bl	8000af8 <__aeabi_dcmpeq>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d033      	beq.n	800775a <_printf_float+0x26a>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4a41      	ldr	r2, [pc, #260]	; (80077fc <_printf_float+0x30c>)
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	f43f af54 	beq.w	80075aa <_printf_float+0xba>
 8007702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007706:	429a      	cmp	r2, r3
 8007708:	db02      	blt.n	8007710 <_printf_float+0x220>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	07d8      	lsls	r0, r3, #31
 800770e:	d50f      	bpl.n	8007730 <_printf_float+0x240>
 8007710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007714:	4631      	mov	r1, r6
 8007716:	4628      	mov	r0, r5
 8007718:	47b8      	blx	r7
 800771a:	3001      	adds	r0, #1
 800771c:	f43f af45 	beq.w	80075aa <_printf_float+0xba>
 8007720:	f04f 0800 	mov.w	r8, #0
 8007724:	f104 091a 	add.w	r9, r4, #26
 8007728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772a:	3b01      	subs	r3, #1
 800772c:	4543      	cmp	r3, r8
 800772e:	dc09      	bgt.n	8007744 <_printf_float+0x254>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	079b      	lsls	r3, r3, #30
 8007734:	f100 8103 	bmi.w	800793e <_printf_float+0x44e>
 8007738:	68e0      	ldr	r0, [r4, #12]
 800773a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800773c:	4298      	cmp	r0, r3
 800773e:	bfb8      	it	lt
 8007740:	4618      	movlt	r0, r3
 8007742:	e734      	b.n	80075ae <_printf_float+0xbe>
 8007744:	2301      	movs	r3, #1
 8007746:	464a      	mov	r2, r9
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	f43f af2b 	beq.w	80075aa <_printf_float+0xba>
 8007754:	f108 0801 	add.w	r8, r8, #1
 8007758:	e7e6      	b.n	8007728 <_printf_float+0x238>
 800775a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775c:	2b00      	cmp	r3, #0
 800775e:	dc2b      	bgt.n	80077b8 <_printf_float+0x2c8>
 8007760:	2301      	movs	r3, #1
 8007762:	4a26      	ldr	r2, [pc, #152]	; (80077fc <_printf_float+0x30c>)
 8007764:	4631      	mov	r1, r6
 8007766:	4628      	mov	r0, r5
 8007768:	47b8      	blx	r7
 800776a:	3001      	adds	r0, #1
 800776c:	f43f af1d 	beq.w	80075aa <_printf_float+0xba>
 8007770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007772:	b923      	cbnz	r3, 800777e <_printf_float+0x28e>
 8007774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007776:	b913      	cbnz	r3, 800777e <_printf_float+0x28e>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	07d9      	lsls	r1, r3, #31
 800777c:	d5d8      	bpl.n	8007730 <_printf_float+0x240>
 800777e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007782:	4631      	mov	r1, r6
 8007784:	4628      	mov	r0, r5
 8007786:	47b8      	blx	r7
 8007788:	3001      	adds	r0, #1
 800778a:	f43f af0e 	beq.w	80075aa <_printf_float+0xba>
 800778e:	f04f 0900 	mov.w	r9, #0
 8007792:	f104 0a1a 	add.w	sl, r4, #26
 8007796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007798:	425b      	negs	r3, r3
 800779a:	454b      	cmp	r3, r9
 800779c:	dc01      	bgt.n	80077a2 <_printf_float+0x2b2>
 800779e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a0:	e794      	b.n	80076cc <_printf_float+0x1dc>
 80077a2:	2301      	movs	r3, #1
 80077a4:	4652      	mov	r2, sl
 80077a6:	4631      	mov	r1, r6
 80077a8:	4628      	mov	r0, r5
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	f43f aefc 	beq.w	80075aa <_printf_float+0xba>
 80077b2:	f109 0901 	add.w	r9, r9, #1
 80077b6:	e7ee      	b.n	8007796 <_printf_float+0x2a6>
 80077b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077bc:	429a      	cmp	r2, r3
 80077be:	bfa8      	it	ge
 80077c0:	461a      	movge	r2, r3
 80077c2:	2a00      	cmp	r2, #0
 80077c4:	4691      	mov	r9, r2
 80077c6:	dd07      	ble.n	80077d8 <_printf_float+0x2e8>
 80077c8:	4613      	mov	r3, r2
 80077ca:	4631      	mov	r1, r6
 80077cc:	4642      	mov	r2, r8
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	f43f aee9 	beq.w	80075aa <_printf_float+0xba>
 80077d8:	f104 031a 	add.w	r3, r4, #26
 80077dc:	f04f 0b00 	mov.w	fp, #0
 80077e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077e4:	9306      	str	r3, [sp, #24]
 80077e6:	e015      	b.n	8007814 <_printf_float+0x324>
 80077e8:	7fefffff 	.word	0x7fefffff
 80077ec:	0800af60 	.word	0x0800af60
 80077f0:	0800af5c 	.word	0x0800af5c
 80077f4:	0800af68 	.word	0x0800af68
 80077f8:	0800af64 	.word	0x0800af64
 80077fc:	0800af6c 	.word	0x0800af6c
 8007800:	2301      	movs	r3, #1
 8007802:	9a06      	ldr	r2, [sp, #24]
 8007804:	4631      	mov	r1, r6
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	f43f aecd 	beq.w	80075aa <_printf_float+0xba>
 8007810:	f10b 0b01 	add.w	fp, fp, #1
 8007814:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007818:	ebaa 0309 	sub.w	r3, sl, r9
 800781c:	455b      	cmp	r3, fp
 800781e:	dcef      	bgt.n	8007800 <_printf_float+0x310>
 8007820:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007824:	429a      	cmp	r2, r3
 8007826:	44d0      	add	r8, sl
 8007828:	db15      	blt.n	8007856 <_printf_float+0x366>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	07da      	lsls	r2, r3, #31
 800782e:	d412      	bmi.n	8007856 <_printf_float+0x366>
 8007830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007832:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007834:	eba3 020a 	sub.w	r2, r3, sl
 8007838:	eba3 0a01 	sub.w	sl, r3, r1
 800783c:	4592      	cmp	sl, r2
 800783e:	bfa8      	it	ge
 8007840:	4692      	movge	sl, r2
 8007842:	f1ba 0f00 	cmp.w	sl, #0
 8007846:	dc0e      	bgt.n	8007866 <_printf_float+0x376>
 8007848:	f04f 0800 	mov.w	r8, #0
 800784c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007850:	f104 091a 	add.w	r9, r4, #26
 8007854:	e019      	b.n	800788a <_printf_float+0x39a>
 8007856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800785a:	4631      	mov	r1, r6
 800785c:	4628      	mov	r0, r5
 800785e:	47b8      	blx	r7
 8007860:	3001      	adds	r0, #1
 8007862:	d1e5      	bne.n	8007830 <_printf_float+0x340>
 8007864:	e6a1      	b.n	80075aa <_printf_float+0xba>
 8007866:	4653      	mov	r3, sl
 8007868:	4642      	mov	r2, r8
 800786a:	4631      	mov	r1, r6
 800786c:	4628      	mov	r0, r5
 800786e:	47b8      	blx	r7
 8007870:	3001      	adds	r0, #1
 8007872:	d1e9      	bne.n	8007848 <_printf_float+0x358>
 8007874:	e699      	b.n	80075aa <_printf_float+0xba>
 8007876:	2301      	movs	r3, #1
 8007878:	464a      	mov	r2, r9
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	47b8      	blx	r7
 8007880:	3001      	adds	r0, #1
 8007882:	f43f ae92 	beq.w	80075aa <_printf_float+0xba>
 8007886:	f108 0801 	add.w	r8, r8, #1
 800788a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800788e:	1a9b      	subs	r3, r3, r2
 8007890:	eba3 030a 	sub.w	r3, r3, sl
 8007894:	4543      	cmp	r3, r8
 8007896:	dcee      	bgt.n	8007876 <_printf_float+0x386>
 8007898:	e74a      	b.n	8007730 <_printf_float+0x240>
 800789a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800789c:	2a01      	cmp	r2, #1
 800789e:	dc01      	bgt.n	80078a4 <_printf_float+0x3b4>
 80078a0:	07db      	lsls	r3, r3, #31
 80078a2:	d53a      	bpl.n	800791a <_printf_float+0x42a>
 80078a4:	2301      	movs	r3, #1
 80078a6:	4642      	mov	r2, r8
 80078a8:	4631      	mov	r1, r6
 80078aa:	4628      	mov	r0, r5
 80078ac:	47b8      	blx	r7
 80078ae:	3001      	adds	r0, #1
 80078b0:	f43f ae7b 	beq.w	80075aa <_printf_float+0xba>
 80078b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078b8:	4631      	mov	r1, r6
 80078ba:	4628      	mov	r0, r5
 80078bc:	47b8      	blx	r7
 80078be:	3001      	adds	r0, #1
 80078c0:	f108 0801 	add.w	r8, r8, #1
 80078c4:	f43f ae71 	beq.w	80075aa <_printf_float+0xba>
 80078c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ca:	2200      	movs	r2, #0
 80078cc:	f103 3aff 	add.w	sl, r3, #4294967295
 80078d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078d4:	2300      	movs	r3, #0
 80078d6:	f7f9 f90f 	bl	8000af8 <__aeabi_dcmpeq>
 80078da:	b9c8      	cbnz	r0, 8007910 <_printf_float+0x420>
 80078dc:	4653      	mov	r3, sl
 80078de:	4642      	mov	r2, r8
 80078e0:	4631      	mov	r1, r6
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	d10e      	bne.n	8007908 <_printf_float+0x418>
 80078ea:	e65e      	b.n	80075aa <_printf_float+0xba>
 80078ec:	2301      	movs	r3, #1
 80078ee:	4652      	mov	r2, sl
 80078f0:	4631      	mov	r1, r6
 80078f2:	4628      	mov	r0, r5
 80078f4:	47b8      	blx	r7
 80078f6:	3001      	adds	r0, #1
 80078f8:	f43f ae57 	beq.w	80075aa <_printf_float+0xba>
 80078fc:	f108 0801 	add.w	r8, r8, #1
 8007900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007902:	3b01      	subs	r3, #1
 8007904:	4543      	cmp	r3, r8
 8007906:	dcf1      	bgt.n	80078ec <_printf_float+0x3fc>
 8007908:	464b      	mov	r3, r9
 800790a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800790e:	e6de      	b.n	80076ce <_printf_float+0x1de>
 8007910:	f04f 0800 	mov.w	r8, #0
 8007914:	f104 0a1a 	add.w	sl, r4, #26
 8007918:	e7f2      	b.n	8007900 <_printf_float+0x410>
 800791a:	2301      	movs	r3, #1
 800791c:	e7df      	b.n	80078de <_printf_float+0x3ee>
 800791e:	2301      	movs	r3, #1
 8007920:	464a      	mov	r2, r9
 8007922:	4631      	mov	r1, r6
 8007924:	4628      	mov	r0, r5
 8007926:	47b8      	blx	r7
 8007928:	3001      	adds	r0, #1
 800792a:	f43f ae3e 	beq.w	80075aa <_printf_float+0xba>
 800792e:	f108 0801 	add.w	r8, r8, #1
 8007932:	68e3      	ldr	r3, [r4, #12]
 8007934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007936:	1a9b      	subs	r3, r3, r2
 8007938:	4543      	cmp	r3, r8
 800793a:	dcf0      	bgt.n	800791e <_printf_float+0x42e>
 800793c:	e6fc      	b.n	8007738 <_printf_float+0x248>
 800793e:	f04f 0800 	mov.w	r8, #0
 8007942:	f104 0919 	add.w	r9, r4, #25
 8007946:	e7f4      	b.n	8007932 <_printf_float+0x442>
 8007948:	2900      	cmp	r1, #0
 800794a:	f43f ae8b 	beq.w	8007664 <_printf_float+0x174>
 800794e:	2300      	movs	r3, #0
 8007950:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007954:	ab09      	add	r3, sp, #36	; 0x24
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	ec49 8b10 	vmov	d0, r8, r9
 800795c:	6022      	str	r2, [r4, #0]
 800795e:	f8cd a004 	str.w	sl, [sp, #4]
 8007962:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007966:	4628      	mov	r0, r5
 8007968:	f7ff fd2e 	bl	80073c8 <__cvt>
 800796c:	4680      	mov	r8, r0
 800796e:	e648      	b.n	8007602 <_printf_float+0x112>

08007970 <_printf_common>:
 8007970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	4691      	mov	r9, r2
 8007976:	461f      	mov	r7, r3
 8007978:	688a      	ldr	r2, [r1, #8]
 800797a:	690b      	ldr	r3, [r1, #16]
 800797c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007980:	4293      	cmp	r3, r2
 8007982:	bfb8      	it	lt
 8007984:	4613      	movlt	r3, r2
 8007986:	f8c9 3000 	str.w	r3, [r9]
 800798a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800798e:	4606      	mov	r6, r0
 8007990:	460c      	mov	r4, r1
 8007992:	b112      	cbz	r2, 800799a <_printf_common+0x2a>
 8007994:	3301      	adds	r3, #1
 8007996:	f8c9 3000 	str.w	r3, [r9]
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	0699      	lsls	r1, r3, #26
 800799e:	bf42      	ittt	mi
 80079a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80079a4:	3302      	addmi	r3, #2
 80079a6:	f8c9 3000 	strmi.w	r3, [r9]
 80079aa:	6825      	ldr	r5, [r4, #0]
 80079ac:	f015 0506 	ands.w	r5, r5, #6
 80079b0:	d107      	bne.n	80079c2 <_printf_common+0x52>
 80079b2:	f104 0a19 	add.w	sl, r4, #25
 80079b6:	68e3      	ldr	r3, [r4, #12]
 80079b8:	f8d9 2000 	ldr.w	r2, [r9]
 80079bc:	1a9b      	subs	r3, r3, r2
 80079be:	42ab      	cmp	r3, r5
 80079c0:	dc28      	bgt.n	8007a14 <_printf_common+0xa4>
 80079c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	3300      	adds	r3, #0
 80079ca:	bf18      	it	ne
 80079cc:	2301      	movne	r3, #1
 80079ce:	0692      	lsls	r2, r2, #26
 80079d0:	d42d      	bmi.n	8007a2e <_printf_common+0xbe>
 80079d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079d6:	4639      	mov	r1, r7
 80079d8:	4630      	mov	r0, r6
 80079da:	47c0      	blx	r8
 80079dc:	3001      	adds	r0, #1
 80079de:	d020      	beq.n	8007a22 <_printf_common+0xb2>
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	68e5      	ldr	r5, [r4, #12]
 80079e4:	f8d9 2000 	ldr.w	r2, [r9]
 80079e8:	f003 0306 	and.w	r3, r3, #6
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	bf08      	it	eq
 80079f0:	1aad      	subeq	r5, r5, r2
 80079f2:	68a3      	ldr	r3, [r4, #8]
 80079f4:	6922      	ldr	r2, [r4, #16]
 80079f6:	bf0c      	ite	eq
 80079f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079fc:	2500      	movne	r5, #0
 80079fe:	4293      	cmp	r3, r2
 8007a00:	bfc4      	itt	gt
 8007a02:	1a9b      	subgt	r3, r3, r2
 8007a04:	18ed      	addgt	r5, r5, r3
 8007a06:	f04f 0900 	mov.w	r9, #0
 8007a0a:	341a      	adds	r4, #26
 8007a0c:	454d      	cmp	r5, r9
 8007a0e:	d11a      	bne.n	8007a46 <_printf_common+0xd6>
 8007a10:	2000      	movs	r0, #0
 8007a12:	e008      	b.n	8007a26 <_printf_common+0xb6>
 8007a14:	2301      	movs	r3, #1
 8007a16:	4652      	mov	r2, sl
 8007a18:	4639      	mov	r1, r7
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	47c0      	blx	r8
 8007a1e:	3001      	adds	r0, #1
 8007a20:	d103      	bne.n	8007a2a <_printf_common+0xba>
 8007a22:	f04f 30ff 	mov.w	r0, #4294967295
 8007a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2a:	3501      	adds	r5, #1
 8007a2c:	e7c3      	b.n	80079b6 <_printf_common+0x46>
 8007a2e:	18e1      	adds	r1, r4, r3
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	2030      	movs	r0, #48	; 0x30
 8007a34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a38:	4422      	add	r2, r4
 8007a3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a42:	3302      	adds	r3, #2
 8007a44:	e7c5      	b.n	80079d2 <_printf_common+0x62>
 8007a46:	2301      	movs	r3, #1
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	47c0      	blx	r8
 8007a50:	3001      	adds	r0, #1
 8007a52:	d0e6      	beq.n	8007a22 <_printf_common+0xb2>
 8007a54:	f109 0901 	add.w	r9, r9, #1
 8007a58:	e7d8      	b.n	8007a0c <_printf_common+0x9c>
	...

08007a5c <_printf_i>:
 8007a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007a64:	460c      	mov	r4, r1
 8007a66:	7e09      	ldrb	r1, [r1, #24]
 8007a68:	b085      	sub	sp, #20
 8007a6a:	296e      	cmp	r1, #110	; 0x6e
 8007a6c:	4617      	mov	r7, r2
 8007a6e:	4606      	mov	r6, r0
 8007a70:	4698      	mov	r8, r3
 8007a72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a74:	f000 80b3 	beq.w	8007bde <_printf_i+0x182>
 8007a78:	d822      	bhi.n	8007ac0 <_printf_i+0x64>
 8007a7a:	2963      	cmp	r1, #99	; 0x63
 8007a7c:	d036      	beq.n	8007aec <_printf_i+0x90>
 8007a7e:	d80a      	bhi.n	8007a96 <_printf_i+0x3a>
 8007a80:	2900      	cmp	r1, #0
 8007a82:	f000 80b9 	beq.w	8007bf8 <_printf_i+0x19c>
 8007a86:	2958      	cmp	r1, #88	; 0x58
 8007a88:	f000 8083 	beq.w	8007b92 <_printf_i+0x136>
 8007a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007a94:	e032      	b.n	8007afc <_printf_i+0xa0>
 8007a96:	2964      	cmp	r1, #100	; 0x64
 8007a98:	d001      	beq.n	8007a9e <_printf_i+0x42>
 8007a9a:	2969      	cmp	r1, #105	; 0x69
 8007a9c:	d1f6      	bne.n	8007a8c <_printf_i+0x30>
 8007a9e:	6820      	ldr	r0, [r4, #0]
 8007aa0:	6813      	ldr	r3, [r2, #0]
 8007aa2:	0605      	lsls	r5, r0, #24
 8007aa4:	f103 0104 	add.w	r1, r3, #4
 8007aa8:	d52a      	bpl.n	8007b00 <_printf_i+0xa4>
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6011      	str	r1, [r2, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	da03      	bge.n	8007aba <_printf_i+0x5e>
 8007ab2:	222d      	movs	r2, #45	; 0x2d
 8007ab4:	425b      	negs	r3, r3
 8007ab6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007aba:	486f      	ldr	r0, [pc, #444]	; (8007c78 <_printf_i+0x21c>)
 8007abc:	220a      	movs	r2, #10
 8007abe:	e039      	b.n	8007b34 <_printf_i+0xd8>
 8007ac0:	2973      	cmp	r1, #115	; 0x73
 8007ac2:	f000 809d 	beq.w	8007c00 <_printf_i+0x1a4>
 8007ac6:	d808      	bhi.n	8007ada <_printf_i+0x7e>
 8007ac8:	296f      	cmp	r1, #111	; 0x6f
 8007aca:	d020      	beq.n	8007b0e <_printf_i+0xb2>
 8007acc:	2970      	cmp	r1, #112	; 0x70
 8007ace:	d1dd      	bne.n	8007a8c <_printf_i+0x30>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	f043 0320 	orr.w	r3, r3, #32
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	e003      	b.n	8007ae2 <_printf_i+0x86>
 8007ada:	2975      	cmp	r1, #117	; 0x75
 8007adc:	d017      	beq.n	8007b0e <_printf_i+0xb2>
 8007ade:	2978      	cmp	r1, #120	; 0x78
 8007ae0:	d1d4      	bne.n	8007a8c <_printf_i+0x30>
 8007ae2:	2378      	movs	r3, #120	; 0x78
 8007ae4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ae8:	4864      	ldr	r0, [pc, #400]	; (8007c7c <_printf_i+0x220>)
 8007aea:	e055      	b.n	8007b98 <_printf_i+0x13c>
 8007aec:	6813      	ldr	r3, [r2, #0]
 8007aee:	1d19      	adds	r1, r3, #4
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6011      	str	r1, [r2, #0]
 8007af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007afc:	2301      	movs	r3, #1
 8007afe:	e08c      	b.n	8007c1a <_printf_i+0x1be>
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6011      	str	r1, [r2, #0]
 8007b04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b08:	bf18      	it	ne
 8007b0a:	b21b      	sxthne	r3, r3
 8007b0c:	e7cf      	b.n	8007aae <_printf_i+0x52>
 8007b0e:	6813      	ldr	r3, [r2, #0]
 8007b10:	6825      	ldr	r5, [r4, #0]
 8007b12:	1d18      	adds	r0, r3, #4
 8007b14:	6010      	str	r0, [r2, #0]
 8007b16:	0628      	lsls	r0, r5, #24
 8007b18:	d501      	bpl.n	8007b1e <_printf_i+0xc2>
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	e002      	b.n	8007b24 <_printf_i+0xc8>
 8007b1e:	0668      	lsls	r0, r5, #25
 8007b20:	d5fb      	bpl.n	8007b1a <_printf_i+0xbe>
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	4854      	ldr	r0, [pc, #336]	; (8007c78 <_printf_i+0x21c>)
 8007b26:	296f      	cmp	r1, #111	; 0x6f
 8007b28:	bf14      	ite	ne
 8007b2a:	220a      	movne	r2, #10
 8007b2c:	2208      	moveq	r2, #8
 8007b2e:	2100      	movs	r1, #0
 8007b30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b34:	6865      	ldr	r5, [r4, #4]
 8007b36:	60a5      	str	r5, [r4, #8]
 8007b38:	2d00      	cmp	r5, #0
 8007b3a:	f2c0 8095 	blt.w	8007c68 <_printf_i+0x20c>
 8007b3e:	6821      	ldr	r1, [r4, #0]
 8007b40:	f021 0104 	bic.w	r1, r1, #4
 8007b44:	6021      	str	r1, [r4, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d13d      	bne.n	8007bc6 <_printf_i+0x16a>
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	f040 808e 	bne.w	8007c6c <_printf_i+0x210>
 8007b50:	4665      	mov	r5, ip
 8007b52:	2a08      	cmp	r2, #8
 8007b54:	d10b      	bne.n	8007b6e <_printf_i+0x112>
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	07db      	lsls	r3, r3, #31
 8007b5a:	d508      	bpl.n	8007b6e <_printf_i+0x112>
 8007b5c:	6923      	ldr	r3, [r4, #16]
 8007b5e:	6862      	ldr	r2, [r4, #4]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	bfde      	ittt	le
 8007b64:	2330      	movle	r3, #48	; 0x30
 8007b66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b6e:	ebac 0305 	sub.w	r3, ip, r5
 8007b72:	6123      	str	r3, [r4, #16]
 8007b74:	f8cd 8000 	str.w	r8, [sp]
 8007b78:	463b      	mov	r3, r7
 8007b7a:	aa03      	add	r2, sp, #12
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f7ff fef6 	bl	8007970 <_printf_common>
 8007b84:	3001      	adds	r0, #1
 8007b86:	d14d      	bne.n	8007c24 <_printf_i+0x1c8>
 8007b88:	f04f 30ff 	mov.w	r0, #4294967295
 8007b8c:	b005      	add	sp, #20
 8007b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b92:	4839      	ldr	r0, [pc, #228]	; (8007c78 <_printf_i+0x21c>)
 8007b94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007b98:	6813      	ldr	r3, [r2, #0]
 8007b9a:	6821      	ldr	r1, [r4, #0]
 8007b9c:	1d1d      	adds	r5, r3, #4
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6015      	str	r5, [r2, #0]
 8007ba2:	060a      	lsls	r2, r1, #24
 8007ba4:	d50b      	bpl.n	8007bbe <_printf_i+0x162>
 8007ba6:	07ca      	lsls	r2, r1, #31
 8007ba8:	bf44      	itt	mi
 8007baa:	f041 0120 	orrmi.w	r1, r1, #32
 8007bae:	6021      	strmi	r1, [r4, #0]
 8007bb0:	b91b      	cbnz	r3, 8007bba <_printf_i+0x15e>
 8007bb2:	6822      	ldr	r2, [r4, #0]
 8007bb4:	f022 0220 	bic.w	r2, r2, #32
 8007bb8:	6022      	str	r2, [r4, #0]
 8007bba:	2210      	movs	r2, #16
 8007bbc:	e7b7      	b.n	8007b2e <_printf_i+0xd2>
 8007bbe:	064d      	lsls	r5, r1, #25
 8007bc0:	bf48      	it	mi
 8007bc2:	b29b      	uxthmi	r3, r3
 8007bc4:	e7ef      	b.n	8007ba6 <_printf_i+0x14a>
 8007bc6:	4665      	mov	r5, ip
 8007bc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bcc:	fb02 3311 	mls	r3, r2, r1, r3
 8007bd0:	5cc3      	ldrb	r3, [r0, r3]
 8007bd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	d1f5      	bne.n	8007bc8 <_printf_i+0x16c>
 8007bdc:	e7b9      	b.n	8007b52 <_printf_i+0xf6>
 8007bde:	6813      	ldr	r3, [r2, #0]
 8007be0:	6825      	ldr	r5, [r4, #0]
 8007be2:	6961      	ldr	r1, [r4, #20]
 8007be4:	1d18      	adds	r0, r3, #4
 8007be6:	6010      	str	r0, [r2, #0]
 8007be8:	0628      	lsls	r0, r5, #24
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	d501      	bpl.n	8007bf2 <_printf_i+0x196>
 8007bee:	6019      	str	r1, [r3, #0]
 8007bf0:	e002      	b.n	8007bf8 <_printf_i+0x19c>
 8007bf2:	066a      	lsls	r2, r5, #25
 8007bf4:	d5fb      	bpl.n	8007bee <_printf_i+0x192>
 8007bf6:	8019      	strh	r1, [r3, #0]
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	6123      	str	r3, [r4, #16]
 8007bfc:	4665      	mov	r5, ip
 8007bfe:	e7b9      	b.n	8007b74 <_printf_i+0x118>
 8007c00:	6813      	ldr	r3, [r2, #0]
 8007c02:	1d19      	adds	r1, r3, #4
 8007c04:	6011      	str	r1, [r2, #0]
 8007c06:	681d      	ldr	r5, [r3, #0]
 8007c08:	6862      	ldr	r2, [r4, #4]
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f7f8 faff 	bl	8000210 <memchr>
 8007c12:	b108      	cbz	r0, 8007c18 <_printf_i+0x1bc>
 8007c14:	1b40      	subs	r0, r0, r5
 8007c16:	6060      	str	r0, [r4, #4]
 8007c18:	6863      	ldr	r3, [r4, #4]
 8007c1a:	6123      	str	r3, [r4, #16]
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c22:	e7a7      	b.n	8007b74 <_printf_i+0x118>
 8007c24:	6923      	ldr	r3, [r4, #16]
 8007c26:	462a      	mov	r2, r5
 8007c28:	4639      	mov	r1, r7
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	47c0      	blx	r8
 8007c2e:	3001      	adds	r0, #1
 8007c30:	d0aa      	beq.n	8007b88 <_printf_i+0x12c>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	079b      	lsls	r3, r3, #30
 8007c36:	d413      	bmi.n	8007c60 <_printf_i+0x204>
 8007c38:	68e0      	ldr	r0, [r4, #12]
 8007c3a:	9b03      	ldr	r3, [sp, #12]
 8007c3c:	4298      	cmp	r0, r3
 8007c3e:	bfb8      	it	lt
 8007c40:	4618      	movlt	r0, r3
 8007c42:	e7a3      	b.n	8007b8c <_printf_i+0x130>
 8007c44:	2301      	movs	r3, #1
 8007c46:	464a      	mov	r2, r9
 8007c48:	4639      	mov	r1, r7
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	47c0      	blx	r8
 8007c4e:	3001      	adds	r0, #1
 8007c50:	d09a      	beq.n	8007b88 <_printf_i+0x12c>
 8007c52:	3501      	adds	r5, #1
 8007c54:	68e3      	ldr	r3, [r4, #12]
 8007c56:	9a03      	ldr	r2, [sp, #12]
 8007c58:	1a9b      	subs	r3, r3, r2
 8007c5a:	42ab      	cmp	r3, r5
 8007c5c:	dcf2      	bgt.n	8007c44 <_printf_i+0x1e8>
 8007c5e:	e7eb      	b.n	8007c38 <_printf_i+0x1dc>
 8007c60:	2500      	movs	r5, #0
 8007c62:	f104 0919 	add.w	r9, r4, #25
 8007c66:	e7f5      	b.n	8007c54 <_printf_i+0x1f8>
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1ac      	bne.n	8007bc6 <_printf_i+0x16a>
 8007c6c:	7803      	ldrb	r3, [r0, #0]
 8007c6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c76:	e76c      	b.n	8007b52 <_printf_i+0xf6>
 8007c78:	0800af6e 	.word	0x0800af6e
 8007c7c:	0800af7f 	.word	0x0800af7f

08007c80 <_scanf_float>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	469a      	mov	sl, r3
 8007c86:	688b      	ldr	r3, [r1, #8]
 8007c88:	4616      	mov	r6, r2
 8007c8a:	1e5a      	subs	r2, r3, #1
 8007c8c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007c90:	b087      	sub	sp, #28
 8007c92:	bf83      	ittte	hi
 8007c94:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007c98:	189b      	addhi	r3, r3, r2
 8007c9a:	9301      	strhi	r3, [sp, #4]
 8007c9c:	2300      	movls	r3, #0
 8007c9e:	bf86      	itte	hi
 8007ca0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007ca4:	608b      	strhi	r3, [r1, #8]
 8007ca6:	9301      	strls	r3, [sp, #4]
 8007ca8:	680b      	ldr	r3, [r1, #0]
 8007caa:	4688      	mov	r8, r1
 8007cac:	f04f 0b00 	mov.w	fp, #0
 8007cb0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007cb4:	f848 3b1c 	str.w	r3, [r8], #28
 8007cb8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007cbc:	4607      	mov	r7, r0
 8007cbe:	460c      	mov	r4, r1
 8007cc0:	4645      	mov	r5, r8
 8007cc2:	465a      	mov	r2, fp
 8007cc4:	46d9      	mov	r9, fp
 8007cc6:	f8cd b008 	str.w	fp, [sp, #8]
 8007cca:	68a1      	ldr	r1, [r4, #8]
 8007ccc:	b181      	cbz	r1, 8007cf0 <_scanf_float+0x70>
 8007cce:	6833      	ldr	r3, [r6, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b49      	cmp	r3, #73	; 0x49
 8007cd4:	d071      	beq.n	8007dba <_scanf_float+0x13a>
 8007cd6:	d84d      	bhi.n	8007d74 <_scanf_float+0xf4>
 8007cd8:	2b39      	cmp	r3, #57	; 0x39
 8007cda:	d840      	bhi.n	8007d5e <_scanf_float+0xde>
 8007cdc:	2b31      	cmp	r3, #49	; 0x31
 8007cde:	f080 8088 	bcs.w	8007df2 <_scanf_float+0x172>
 8007ce2:	2b2d      	cmp	r3, #45	; 0x2d
 8007ce4:	f000 8090 	beq.w	8007e08 <_scanf_float+0x188>
 8007ce8:	d815      	bhi.n	8007d16 <_scanf_float+0x96>
 8007cea:	2b2b      	cmp	r3, #43	; 0x2b
 8007cec:	f000 808c 	beq.w	8007e08 <_scanf_float+0x188>
 8007cf0:	f1b9 0f00 	cmp.w	r9, #0
 8007cf4:	d003      	beq.n	8007cfe <_scanf_float+0x7e>
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	3a01      	subs	r2, #1
 8007d00:	2a01      	cmp	r2, #1
 8007d02:	f200 80ea 	bhi.w	8007eda <_scanf_float+0x25a>
 8007d06:	4545      	cmp	r5, r8
 8007d08:	f200 80dc 	bhi.w	8007ec4 <_scanf_float+0x244>
 8007d0c:	2601      	movs	r6, #1
 8007d0e:	4630      	mov	r0, r6
 8007d10:	b007      	add	sp, #28
 8007d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d16:	2b2e      	cmp	r3, #46	; 0x2e
 8007d18:	f000 809f 	beq.w	8007e5a <_scanf_float+0x1da>
 8007d1c:	2b30      	cmp	r3, #48	; 0x30
 8007d1e:	d1e7      	bne.n	8007cf0 <_scanf_float+0x70>
 8007d20:	6820      	ldr	r0, [r4, #0]
 8007d22:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007d26:	d064      	beq.n	8007df2 <_scanf_float+0x172>
 8007d28:	9b01      	ldr	r3, [sp, #4]
 8007d2a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007d2e:	6020      	str	r0, [r4, #0]
 8007d30:	f109 0901 	add.w	r9, r9, #1
 8007d34:	b11b      	cbz	r3, 8007d3e <_scanf_float+0xbe>
 8007d36:	3b01      	subs	r3, #1
 8007d38:	3101      	adds	r1, #1
 8007d3a:	9301      	str	r3, [sp, #4]
 8007d3c:	60a1      	str	r1, [r4, #8]
 8007d3e:	68a3      	ldr	r3, [r4, #8]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	60a3      	str	r3, [r4, #8]
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	3301      	adds	r3, #1
 8007d48:	6123      	str	r3, [r4, #16]
 8007d4a:	6873      	ldr	r3, [r6, #4]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	6073      	str	r3, [r6, #4]
 8007d52:	f340 80ac 	ble.w	8007eae <_scanf_float+0x22e>
 8007d56:	6833      	ldr	r3, [r6, #0]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	6033      	str	r3, [r6, #0]
 8007d5c:	e7b5      	b.n	8007cca <_scanf_float+0x4a>
 8007d5e:	2b45      	cmp	r3, #69	; 0x45
 8007d60:	f000 8085 	beq.w	8007e6e <_scanf_float+0x1ee>
 8007d64:	2b46      	cmp	r3, #70	; 0x46
 8007d66:	d06a      	beq.n	8007e3e <_scanf_float+0x1be>
 8007d68:	2b41      	cmp	r3, #65	; 0x41
 8007d6a:	d1c1      	bne.n	8007cf0 <_scanf_float+0x70>
 8007d6c:	2a01      	cmp	r2, #1
 8007d6e:	d1bf      	bne.n	8007cf0 <_scanf_float+0x70>
 8007d70:	2202      	movs	r2, #2
 8007d72:	e046      	b.n	8007e02 <_scanf_float+0x182>
 8007d74:	2b65      	cmp	r3, #101	; 0x65
 8007d76:	d07a      	beq.n	8007e6e <_scanf_float+0x1ee>
 8007d78:	d818      	bhi.n	8007dac <_scanf_float+0x12c>
 8007d7a:	2b54      	cmp	r3, #84	; 0x54
 8007d7c:	d066      	beq.n	8007e4c <_scanf_float+0x1cc>
 8007d7e:	d811      	bhi.n	8007da4 <_scanf_float+0x124>
 8007d80:	2b4e      	cmp	r3, #78	; 0x4e
 8007d82:	d1b5      	bne.n	8007cf0 <_scanf_float+0x70>
 8007d84:	2a00      	cmp	r2, #0
 8007d86:	d146      	bne.n	8007e16 <_scanf_float+0x196>
 8007d88:	f1b9 0f00 	cmp.w	r9, #0
 8007d8c:	d145      	bne.n	8007e1a <_scanf_float+0x19a>
 8007d8e:	6821      	ldr	r1, [r4, #0]
 8007d90:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007d94:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007d98:	d13f      	bne.n	8007e1a <_scanf_float+0x19a>
 8007d9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007d9e:	6021      	str	r1, [r4, #0]
 8007da0:	2201      	movs	r2, #1
 8007da2:	e02e      	b.n	8007e02 <_scanf_float+0x182>
 8007da4:	2b59      	cmp	r3, #89	; 0x59
 8007da6:	d01e      	beq.n	8007de6 <_scanf_float+0x166>
 8007da8:	2b61      	cmp	r3, #97	; 0x61
 8007daa:	e7de      	b.n	8007d6a <_scanf_float+0xea>
 8007dac:	2b6e      	cmp	r3, #110	; 0x6e
 8007dae:	d0e9      	beq.n	8007d84 <_scanf_float+0x104>
 8007db0:	d815      	bhi.n	8007dde <_scanf_float+0x15e>
 8007db2:	2b66      	cmp	r3, #102	; 0x66
 8007db4:	d043      	beq.n	8007e3e <_scanf_float+0x1be>
 8007db6:	2b69      	cmp	r3, #105	; 0x69
 8007db8:	d19a      	bne.n	8007cf0 <_scanf_float+0x70>
 8007dba:	f1bb 0f00 	cmp.w	fp, #0
 8007dbe:	d138      	bne.n	8007e32 <_scanf_float+0x1b2>
 8007dc0:	f1b9 0f00 	cmp.w	r9, #0
 8007dc4:	d197      	bne.n	8007cf6 <_scanf_float+0x76>
 8007dc6:	6821      	ldr	r1, [r4, #0]
 8007dc8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007dcc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007dd0:	d195      	bne.n	8007cfe <_scanf_float+0x7e>
 8007dd2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007dd6:	6021      	str	r1, [r4, #0]
 8007dd8:	f04f 0b01 	mov.w	fp, #1
 8007ddc:	e011      	b.n	8007e02 <_scanf_float+0x182>
 8007dde:	2b74      	cmp	r3, #116	; 0x74
 8007de0:	d034      	beq.n	8007e4c <_scanf_float+0x1cc>
 8007de2:	2b79      	cmp	r3, #121	; 0x79
 8007de4:	d184      	bne.n	8007cf0 <_scanf_float+0x70>
 8007de6:	f1bb 0f07 	cmp.w	fp, #7
 8007dea:	d181      	bne.n	8007cf0 <_scanf_float+0x70>
 8007dec:	f04f 0b08 	mov.w	fp, #8
 8007df0:	e007      	b.n	8007e02 <_scanf_float+0x182>
 8007df2:	eb12 0f0b 	cmn.w	r2, fp
 8007df6:	f47f af7b 	bne.w	8007cf0 <_scanf_float+0x70>
 8007dfa:	6821      	ldr	r1, [r4, #0]
 8007dfc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007e00:	6021      	str	r1, [r4, #0]
 8007e02:	702b      	strb	r3, [r5, #0]
 8007e04:	3501      	adds	r5, #1
 8007e06:	e79a      	b.n	8007d3e <_scanf_float+0xbe>
 8007e08:	6821      	ldr	r1, [r4, #0]
 8007e0a:	0608      	lsls	r0, r1, #24
 8007e0c:	f57f af70 	bpl.w	8007cf0 <_scanf_float+0x70>
 8007e10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007e14:	e7f4      	b.n	8007e00 <_scanf_float+0x180>
 8007e16:	2a02      	cmp	r2, #2
 8007e18:	d047      	beq.n	8007eaa <_scanf_float+0x22a>
 8007e1a:	f1bb 0f01 	cmp.w	fp, #1
 8007e1e:	d003      	beq.n	8007e28 <_scanf_float+0x1a8>
 8007e20:	f1bb 0f04 	cmp.w	fp, #4
 8007e24:	f47f af64 	bne.w	8007cf0 <_scanf_float+0x70>
 8007e28:	f10b 0b01 	add.w	fp, fp, #1
 8007e2c:	fa5f fb8b 	uxtb.w	fp, fp
 8007e30:	e7e7      	b.n	8007e02 <_scanf_float+0x182>
 8007e32:	f1bb 0f03 	cmp.w	fp, #3
 8007e36:	d0f7      	beq.n	8007e28 <_scanf_float+0x1a8>
 8007e38:	f1bb 0f05 	cmp.w	fp, #5
 8007e3c:	e7f2      	b.n	8007e24 <_scanf_float+0x1a4>
 8007e3e:	f1bb 0f02 	cmp.w	fp, #2
 8007e42:	f47f af55 	bne.w	8007cf0 <_scanf_float+0x70>
 8007e46:	f04f 0b03 	mov.w	fp, #3
 8007e4a:	e7da      	b.n	8007e02 <_scanf_float+0x182>
 8007e4c:	f1bb 0f06 	cmp.w	fp, #6
 8007e50:	f47f af4e 	bne.w	8007cf0 <_scanf_float+0x70>
 8007e54:	f04f 0b07 	mov.w	fp, #7
 8007e58:	e7d3      	b.n	8007e02 <_scanf_float+0x182>
 8007e5a:	6821      	ldr	r1, [r4, #0]
 8007e5c:	0588      	lsls	r0, r1, #22
 8007e5e:	f57f af47 	bpl.w	8007cf0 <_scanf_float+0x70>
 8007e62:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007e66:	6021      	str	r1, [r4, #0]
 8007e68:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e6c:	e7c9      	b.n	8007e02 <_scanf_float+0x182>
 8007e6e:	6821      	ldr	r1, [r4, #0]
 8007e70:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007e74:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007e78:	d006      	beq.n	8007e88 <_scanf_float+0x208>
 8007e7a:	0548      	lsls	r0, r1, #21
 8007e7c:	f57f af38 	bpl.w	8007cf0 <_scanf_float+0x70>
 8007e80:	f1b9 0f00 	cmp.w	r9, #0
 8007e84:	f43f af3b 	beq.w	8007cfe <_scanf_float+0x7e>
 8007e88:	0588      	lsls	r0, r1, #22
 8007e8a:	bf58      	it	pl
 8007e8c:	9802      	ldrpl	r0, [sp, #8]
 8007e8e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007e92:	bf58      	it	pl
 8007e94:	eba9 0000 	subpl.w	r0, r9, r0
 8007e98:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007e9c:	bf58      	it	pl
 8007e9e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007ea2:	6021      	str	r1, [r4, #0]
 8007ea4:	f04f 0900 	mov.w	r9, #0
 8007ea8:	e7ab      	b.n	8007e02 <_scanf_float+0x182>
 8007eaa:	2203      	movs	r2, #3
 8007eac:	e7a9      	b.n	8007e02 <_scanf_float+0x182>
 8007eae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007eb2:	9205      	str	r2, [sp, #20]
 8007eb4:	4631      	mov	r1, r6
 8007eb6:	4638      	mov	r0, r7
 8007eb8:	4798      	blx	r3
 8007eba:	9a05      	ldr	r2, [sp, #20]
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	f43f af04 	beq.w	8007cca <_scanf_float+0x4a>
 8007ec2:	e715      	b.n	8007cf0 <_scanf_float+0x70>
 8007ec4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ec8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007ecc:	4632      	mov	r2, r6
 8007ece:	4638      	mov	r0, r7
 8007ed0:	4798      	blx	r3
 8007ed2:	6923      	ldr	r3, [r4, #16]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	6123      	str	r3, [r4, #16]
 8007ed8:	e715      	b.n	8007d06 <_scanf_float+0x86>
 8007eda:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007ede:	2b06      	cmp	r3, #6
 8007ee0:	d80a      	bhi.n	8007ef8 <_scanf_float+0x278>
 8007ee2:	f1bb 0f02 	cmp.w	fp, #2
 8007ee6:	d968      	bls.n	8007fba <_scanf_float+0x33a>
 8007ee8:	f1ab 0b03 	sub.w	fp, fp, #3
 8007eec:	fa5f fb8b 	uxtb.w	fp, fp
 8007ef0:	eba5 0b0b 	sub.w	fp, r5, fp
 8007ef4:	455d      	cmp	r5, fp
 8007ef6:	d14b      	bne.n	8007f90 <_scanf_float+0x310>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	05da      	lsls	r2, r3, #23
 8007efc:	d51f      	bpl.n	8007f3e <_scanf_float+0x2be>
 8007efe:	055b      	lsls	r3, r3, #21
 8007f00:	d468      	bmi.n	8007fd4 <_scanf_float+0x354>
 8007f02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	2965      	cmp	r1, #101	; 0x65
 8007f0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f0e:	f105 3bff 	add.w	fp, r5, #4294967295
 8007f12:	6123      	str	r3, [r4, #16]
 8007f14:	d00d      	beq.n	8007f32 <_scanf_float+0x2b2>
 8007f16:	2945      	cmp	r1, #69	; 0x45
 8007f18:	d00b      	beq.n	8007f32 <_scanf_float+0x2b2>
 8007f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f1e:	4632      	mov	r2, r6
 8007f20:	4638      	mov	r0, r7
 8007f22:	4798      	blx	r3
 8007f24:	6923      	ldr	r3, [r4, #16]
 8007f26:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	f1a5 0b02 	sub.w	fp, r5, #2
 8007f30:	6123      	str	r3, [r4, #16]
 8007f32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f36:	4632      	mov	r2, r6
 8007f38:	4638      	mov	r0, r7
 8007f3a:	4798      	blx	r3
 8007f3c:	465d      	mov	r5, fp
 8007f3e:	6826      	ldr	r6, [r4, #0]
 8007f40:	f016 0610 	ands.w	r6, r6, #16
 8007f44:	d17a      	bne.n	800803c <_scanf_float+0x3bc>
 8007f46:	702e      	strb	r6, [r5, #0]
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f52:	d142      	bne.n	8007fda <_scanf_float+0x35a>
 8007f54:	9b02      	ldr	r3, [sp, #8]
 8007f56:	eba9 0303 	sub.w	r3, r9, r3
 8007f5a:	425a      	negs	r2, r3
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d149      	bne.n	8007ff4 <_scanf_float+0x374>
 8007f60:	2200      	movs	r2, #0
 8007f62:	4641      	mov	r1, r8
 8007f64:	4638      	mov	r0, r7
 8007f66:	f000 febf 	bl	8008ce8 <_strtod_r>
 8007f6a:	6825      	ldr	r5, [r4, #0]
 8007f6c:	f8da 3000 	ldr.w	r3, [sl]
 8007f70:	f015 0f02 	tst.w	r5, #2
 8007f74:	f103 0204 	add.w	r2, r3, #4
 8007f78:	ec59 8b10 	vmov	r8, r9, d0
 8007f7c:	f8ca 2000 	str.w	r2, [sl]
 8007f80:	d043      	beq.n	800800a <_scanf_float+0x38a>
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	e9c3 8900 	strd	r8, r9, [r3]
 8007f88:	68e3      	ldr	r3, [r4, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60e3      	str	r3, [r4, #12]
 8007f8e:	e6be      	b.n	8007d0e <_scanf_float+0x8e>
 8007f90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007f98:	4632      	mov	r2, r6
 8007f9a:	4638      	mov	r0, r7
 8007f9c:	4798      	blx	r3
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	e7a6      	b.n	8007ef4 <_scanf_float+0x274>
 8007fa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007faa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007fae:	4632      	mov	r2, r6
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	4798      	blx	r3
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	6123      	str	r3, [r4, #16]
 8007fba:	4545      	cmp	r5, r8
 8007fbc:	d8f3      	bhi.n	8007fa6 <_scanf_float+0x326>
 8007fbe:	e6a5      	b.n	8007d0c <_scanf_float+0x8c>
 8007fc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fc4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007fc8:	4632      	mov	r2, r6
 8007fca:	4638      	mov	r0, r7
 8007fcc:	4798      	blx	r3
 8007fce:	6923      	ldr	r3, [r4, #16]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	6123      	str	r3, [r4, #16]
 8007fd4:	4545      	cmp	r5, r8
 8007fd6:	d8f3      	bhi.n	8007fc0 <_scanf_float+0x340>
 8007fd8:	e698      	b.n	8007d0c <_scanf_float+0x8c>
 8007fda:	9b03      	ldr	r3, [sp, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0bf      	beq.n	8007f60 <_scanf_float+0x2e0>
 8007fe0:	9904      	ldr	r1, [sp, #16]
 8007fe2:	230a      	movs	r3, #10
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	3101      	adds	r1, #1
 8007fe8:	4638      	mov	r0, r7
 8007fea:	f000 ff1d 	bl	8008e28 <_strtol_r>
 8007fee:	9b03      	ldr	r3, [sp, #12]
 8007ff0:	9d04      	ldr	r5, [sp, #16]
 8007ff2:	1ac2      	subs	r2, r0, r3
 8007ff4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007ff8:	429d      	cmp	r5, r3
 8007ffa:	bf28      	it	cs
 8007ffc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008000:	490f      	ldr	r1, [pc, #60]	; (8008040 <_scanf_float+0x3c0>)
 8008002:	4628      	mov	r0, r5
 8008004:	f000 f824 	bl	8008050 <siprintf>
 8008008:	e7aa      	b.n	8007f60 <_scanf_float+0x2e0>
 800800a:	f015 0504 	ands.w	r5, r5, #4
 800800e:	d1b8      	bne.n	8007f82 <_scanf_float+0x302>
 8008010:	681f      	ldr	r7, [r3, #0]
 8008012:	ee10 2a10 	vmov	r2, s0
 8008016:	464b      	mov	r3, r9
 8008018:	ee10 0a10 	vmov	r0, s0
 800801c:	4649      	mov	r1, r9
 800801e:	f7f8 fd9d 	bl	8000b5c <__aeabi_dcmpun>
 8008022:	b128      	cbz	r0, 8008030 <_scanf_float+0x3b0>
 8008024:	4628      	mov	r0, r5
 8008026:	f000 f80d 	bl	8008044 <nanf>
 800802a:	ed87 0a00 	vstr	s0, [r7]
 800802e:	e7ab      	b.n	8007f88 <_scanf_float+0x308>
 8008030:	4640      	mov	r0, r8
 8008032:	4649      	mov	r1, r9
 8008034:	f7f8 fdf0 	bl	8000c18 <__aeabi_d2f>
 8008038:	6038      	str	r0, [r7, #0]
 800803a:	e7a5      	b.n	8007f88 <_scanf_float+0x308>
 800803c:	2600      	movs	r6, #0
 800803e:	e666      	b.n	8007d0e <_scanf_float+0x8e>
 8008040:	0800af90 	.word	0x0800af90

08008044 <nanf>:
 8008044:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800804c <nanf+0x8>
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	7fc00000 	.word	0x7fc00000

08008050 <siprintf>:
 8008050:	b40e      	push	{r1, r2, r3}
 8008052:	b500      	push	{lr}
 8008054:	b09c      	sub	sp, #112	; 0x70
 8008056:	ab1d      	add	r3, sp, #116	; 0x74
 8008058:	9002      	str	r0, [sp, #8]
 800805a:	9006      	str	r0, [sp, #24]
 800805c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008060:	4809      	ldr	r0, [pc, #36]	; (8008088 <siprintf+0x38>)
 8008062:	9107      	str	r1, [sp, #28]
 8008064:	9104      	str	r1, [sp, #16]
 8008066:	4909      	ldr	r1, [pc, #36]	; (800808c <siprintf+0x3c>)
 8008068:	f853 2b04 	ldr.w	r2, [r3], #4
 800806c:	9105      	str	r1, [sp, #20]
 800806e:	6800      	ldr	r0, [r0, #0]
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	a902      	add	r1, sp, #8
 8008074:	f002 fdd2 	bl	800ac1c <_svfiprintf_r>
 8008078:	9b02      	ldr	r3, [sp, #8]
 800807a:	2200      	movs	r2, #0
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	b01c      	add	sp, #112	; 0x70
 8008080:	f85d eb04 	ldr.w	lr, [sp], #4
 8008084:	b003      	add	sp, #12
 8008086:	4770      	bx	lr
 8008088:	2000000c 	.word	0x2000000c
 800808c:	ffff0208 	.word	0xffff0208

08008090 <strpbrk>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	7803      	ldrb	r3, [r0, #0]
 8008094:	b1a3      	cbz	r3, 80080c0 <strpbrk+0x30>
 8008096:	4603      	mov	r3, r0
 8008098:	460c      	mov	r4, r1
 800809a:	4618      	mov	r0, r3
 800809c:	f813 5b01 	ldrb.w	r5, [r3], #1
 80080a0:	b14d      	cbz	r5, 80080b6 <strpbrk+0x26>
 80080a2:	460a      	mov	r2, r1
 80080a4:	e001      	b.n	80080aa <strpbrk+0x1a>
 80080a6:	42ae      	cmp	r6, r5
 80080a8:	d005      	beq.n	80080b6 <strpbrk+0x26>
 80080aa:	4614      	mov	r4, r2
 80080ac:	f812 6b01 	ldrb.w	r6, [r2], #1
 80080b0:	2e00      	cmp	r6, #0
 80080b2:	d1f8      	bne.n	80080a6 <strpbrk+0x16>
 80080b4:	e7f1      	b.n	800809a <strpbrk+0xa>
 80080b6:	7823      	ldrb	r3, [r4, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bf08      	it	eq
 80080bc:	2000      	moveq	r0, #0
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	4618      	mov	r0, r3
 80080c2:	e7fc      	b.n	80080be <strpbrk+0x2e>

080080c4 <sulp>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	4604      	mov	r4, r0
 80080c8:	460d      	mov	r5, r1
 80080ca:	ec45 4b10 	vmov	d0, r4, r5
 80080ce:	4616      	mov	r6, r2
 80080d0:	f002 fb60 	bl	800a794 <__ulp>
 80080d4:	ec51 0b10 	vmov	r0, r1, d0
 80080d8:	b17e      	cbz	r6, 80080fa <sulp+0x36>
 80080da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	dd09      	ble.n	80080fa <sulp+0x36>
 80080e6:	051b      	lsls	r3, r3, #20
 80080e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80080ec:	2400      	movs	r4, #0
 80080ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80080f2:	4622      	mov	r2, r4
 80080f4:	462b      	mov	r3, r5
 80080f6:	f7f8 fa97 	bl	8000628 <__aeabi_dmul>
 80080fa:	bd70      	pop	{r4, r5, r6, pc}
 80080fc:	0000      	movs	r0, r0
	...

08008100 <_strtod_l>:
 8008100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	461f      	mov	r7, r3
 8008106:	b0a1      	sub	sp, #132	; 0x84
 8008108:	2300      	movs	r3, #0
 800810a:	4681      	mov	r9, r0
 800810c:	4638      	mov	r0, r7
 800810e:	460e      	mov	r6, r1
 8008110:	9217      	str	r2, [sp, #92]	; 0x5c
 8008112:	931c      	str	r3, [sp, #112]	; 0x70
 8008114:	f002 f83d 	bl	800a192 <__localeconv_l>
 8008118:	4680      	mov	r8, r0
 800811a:	6800      	ldr	r0, [r0, #0]
 800811c:	f7f8 f86a 	bl	80001f4 <strlen>
 8008120:	f04f 0a00 	mov.w	sl, #0
 8008124:	4604      	mov	r4, r0
 8008126:	f04f 0b00 	mov.w	fp, #0
 800812a:	961b      	str	r6, [sp, #108]	; 0x6c
 800812c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800812e:	781a      	ldrb	r2, [r3, #0]
 8008130:	2a0d      	cmp	r2, #13
 8008132:	d832      	bhi.n	800819a <_strtod_l+0x9a>
 8008134:	2a09      	cmp	r2, #9
 8008136:	d236      	bcs.n	80081a6 <_strtod_l+0xa6>
 8008138:	2a00      	cmp	r2, #0
 800813a:	d03e      	beq.n	80081ba <_strtod_l+0xba>
 800813c:	2300      	movs	r3, #0
 800813e:	930d      	str	r3, [sp, #52]	; 0x34
 8008140:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008142:	782b      	ldrb	r3, [r5, #0]
 8008144:	2b30      	cmp	r3, #48	; 0x30
 8008146:	f040 80ac 	bne.w	80082a2 <_strtod_l+0x1a2>
 800814a:	786b      	ldrb	r3, [r5, #1]
 800814c:	2b58      	cmp	r3, #88	; 0x58
 800814e:	d001      	beq.n	8008154 <_strtod_l+0x54>
 8008150:	2b78      	cmp	r3, #120	; 0x78
 8008152:	d167      	bne.n	8008224 <_strtod_l+0x124>
 8008154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	ab1c      	add	r3, sp, #112	; 0x70
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	9702      	str	r7, [sp, #8]
 800815e:	ab1d      	add	r3, sp, #116	; 0x74
 8008160:	4a88      	ldr	r2, [pc, #544]	; (8008384 <_strtod_l+0x284>)
 8008162:	a91b      	add	r1, sp, #108	; 0x6c
 8008164:	4648      	mov	r0, r9
 8008166:	f001 fd3a 	bl	8009bde <__gethex>
 800816a:	f010 0407 	ands.w	r4, r0, #7
 800816e:	4606      	mov	r6, r0
 8008170:	d005      	beq.n	800817e <_strtod_l+0x7e>
 8008172:	2c06      	cmp	r4, #6
 8008174:	d12b      	bne.n	80081ce <_strtod_l+0xce>
 8008176:	3501      	adds	r5, #1
 8008178:	2300      	movs	r3, #0
 800817a:	951b      	str	r5, [sp, #108]	; 0x6c
 800817c:	930d      	str	r3, [sp, #52]	; 0x34
 800817e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008180:	2b00      	cmp	r3, #0
 8008182:	f040 859a 	bne.w	8008cba <_strtod_l+0xbba>
 8008186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008188:	b1e3      	cbz	r3, 80081c4 <_strtod_l+0xc4>
 800818a:	4652      	mov	r2, sl
 800818c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008190:	ec43 2b10 	vmov	d0, r2, r3
 8008194:	b021      	add	sp, #132	; 0x84
 8008196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819a:	2a2b      	cmp	r2, #43	; 0x2b
 800819c:	d015      	beq.n	80081ca <_strtod_l+0xca>
 800819e:	2a2d      	cmp	r2, #45	; 0x2d
 80081a0:	d004      	beq.n	80081ac <_strtod_l+0xac>
 80081a2:	2a20      	cmp	r2, #32
 80081a4:	d1ca      	bne.n	800813c <_strtod_l+0x3c>
 80081a6:	3301      	adds	r3, #1
 80081a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80081aa:	e7bf      	b.n	800812c <_strtod_l+0x2c>
 80081ac:	2201      	movs	r2, #1
 80081ae:	920d      	str	r2, [sp, #52]	; 0x34
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80081b4:	785b      	ldrb	r3, [r3, #1]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1c2      	bne.n	8008140 <_strtod_l+0x40>
 80081ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f040 8579 	bne.w	8008cb6 <_strtod_l+0xbb6>
 80081c4:	4652      	mov	r2, sl
 80081c6:	465b      	mov	r3, fp
 80081c8:	e7e2      	b.n	8008190 <_strtod_l+0x90>
 80081ca:	2200      	movs	r2, #0
 80081cc:	e7ef      	b.n	80081ae <_strtod_l+0xae>
 80081ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80081d0:	b13a      	cbz	r2, 80081e2 <_strtod_l+0xe2>
 80081d2:	2135      	movs	r1, #53	; 0x35
 80081d4:	a81e      	add	r0, sp, #120	; 0x78
 80081d6:	f002 fbd5 	bl	800a984 <__copybits>
 80081da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80081dc:	4648      	mov	r0, r9
 80081de:	f002 f842 	bl	800a266 <_Bfree>
 80081e2:	3c01      	subs	r4, #1
 80081e4:	2c04      	cmp	r4, #4
 80081e6:	d806      	bhi.n	80081f6 <_strtod_l+0xf6>
 80081e8:	e8df f004 	tbb	[pc, r4]
 80081ec:	1714030a 	.word	0x1714030a
 80081f0:	0a          	.byte	0x0a
 80081f1:	00          	.byte	0x00
 80081f2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80081f6:	0730      	lsls	r0, r6, #28
 80081f8:	d5c1      	bpl.n	800817e <_strtod_l+0x7e>
 80081fa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80081fe:	e7be      	b.n	800817e <_strtod_l+0x7e>
 8008200:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008204:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008206:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800820a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800820e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008212:	e7f0      	b.n	80081f6 <_strtod_l+0xf6>
 8008214:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008388 <_strtod_l+0x288>
 8008218:	e7ed      	b.n	80081f6 <_strtod_l+0xf6>
 800821a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800821e:	f04f 3aff 	mov.w	sl, #4294967295
 8008222:	e7e8      	b.n	80081f6 <_strtod_l+0xf6>
 8008224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	921b      	str	r2, [sp, #108]	; 0x6c
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b30      	cmp	r3, #48	; 0x30
 800822e:	d0f9      	beq.n	8008224 <_strtod_l+0x124>
 8008230:	2b00      	cmp	r3, #0
 8008232:	d0a4      	beq.n	800817e <_strtod_l+0x7e>
 8008234:	2301      	movs	r3, #1
 8008236:	2500      	movs	r5, #0
 8008238:	9306      	str	r3, [sp, #24]
 800823a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800823c:	9308      	str	r3, [sp, #32]
 800823e:	9507      	str	r5, [sp, #28]
 8008240:	9505      	str	r5, [sp, #20]
 8008242:	220a      	movs	r2, #10
 8008244:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008246:	7807      	ldrb	r7, [r0, #0]
 8008248:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800824c:	b2d9      	uxtb	r1, r3
 800824e:	2909      	cmp	r1, #9
 8008250:	d929      	bls.n	80082a6 <_strtod_l+0x1a6>
 8008252:	4622      	mov	r2, r4
 8008254:	f8d8 1000 	ldr.w	r1, [r8]
 8008258:	f002 fde8 	bl	800ae2c <strncmp>
 800825c:	2800      	cmp	r0, #0
 800825e:	d031      	beq.n	80082c4 <_strtod_l+0x1c4>
 8008260:	2000      	movs	r0, #0
 8008262:	9c05      	ldr	r4, [sp, #20]
 8008264:	9004      	str	r0, [sp, #16]
 8008266:	463b      	mov	r3, r7
 8008268:	4602      	mov	r2, r0
 800826a:	2b65      	cmp	r3, #101	; 0x65
 800826c:	d001      	beq.n	8008272 <_strtod_l+0x172>
 800826e:	2b45      	cmp	r3, #69	; 0x45
 8008270:	d114      	bne.n	800829c <_strtod_l+0x19c>
 8008272:	b924      	cbnz	r4, 800827e <_strtod_l+0x17e>
 8008274:	b910      	cbnz	r0, 800827c <_strtod_l+0x17c>
 8008276:	9b06      	ldr	r3, [sp, #24]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d09e      	beq.n	80081ba <_strtod_l+0xba>
 800827c:	2400      	movs	r4, #0
 800827e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008280:	1c73      	adds	r3, r6, #1
 8008282:	931b      	str	r3, [sp, #108]	; 0x6c
 8008284:	7873      	ldrb	r3, [r6, #1]
 8008286:	2b2b      	cmp	r3, #43	; 0x2b
 8008288:	d078      	beq.n	800837c <_strtod_l+0x27c>
 800828a:	2b2d      	cmp	r3, #45	; 0x2d
 800828c:	d070      	beq.n	8008370 <_strtod_l+0x270>
 800828e:	f04f 0c00 	mov.w	ip, #0
 8008292:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008296:	2f09      	cmp	r7, #9
 8008298:	d97c      	bls.n	8008394 <_strtod_l+0x294>
 800829a:	961b      	str	r6, [sp, #108]	; 0x6c
 800829c:	f04f 0e00 	mov.w	lr, #0
 80082a0:	e09a      	b.n	80083d8 <_strtod_l+0x2d8>
 80082a2:	2300      	movs	r3, #0
 80082a4:	e7c7      	b.n	8008236 <_strtod_l+0x136>
 80082a6:	9905      	ldr	r1, [sp, #20]
 80082a8:	2908      	cmp	r1, #8
 80082aa:	bfdd      	ittte	le
 80082ac:	9907      	ldrle	r1, [sp, #28]
 80082ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80082b2:	9307      	strle	r3, [sp, #28]
 80082b4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80082b8:	9b05      	ldr	r3, [sp, #20]
 80082ba:	3001      	adds	r0, #1
 80082bc:	3301      	adds	r3, #1
 80082be:	9305      	str	r3, [sp, #20]
 80082c0:	901b      	str	r0, [sp, #108]	; 0x6c
 80082c2:	e7bf      	b.n	8008244 <_strtod_l+0x144>
 80082c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082c6:	191a      	adds	r2, r3, r4
 80082c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80082ca:	9a05      	ldr	r2, [sp, #20]
 80082cc:	5d1b      	ldrb	r3, [r3, r4]
 80082ce:	2a00      	cmp	r2, #0
 80082d0:	d037      	beq.n	8008342 <_strtod_l+0x242>
 80082d2:	9c05      	ldr	r4, [sp, #20]
 80082d4:	4602      	mov	r2, r0
 80082d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80082da:	2909      	cmp	r1, #9
 80082dc:	d913      	bls.n	8008306 <_strtod_l+0x206>
 80082de:	2101      	movs	r1, #1
 80082e0:	9104      	str	r1, [sp, #16]
 80082e2:	e7c2      	b.n	800826a <_strtod_l+0x16a>
 80082e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082e6:	1c5a      	adds	r2, r3, #1
 80082e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80082ea:	785b      	ldrb	r3, [r3, #1]
 80082ec:	3001      	adds	r0, #1
 80082ee:	2b30      	cmp	r3, #48	; 0x30
 80082f0:	d0f8      	beq.n	80082e4 <_strtod_l+0x1e4>
 80082f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80082f6:	2a08      	cmp	r2, #8
 80082f8:	f200 84e4 	bhi.w	8008cc4 <_strtod_l+0xbc4>
 80082fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80082fe:	9208      	str	r2, [sp, #32]
 8008300:	4602      	mov	r2, r0
 8008302:	2000      	movs	r0, #0
 8008304:	4604      	mov	r4, r0
 8008306:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800830a:	f100 0101 	add.w	r1, r0, #1
 800830e:	d012      	beq.n	8008336 <_strtod_l+0x236>
 8008310:	440a      	add	r2, r1
 8008312:	eb00 0c04 	add.w	ip, r0, r4
 8008316:	4621      	mov	r1, r4
 8008318:	270a      	movs	r7, #10
 800831a:	458c      	cmp	ip, r1
 800831c:	d113      	bne.n	8008346 <_strtod_l+0x246>
 800831e:	1821      	adds	r1, r4, r0
 8008320:	2908      	cmp	r1, #8
 8008322:	f104 0401 	add.w	r4, r4, #1
 8008326:	4404      	add	r4, r0
 8008328:	dc19      	bgt.n	800835e <_strtod_l+0x25e>
 800832a:	9b07      	ldr	r3, [sp, #28]
 800832c:	210a      	movs	r1, #10
 800832e:	fb01 e303 	mla	r3, r1, r3, lr
 8008332:	9307      	str	r3, [sp, #28]
 8008334:	2100      	movs	r1, #0
 8008336:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008338:	1c58      	adds	r0, r3, #1
 800833a:	901b      	str	r0, [sp, #108]	; 0x6c
 800833c:	785b      	ldrb	r3, [r3, #1]
 800833e:	4608      	mov	r0, r1
 8008340:	e7c9      	b.n	80082d6 <_strtod_l+0x1d6>
 8008342:	9805      	ldr	r0, [sp, #20]
 8008344:	e7d3      	b.n	80082ee <_strtod_l+0x1ee>
 8008346:	2908      	cmp	r1, #8
 8008348:	f101 0101 	add.w	r1, r1, #1
 800834c:	dc03      	bgt.n	8008356 <_strtod_l+0x256>
 800834e:	9b07      	ldr	r3, [sp, #28]
 8008350:	437b      	muls	r3, r7
 8008352:	9307      	str	r3, [sp, #28]
 8008354:	e7e1      	b.n	800831a <_strtod_l+0x21a>
 8008356:	2910      	cmp	r1, #16
 8008358:	bfd8      	it	le
 800835a:	437d      	mulle	r5, r7
 800835c:	e7dd      	b.n	800831a <_strtod_l+0x21a>
 800835e:	2c10      	cmp	r4, #16
 8008360:	bfdc      	itt	le
 8008362:	210a      	movle	r1, #10
 8008364:	fb01 e505 	mlale	r5, r1, r5, lr
 8008368:	e7e4      	b.n	8008334 <_strtod_l+0x234>
 800836a:	2301      	movs	r3, #1
 800836c:	9304      	str	r3, [sp, #16]
 800836e:	e781      	b.n	8008274 <_strtod_l+0x174>
 8008370:	f04f 0c01 	mov.w	ip, #1
 8008374:	1cb3      	adds	r3, r6, #2
 8008376:	931b      	str	r3, [sp, #108]	; 0x6c
 8008378:	78b3      	ldrb	r3, [r6, #2]
 800837a:	e78a      	b.n	8008292 <_strtod_l+0x192>
 800837c:	f04f 0c00 	mov.w	ip, #0
 8008380:	e7f8      	b.n	8008374 <_strtod_l+0x274>
 8008382:	bf00      	nop
 8008384:	0800af98 	.word	0x0800af98
 8008388:	7ff00000 	.word	0x7ff00000
 800838c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800838e:	1c5f      	adds	r7, r3, #1
 8008390:	971b      	str	r7, [sp, #108]	; 0x6c
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	2b30      	cmp	r3, #48	; 0x30
 8008396:	d0f9      	beq.n	800838c <_strtod_l+0x28c>
 8008398:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800839c:	2f08      	cmp	r7, #8
 800839e:	f63f af7d 	bhi.w	800829c <_strtod_l+0x19c>
 80083a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80083a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083a8:	930a      	str	r3, [sp, #40]	; 0x28
 80083aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083ac:	1c5f      	adds	r7, r3, #1
 80083ae:	971b      	str	r7, [sp, #108]	; 0x6c
 80083b0:	785b      	ldrb	r3, [r3, #1]
 80083b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80083b6:	f1b8 0f09 	cmp.w	r8, #9
 80083ba:	d937      	bls.n	800842c <_strtod_l+0x32c>
 80083bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083be:	1a7f      	subs	r7, r7, r1
 80083c0:	2f08      	cmp	r7, #8
 80083c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80083c6:	dc37      	bgt.n	8008438 <_strtod_l+0x338>
 80083c8:	45be      	cmp	lr, r7
 80083ca:	bfa8      	it	ge
 80083cc:	46be      	movge	lr, r7
 80083ce:	f1bc 0f00 	cmp.w	ip, #0
 80083d2:	d001      	beq.n	80083d8 <_strtod_l+0x2d8>
 80083d4:	f1ce 0e00 	rsb	lr, lr, #0
 80083d8:	2c00      	cmp	r4, #0
 80083da:	d151      	bne.n	8008480 <_strtod_l+0x380>
 80083dc:	2800      	cmp	r0, #0
 80083de:	f47f aece 	bne.w	800817e <_strtod_l+0x7e>
 80083e2:	9a06      	ldr	r2, [sp, #24]
 80083e4:	2a00      	cmp	r2, #0
 80083e6:	f47f aeca 	bne.w	800817e <_strtod_l+0x7e>
 80083ea:	9a04      	ldr	r2, [sp, #16]
 80083ec:	2a00      	cmp	r2, #0
 80083ee:	f47f aee4 	bne.w	80081ba <_strtod_l+0xba>
 80083f2:	2b4e      	cmp	r3, #78	; 0x4e
 80083f4:	d027      	beq.n	8008446 <_strtod_l+0x346>
 80083f6:	dc21      	bgt.n	800843c <_strtod_l+0x33c>
 80083f8:	2b49      	cmp	r3, #73	; 0x49
 80083fa:	f47f aede 	bne.w	80081ba <_strtod_l+0xba>
 80083fe:	49a0      	ldr	r1, [pc, #640]	; (8008680 <_strtod_l+0x580>)
 8008400:	a81b      	add	r0, sp, #108	; 0x6c
 8008402:	f001 fe1f 	bl	800a044 <__match>
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f aed7 	beq.w	80081ba <_strtod_l+0xba>
 800840c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800840e:	499d      	ldr	r1, [pc, #628]	; (8008684 <_strtod_l+0x584>)
 8008410:	3b01      	subs	r3, #1
 8008412:	a81b      	add	r0, sp, #108	; 0x6c
 8008414:	931b      	str	r3, [sp, #108]	; 0x6c
 8008416:	f001 fe15 	bl	800a044 <__match>
 800841a:	b910      	cbnz	r0, 8008422 <_strtod_l+0x322>
 800841c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800841e:	3301      	adds	r3, #1
 8008420:	931b      	str	r3, [sp, #108]	; 0x6c
 8008422:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008698 <_strtod_l+0x598>
 8008426:	f04f 0a00 	mov.w	sl, #0
 800842a:	e6a8      	b.n	800817e <_strtod_l+0x7e>
 800842c:	210a      	movs	r1, #10
 800842e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008432:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008436:	e7b8      	b.n	80083aa <_strtod_l+0x2aa>
 8008438:	46be      	mov	lr, r7
 800843a:	e7c8      	b.n	80083ce <_strtod_l+0x2ce>
 800843c:	2b69      	cmp	r3, #105	; 0x69
 800843e:	d0de      	beq.n	80083fe <_strtod_l+0x2fe>
 8008440:	2b6e      	cmp	r3, #110	; 0x6e
 8008442:	f47f aeba 	bne.w	80081ba <_strtod_l+0xba>
 8008446:	4990      	ldr	r1, [pc, #576]	; (8008688 <_strtod_l+0x588>)
 8008448:	a81b      	add	r0, sp, #108	; 0x6c
 800844a:	f001 fdfb 	bl	800a044 <__match>
 800844e:	2800      	cmp	r0, #0
 8008450:	f43f aeb3 	beq.w	80081ba <_strtod_l+0xba>
 8008454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2b28      	cmp	r3, #40	; 0x28
 800845a:	d10e      	bne.n	800847a <_strtod_l+0x37a>
 800845c:	aa1e      	add	r2, sp, #120	; 0x78
 800845e:	498b      	ldr	r1, [pc, #556]	; (800868c <_strtod_l+0x58c>)
 8008460:	a81b      	add	r0, sp, #108	; 0x6c
 8008462:	f001 fe03 	bl	800a06c <__hexnan>
 8008466:	2805      	cmp	r0, #5
 8008468:	d107      	bne.n	800847a <_strtod_l+0x37a>
 800846a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800846c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008470:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008474:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008478:	e681      	b.n	800817e <_strtod_l+0x7e>
 800847a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80086a0 <_strtod_l+0x5a0>
 800847e:	e7d2      	b.n	8008426 <_strtod_l+0x326>
 8008480:	ebae 0302 	sub.w	r3, lr, r2
 8008484:	9306      	str	r3, [sp, #24]
 8008486:	9b05      	ldr	r3, [sp, #20]
 8008488:	9807      	ldr	r0, [sp, #28]
 800848a:	2b00      	cmp	r3, #0
 800848c:	bf08      	it	eq
 800848e:	4623      	moveq	r3, r4
 8008490:	2c10      	cmp	r4, #16
 8008492:	9305      	str	r3, [sp, #20]
 8008494:	46a0      	mov	r8, r4
 8008496:	bfa8      	it	ge
 8008498:	f04f 0810 	movge.w	r8, #16
 800849c:	f7f8 f84a 	bl	8000534 <__aeabi_ui2d>
 80084a0:	2c09      	cmp	r4, #9
 80084a2:	4682      	mov	sl, r0
 80084a4:	468b      	mov	fp, r1
 80084a6:	dc13      	bgt.n	80084d0 <_strtod_l+0x3d0>
 80084a8:	9b06      	ldr	r3, [sp, #24]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f43f ae67 	beq.w	800817e <_strtod_l+0x7e>
 80084b0:	9b06      	ldr	r3, [sp, #24]
 80084b2:	dd7a      	ble.n	80085aa <_strtod_l+0x4aa>
 80084b4:	2b16      	cmp	r3, #22
 80084b6:	dc61      	bgt.n	800857c <_strtod_l+0x47c>
 80084b8:	4a75      	ldr	r2, [pc, #468]	; (8008690 <_strtod_l+0x590>)
 80084ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80084be:	e9de 0100 	ldrd	r0, r1, [lr]
 80084c2:	4652      	mov	r2, sl
 80084c4:	465b      	mov	r3, fp
 80084c6:	f7f8 f8af 	bl	8000628 <__aeabi_dmul>
 80084ca:	4682      	mov	sl, r0
 80084cc:	468b      	mov	fp, r1
 80084ce:	e656      	b.n	800817e <_strtod_l+0x7e>
 80084d0:	4b6f      	ldr	r3, [pc, #444]	; (8008690 <_strtod_l+0x590>)
 80084d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80084d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80084da:	f7f8 f8a5 	bl	8000628 <__aeabi_dmul>
 80084de:	4606      	mov	r6, r0
 80084e0:	4628      	mov	r0, r5
 80084e2:	460f      	mov	r7, r1
 80084e4:	f7f8 f826 	bl	8000534 <__aeabi_ui2d>
 80084e8:	4602      	mov	r2, r0
 80084ea:	460b      	mov	r3, r1
 80084ec:	4630      	mov	r0, r6
 80084ee:	4639      	mov	r1, r7
 80084f0:	f7f7 fee4 	bl	80002bc <__adddf3>
 80084f4:	2c0f      	cmp	r4, #15
 80084f6:	4682      	mov	sl, r0
 80084f8:	468b      	mov	fp, r1
 80084fa:	ddd5      	ble.n	80084a8 <_strtod_l+0x3a8>
 80084fc:	9b06      	ldr	r3, [sp, #24]
 80084fe:	eba4 0808 	sub.w	r8, r4, r8
 8008502:	4498      	add	r8, r3
 8008504:	f1b8 0f00 	cmp.w	r8, #0
 8008508:	f340 8096 	ble.w	8008638 <_strtod_l+0x538>
 800850c:	f018 030f 	ands.w	r3, r8, #15
 8008510:	d00a      	beq.n	8008528 <_strtod_l+0x428>
 8008512:	495f      	ldr	r1, [pc, #380]	; (8008690 <_strtod_l+0x590>)
 8008514:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008518:	4652      	mov	r2, sl
 800851a:	465b      	mov	r3, fp
 800851c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008520:	f7f8 f882 	bl	8000628 <__aeabi_dmul>
 8008524:	4682      	mov	sl, r0
 8008526:	468b      	mov	fp, r1
 8008528:	f038 080f 	bics.w	r8, r8, #15
 800852c:	d073      	beq.n	8008616 <_strtod_l+0x516>
 800852e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008532:	dd47      	ble.n	80085c4 <_strtod_l+0x4c4>
 8008534:	2400      	movs	r4, #0
 8008536:	46a0      	mov	r8, r4
 8008538:	9407      	str	r4, [sp, #28]
 800853a:	9405      	str	r4, [sp, #20]
 800853c:	2322      	movs	r3, #34	; 0x22
 800853e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008698 <_strtod_l+0x598>
 8008542:	f8c9 3000 	str.w	r3, [r9]
 8008546:	f04f 0a00 	mov.w	sl, #0
 800854a:	9b07      	ldr	r3, [sp, #28]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f43f ae16 	beq.w	800817e <_strtod_l+0x7e>
 8008552:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008554:	4648      	mov	r0, r9
 8008556:	f001 fe86 	bl	800a266 <_Bfree>
 800855a:	9905      	ldr	r1, [sp, #20]
 800855c:	4648      	mov	r0, r9
 800855e:	f001 fe82 	bl	800a266 <_Bfree>
 8008562:	4641      	mov	r1, r8
 8008564:	4648      	mov	r0, r9
 8008566:	f001 fe7e 	bl	800a266 <_Bfree>
 800856a:	9907      	ldr	r1, [sp, #28]
 800856c:	4648      	mov	r0, r9
 800856e:	f001 fe7a 	bl	800a266 <_Bfree>
 8008572:	4621      	mov	r1, r4
 8008574:	4648      	mov	r0, r9
 8008576:	f001 fe76 	bl	800a266 <_Bfree>
 800857a:	e600      	b.n	800817e <_strtod_l+0x7e>
 800857c:	9a06      	ldr	r2, [sp, #24]
 800857e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008582:	4293      	cmp	r3, r2
 8008584:	dbba      	blt.n	80084fc <_strtod_l+0x3fc>
 8008586:	4d42      	ldr	r5, [pc, #264]	; (8008690 <_strtod_l+0x590>)
 8008588:	f1c4 040f 	rsb	r4, r4, #15
 800858c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008590:	4652      	mov	r2, sl
 8008592:	465b      	mov	r3, fp
 8008594:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008598:	f7f8 f846 	bl	8000628 <__aeabi_dmul>
 800859c:	9b06      	ldr	r3, [sp, #24]
 800859e:	1b1c      	subs	r4, r3, r4
 80085a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80085a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085a8:	e78d      	b.n	80084c6 <_strtod_l+0x3c6>
 80085aa:	f113 0f16 	cmn.w	r3, #22
 80085ae:	dba5      	blt.n	80084fc <_strtod_l+0x3fc>
 80085b0:	4a37      	ldr	r2, [pc, #220]	; (8008690 <_strtod_l+0x590>)
 80085b2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80085b6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80085ba:	4650      	mov	r0, sl
 80085bc:	4659      	mov	r1, fp
 80085be:	f7f8 f95d 	bl	800087c <__aeabi_ddiv>
 80085c2:	e782      	b.n	80084ca <_strtod_l+0x3ca>
 80085c4:	2300      	movs	r3, #0
 80085c6:	4e33      	ldr	r6, [pc, #204]	; (8008694 <_strtod_l+0x594>)
 80085c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80085cc:	4650      	mov	r0, sl
 80085ce:	4659      	mov	r1, fp
 80085d0:	461d      	mov	r5, r3
 80085d2:	f1b8 0f01 	cmp.w	r8, #1
 80085d6:	dc21      	bgt.n	800861c <_strtod_l+0x51c>
 80085d8:	b10b      	cbz	r3, 80085de <_strtod_l+0x4de>
 80085da:	4682      	mov	sl, r0
 80085dc:	468b      	mov	fp, r1
 80085de:	4b2d      	ldr	r3, [pc, #180]	; (8008694 <_strtod_l+0x594>)
 80085e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80085e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80085e8:	4652      	mov	r2, sl
 80085ea:	465b      	mov	r3, fp
 80085ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80085f0:	f7f8 f81a 	bl	8000628 <__aeabi_dmul>
 80085f4:	4b28      	ldr	r3, [pc, #160]	; (8008698 <_strtod_l+0x598>)
 80085f6:	460a      	mov	r2, r1
 80085f8:	400b      	ands	r3, r1
 80085fa:	4928      	ldr	r1, [pc, #160]	; (800869c <_strtod_l+0x59c>)
 80085fc:	428b      	cmp	r3, r1
 80085fe:	4682      	mov	sl, r0
 8008600:	d898      	bhi.n	8008534 <_strtod_l+0x434>
 8008602:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008606:	428b      	cmp	r3, r1
 8008608:	bf86      	itte	hi
 800860a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80086a4 <_strtod_l+0x5a4>
 800860e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008612:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008616:	2300      	movs	r3, #0
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	e077      	b.n	800870c <_strtod_l+0x60c>
 800861c:	f018 0f01 	tst.w	r8, #1
 8008620:	d006      	beq.n	8008630 <_strtod_l+0x530>
 8008622:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f7f7 fffd 	bl	8000628 <__aeabi_dmul>
 800862e:	2301      	movs	r3, #1
 8008630:	3501      	adds	r5, #1
 8008632:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008636:	e7cc      	b.n	80085d2 <_strtod_l+0x4d2>
 8008638:	d0ed      	beq.n	8008616 <_strtod_l+0x516>
 800863a:	f1c8 0800 	rsb	r8, r8, #0
 800863e:	f018 020f 	ands.w	r2, r8, #15
 8008642:	d00a      	beq.n	800865a <_strtod_l+0x55a>
 8008644:	4b12      	ldr	r3, [pc, #72]	; (8008690 <_strtod_l+0x590>)
 8008646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800864a:	4650      	mov	r0, sl
 800864c:	4659      	mov	r1, fp
 800864e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008652:	f7f8 f913 	bl	800087c <__aeabi_ddiv>
 8008656:	4682      	mov	sl, r0
 8008658:	468b      	mov	fp, r1
 800865a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800865e:	d0da      	beq.n	8008616 <_strtod_l+0x516>
 8008660:	f1b8 0f1f 	cmp.w	r8, #31
 8008664:	dd20      	ble.n	80086a8 <_strtod_l+0x5a8>
 8008666:	2400      	movs	r4, #0
 8008668:	46a0      	mov	r8, r4
 800866a:	9407      	str	r4, [sp, #28]
 800866c:	9405      	str	r4, [sp, #20]
 800866e:	2322      	movs	r3, #34	; 0x22
 8008670:	f04f 0a00 	mov.w	sl, #0
 8008674:	f04f 0b00 	mov.w	fp, #0
 8008678:	f8c9 3000 	str.w	r3, [r9]
 800867c:	e765      	b.n	800854a <_strtod_l+0x44a>
 800867e:	bf00      	nop
 8008680:	0800af61 	.word	0x0800af61
 8008684:	0800afeb 	.word	0x0800afeb
 8008688:	0800af69 	.word	0x0800af69
 800868c:	0800afac 	.word	0x0800afac
 8008690:	0800b028 	.word	0x0800b028
 8008694:	0800b000 	.word	0x0800b000
 8008698:	7ff00000 	.word	0x7ff00000
 800869c:	7ca00000 	.word	0x7ca00000
 80086a0:	fff80000 	.word	0xfff80000
 80086a4:	7fefffff 	.word	0x7fefffff
 80086a8:	f018 0310 	ands.w	r3, r8, #16
 80086ac:	bf18      	it	ne
 80086ae:	236a      	movne	r3, #106	; 0x6a
 80086b0:	4da0      	ldr	r5, [pc, #640]	; (8008934 <_strtod_l+0x834>)
 80086b2:	9304      	str	r3, [sp, #16]
 80086b4:	4650      	mov	r0, sl
 80086b6:	4659      	mov	r1, fp
 80086b8:	2300      	movs	r3, #0
 80086ba:	f1b8 0f00 	cmp.w	r8, #0
 80086be:	f300 810a 	bgt.w	80088d6 <_strtod_l+0x7d6>
 80086c2:	b10b      	cbz	r3, 80086c8 <_strtod_l+0x5c8>
 80086c4:	4682      	mov	sl, r0
 80086c6:	468b      	mov	fp, r1
 80086c8:	9b04      	ldr	r3, [sp, #16]
 80086ca:	b1bb      	cbz	r3, 80086fc <_strtod_l+0x5fc>
 80086cc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80086d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	4659      	mov	r1, fp
 80086d8:	dd10      	ble.n	80086fc <_strtod_l+0x5fc>
 80086da:	2b1f      	cmp	r3, #31
 80086dc:	f340 8107 	ble.w	80088ee <_strtod_l+0x7ee>
 80086e0:	2b34      	cmp	r3, #52	; 0x34
 80086e2:	bfde      	ittt	le
 80086e4:	3b20      	suble	r3, #32
 80086e6:	f04f 32ff 	movle.w	r2, #4294967295
 80086ea:	fa02 f303 	lslle.w	r3, r2, r3
 80086ee:	f04f 0a00 	mov.w	sl, #0
 80086f2:	bfcc      	ite	gt
 80086f4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80086f8:	ea03 0b01 	andle.w	fp, r3, r1
 80086fc:	2200      	movs	r2, #0
 80086fe:	2300      	movs	r3, #0
 8008700:	4650      	mov	r0, sl
 8008702:	4659      	mov	r1, fp
 8008704:	f7f8 f9f8 	bl	8000af8 <__aeabi_dcmpeq>
 8008708:	2800      	cmp	r0, #0
 800870a:	d1ac      	bne.n	8008666 <_strtod_l+0x566>
 800870c:	9b07      	ldr	r3, [sp, #28]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	9a05      	ldr	r2, [sp, #20]
 8008712:	9908      	ldr	r1, [sp, #32]
 8008714:	4623      	mov	r3, r4
 8008716:	4648      	mov	r0, r9
 8008718:	f001 fdf7 	bl	800a30a <__s2b>
 800871c:	9007      	str	r0, [sp, #28]
 800871e:	2800      	cmp	r0, #0
 8008720:	f43f af08 	beq.w	8008534 <_strtod_l+0x434>
 8008724:	9a06      	ldr	r2, [sp, #24]
 8008726:	9b06      	ldr	r3, [sp, #24]
 8008728:	2a00      	cmp	r2, #0
 800872a:	f1c3 0300 	rsb	r3, r3, #0
 800872e:	bfa8      	it	ge
 8008730:	2300      	movge	r3, #0
 8008732:	930e      	str	r3, [sp, #56]	; 0x38
 8008734:	2400      	movs	r4, #0
 8008736:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800873a:	9316      	str	r3, [sp, #88]	; 0x58
 800873c:	46a0      	mov	r8, r4
 800873e:	9b07      	ldr	r3, [sp, #28]
 8008740:	4648      	mov	r0, r9
 8008742:	6859      	ldr	r1, [r3, #4]
 8008744:	f001 fd5b 	bl	800a1fe <_Balloc>
 8008748:	9005      	str	r0, [sp, #20]
 800874a:	2800      	cmp	r0, #0
 800874c:	f43f aef6 	beq.w	800853c <_strtod_l+0x43c>
 8008750:	9b07      	ldr	r3, [sp, #28]
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	3202      	adds	r2, #2
 8008756:	f103 010c 	add.w	r1, r3, #12
 800875a:	0092      	lsls	r2, r2, #2
 800875c:	300c      	adds	r0, #12
 800875e:	f001 fd43 	bl	800a1e8 <memcpy>
 8008762:	aa1e      	add	r2, sp, #120	; 0x78
 8008764:	a91d      	add	r1, sp, #116	; 0x74
 8008766:	ec4b ab10 	vmov	d0, sl, fp
 800876a:	4648      	mov	r0, r9
 800876c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008770:	f002 f886 	bl	800a880 <__d2b>
 8008774:	901c      	str	r0, [sp, #112]	; 0x70
 8008776:	2800      	cmp	r0, #0
 8008778:	f43f aee0 	beq.w	800853c <_strtod_l+0x43c>
 800877c:	2101      	movs	r1, #1
 800877e:	4648      	mov	r0, r9
 8008780:	f001 fe4f 	bl	800a422 <__i2b>
 8008784:	4680      	mov	r8, r0
 8008786:	2800      	cmp	r0, #0
 8008788:	f43f aed8 	beq.w	800853c <_strtod_l+0x43c>
 800878c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800878e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008790:	2e00      	cmp	r6, #0
 8008792:	bfab      	itete	ge
 8008794:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008796:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008798:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800879a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800879c:	bfac      	ite	ge
 800879e:	18f7      	addge	r7, r6, r3
 80087a0:	1b9d      	sublt	r5, r3, r6
 80087a2:	9b04      	ldr	r3, [sp, #16]
 80087a4:	1af6      	subs	r6, r6, r3
 80087a6:	4416      	add	r6, r2
 80087a8:	4b63      	ldr	r3, [pc, #396]	; (8008938 <_strtod_l+0x838>)
 80087aa:	3e01      	subs	r6, #1
 80087ac:	429e      	cmp	r6, r3
 80087ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80087b2:	f280 80af 	bge.w	8008914 <_strtod_l+0x814>
 80087b6:	1b9b      	subs	r3, r3, r6
 80087b8:	2b1f      	cmp	r3, #31
 80087ba:	eba2 0203 	sub.w	r2, r2, r3
 80087be:	f04f 0101 	mov.w	r1, #1
 80087c2:	f300 809b 	bgt.w	80088fc <_strtod_l+0x7fc>
 80087c6:	fa01 f303 	lsl.w	r3, r1, r3
 80087ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80087cc:	2300      	movs	r3, #0
 80087ce:	930a      	str	r3, [sp, #40]	; 0x28
 80087d0:	18be      	adds	r6, r7, r2
 80087d2:	9b04      	ldr	r3, [sp, #16]
 80087d4:	42b7      	cmp	r7, r6
 80087d6:	4415      	add	r5, r2
 80087d8:	441d      	add	r5, r3
 80087da:	463b      	mov	r3, r7
 80087dc:	bfa8      	it	ge
 80087de:	4633      	movge	r3, r6
 80087e0:	42ab      	cmp	r3, r5
 80087e2:	bfa8      	it	ge
 80087e4:	462b      	movge	r3, r5
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bfc2      	ittt	gt
 80087ea:	1af6      	subgt	r6, r6, r3
 80087ec:	1aed      	subgt	r5, r5, r3
 80087ee:	1aff      	subgt	r7, r7, r3
 80087f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087f2:	b1bb      	cbz	r3, 8008824 <_strtod_l+0x724>
 80087f4:	4641      	mov	r1, r8
 80087f6:	461a      	mov	r2, r3
 80087f8:	4648      	mov	r0, r9
 80087fa:	f001 feb1 	bl	800a560 <__pow5mult>
 80087fe:	4680      	mov	r8, r0
 8008800:	2800      	cmp	r0, #0
 8008802:	f43f ae9b 	beq.w	800853c <_strtod_l+0x43c>
 8008806:	4601      	mov	r1, r0
 8008808:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800880a:	4648      	mov	r0, r9
 800880c:	f001 fe12 	bl	800a434 <__multiply>
 8008810:	900c      	str	r0, [sp, #48]	; 0x30
 8008812:	2800      	cmp	r0, #0
 8008814:	f43f ae92 	beq.w	800853c <_strtod_l+0x43c>
 8008818:	991c      	ldr	r1, [sp, #112]	; 0x70
 800881a:	4648      	mov	r0, r9
 800881c:	f001 fd23 	bl	800a266 <_Bfree>
 8008820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008822:	931c      	str	r3, [sp, #112]	; 0x70
 8008824:	2e00      	cmp	r6, #0
 8008826:	dc7a      	bgt.n	800891e <_strtod_l+0x81e>
 8008828:	9b06      	ldr	r3, [sp, #24]
 800882a:	2b00      	cmp	r3, #0
 800882c:	dd08      	ble.n	8008840 <_strtod_l+0x740>
 800882e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008830:	9905      	ldr	r1, [sp, #20]
 8008832:	4648      	mov	r0, r9
 8008834:	f001 fe94 	bl	800a560 <__pow5mult>
 8008838:	9005      	str	r0, [sp, #20]
 800883a:	2800      	cmp	r0, #0
 800883c:	f43f ae7e 	beq.w	800853c <_strtod_l+0x43c>
 8008840:	2d00      	cmp	r5, #0
 8008842:	dd08      	ble.n	8008856 <_strtod_l+0x756>
 8008844:	462a      	mov	r2, r5
 8008846:	9905      	ldr	r1, [sp, #20]
 8008848:	4648      	mov	r0, r9
 800884a:	f001 fed7 	bl	800a5fc <__lshift>
 800884e:	9005      	str	r0, [sp, #20]
 8008850:	2800      	cmp	r0, #0
 8008852:	f43f ae73 	beq.w	800853c <_strtod_l+0x43c>
 8008856:	2f00      	cmp	r7, #0
 8008858:	dd08      	ble.n	800886c <_strtod_l+0x76c>
 800885a:	4641      	mov	r1, r8
 800885c:	463a      	mov	r2, r7
 800885e:	4648      	mov	r0, r9
 8008860:	f001 fecc 	bl	800a5fc <__lshift>
 8008864:	4680      	mov	r8, r0
 8008866:	2800      	cmp	r0, #0
 8008868:	f43f ae68 	beq.w	800853c <_strtod_l+0x43c>
 800886c:	9a05      	ldr	r2, [sp, #20]
 800886e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008870:	4648      	mov	r0, r9
 8008872:	f001 ff31 	bl	800a6d8 <__mdiff>
 8008876:	4604      	mov	r4, r0
 8008878:	2800      	cmp	r0, #0
 800887a:	f43f ae5f 	beq.w	800853c <_strtod_l+0x43c>
 800887e:	68c3      	ldr	r3, [r0, #12]
 8008880:	930c      	str	r3, [sp, #48]	; 0x30
 8008882:	2300      	movs	r3, #0
 8008884:	60c3      	str	r3, [r0, #12]
 8008886:	4641      	mov	r1, r8
 8008888:	f001 ff0c 	bl	800a6a4 <__mcmp>
 800888c:	2800      	cmp	r0, #0
 800888e:	da55      	bge.n	800893c <_strtod_l+0x83c>
 8008890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008892:	b9e3      	cbnz	r3, 80088ce <_strtod_l+0x7ce>
 8008894:	f1ba 0f00 	cmp.w	sl, #0
 8008898:	d119      	bne.n	80088ce <_strtod_l+0x7ce>
 800889a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800889e:	b9b3      	cbnz	r3, 80088ce <_strtod_l+0x7ce>
 80088a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80088a4:	0d1b      	lsrs	r3, r3, #20
 80088a6:	051b      	lsls	r3, r3, #20
 80088a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80088ac:	d90f      	bls.n	80088ce <_strtod_l+0x7ce>
 80088ae:	6963      	ldr	r3, [r4, #20]
 80088b0:	b913      	cbnz	r3, 80088b8 <_strtod_l+0x7b8>
 80088b2:	6923      	ldr	r3, [r4, #16]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	dd0a      	ble.n	80088ce <_strtod_l+0x7ce>
 80088b8:	4621      	mov	r1, r4
 80088ba:	2201      	movs	r2, #1
 80088bc:	4648      	mov	r0, r9
 80088be:	f001 fe9d 	bl	800a5fc <__lshift>
 80088c2:	4641      	mov	r1, r8
 80088c4:	4604      	mov	r4, r0
 80088c6:	f001 feed 	bl	800a6a4 <__mcmp>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	dc67      	bgt.n	800899e <_strtod_l+0x89e>
 80088ce:	9b04      	ldr	r3, [sp, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d171      	bne.n	80089b8 <_strtod_l+0x8b8>
 80088d4:	e63d      	b.n	8008552 <_strtod_l+0x452>
 80088d6:	f018 0f01 	tst.w	r8, #1
 80088da:	d004      	beq.n	80088e6 <_strtod_l+0x7e6>
 80088dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088e0:	f7f7 fea2 	bl	8000628 <__aeabi_dmul>
 80088e4:	2301      	movs	r3, #1
 80088e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80088ea:	3508      	adds	r5, #8
 80088ec:	e6e5      	b.n	80086ba <_strtod_l+0x5ba>
 80088ee:	f04f 32ff 	mov.w	r2, #4294967295
 80088f2:	fa02 f303 	lsl.w	r3, r2, r3
 80088f6:	ea03 0a0a 	and.w	sl, r3, sl
 80088fa:	e6ff      	b.n	80086fc <_strtod_l+0x5fc>
 80088fc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008900:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008904:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008908:	36e2      	adds	r6, #226	; 0xe2
 800890a:	fa01 f306 	lsl.w	r3, r1, r6
 800890e:	930a      	str	r3, [sp, #40]	; 0x28
 8008910:	910f      	str	r1, [sp, #60]	; 0x3c
 8008912:	e75d      	b.n	80087d0 <_strtod_l+0x6d0>
 8008914:	2300      	movs	r3, #0
 8008916:	930a      	str	r3, [sp, #40]	; 0x28
 8008918:	2301      	movs	r3, #1
 800891a:	930f      	str	r3, [sp, #60]	; 0x3c
 800891c:	e758      	b.n	80087d0 <_strtod_l+0x6d0>
 800891e:	4632      	mov	r2, r6
 8008920:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008922:	4648      	mov	r0, r9
 8008924:	f001 fe6a 	bl	800a5fc <__lshift>
 8008928:	901c      	str	r0, [sp, #112]	; 0x70
 800892a:	2800      	cmp	r0, #0
 800892c:	f47f af7c 	bne.w	8008828 <_strtod_l+0x728>
 8008930:	e604      	b.n	800853c <_strtod_l+0x43c>
 8008932:	bf00      	nop
 8008934:	0800afc0 	.word	0x0800afc0
 8008938:	fffffc02 	.word	0xfffffc02
 800893c:	465d      	mov	r5, fp
 800893e:	f040 8086 	bne.w	8008a4e <_strtod_l+0x94e>
 8008942:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008944:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008948:	b32a      	cbz	r2, 8008996 <_strtod_l+0x896>
 800894a:	4aaf      	ldr	r2, [pc, #700]	; (8008c08 <_strtod_l+0xb08>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d153      	bne.n	80089f8 <_strtod_l+0x8f8>
 8008950:	9b04      	ldr	r3, [sp, #16]
 8008952:	4650      	mov	r0, sl
 8008954:	b1d3      	cbz	r3, 800898c <_strtod_l+0x88c>
 8008956:	4aad      	ldr	r2, [pc, #692]	; (8008c0c <_strtod_l+0xb0c>)
 8008958:	402a      	ands	r2, r5
 800895a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800895e:	f04f 31ff 	mov.w	r1, #4294967295
 8008962:	d816      	bhi.n	8008992 <_strtod_l+0x892>
 8008964:	0d12      	lsrs	r2, r2, #20
 8008966:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800896a:	fa01 f303 	lsl.w	r3, r1, r3
 800896e:	4298      	cmp	r0, r3
 8008970:	d142      	bne.n	80089f8 <_strtod_l+0x8f8>
 8008972:	4ba7      	ldr	r3, [pc, #668]	; (8008c10 <_strtod_l+0xb10>)
 8008974:	429d      	cmp	r5, r3
 8008976:	d102      	bne.n	800897e <_strtod_l+0x87e>
 8008978:	3001      	adds	r0, #1
 800897a:	f43f addf 	beq.w	800853c <_strtod_l+0x43c>
 800897e:	4ba3      	ldr	r3, [pc, #652]	; (8008c0c <_strtod_l+0xb0c>)
 8008980:	402b      	ands	r3, r5
 8008982:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008986:	f04f 0a00 	mov.w	sl, #0
 800898a:	e7a0      	b.n	80088ce <_strtod_l+0x7ce>
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	e7ed      	b.n	800896e <_strtod_l+0x86e>
 8008992:	460b      	mov	r3, r1
 8008994:	e7eb      	b.n	800896e <_strtod_l+0x86e>
 8008996:	bb7b      	cbnz	r3, 80089f8 <_strtod_l+0x8f8>
 8008998:	f1ba 0f00 	cmp.w	sl, #0
 800899c:	d12c      	bne.n	80089f8 <_strtod_l+0x8f8>
 800899e:	9904      	ldr	r1, [sp, #16]
 80089a0:	4a9a      	ldr	r2, [pc, #616]	; (8008c0c <_strtod_l+0xb0c>)
 80089a2:	465b      	mov	r3, fp
 80089a4:	b1f1      	cbz	r1, 80089e4 <_strtod_l+0x8e4>
 80089a6:	ea02 010b 	and.w	r1, r2, fp
 80089aa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80089ae:	dc19      	bgt.n	80089e4 <_strtod_l+0x8e4>
 80089b0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80089b4:	f77f ae5b 	ble.w	800866e <_strtod_l+0x56e>
 80089b8:	4a96      	ldr	r2, [pc, #600]	; (8008c14 <_strtod_l+0xb14>)
 80089ba:	2300      	movs	r3, #0
 80089bc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80089c0:	4650      	mov	r0, sl
 80089c2:	4659      	mov	r1, fp
 80089c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80089c8:	f7f7 fe2e 	bl	8000628 <__aeabi_dmul>
 80089cc:	4682      	mov	sl, r0
 80089ce:	468b      	mov	fp, r1
 80089d0:	2900      	cmp	r1, #0
 80089d2:	f47f adbe 	bne.w	8008552 <_strtod_l+0x452>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f47f adbb 	bne.w	8008552 <_strtod_l+0x452>
 80089dc:	2322      	movs	r3, #34	; 0x22
 80089de:	f8c9 3000 	str.w	r3, [r9]
 80089e2:	e5b6      	b.n	8008552 <_strtod_l+0x452>
 80089e4:	4013      	ands	r3, r2
 80089e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80089ea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80089ee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80089f2:	f04f 3aff 	mov.w	sl, #4294967295
 80089f6:	e76a      	b.n	80088ce <_strtod_l+0x7ce>
 80089f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fa:	b193      	cbz	r3, 8008a22 <_strtod_l+0x922>
 80089fc:	422b      	tst	r3, r5
 80089fe:	f43f af66 	beq.w	80088ce <_strtod_l+0x7ce>
 8008a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a04:	9a04      	ldr	r2, [sp, #16]
 8008a06:	4650      	mov	r0, sl
 8008a08:	4659      	mov	r1, fp
 8008a0a:	b173      	cbz	r3, 8008a2a <_strtod_l+0x92a>
 8008a0c:	f7ff fb5a 	bl	80080c4 <sulp>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a18:	f7f7 fc50 	bl	80002bc <__adddf3>
 8008a1c:	4682      	mov	sl, r0
 8008a1e:	468b      	mov	fp, r1
 8008a20:	e755      	b.n	80088ce <_strtod_l+0x7ce>
 8008a22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a24:	ea13 0f0a 	tst.w	r3, sl
 8008a28:	e7e9      	b.n	80089fe <_strtod_l+0x8fe>
 8008a2a:	f7ff fb4b 	bl	80080c4 <sulp>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008a36:	f7f7 fc3f 	bl	80002b8 <__aeabi_dsub>
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4682      	mov	sl, r0
 8008a40:	468b      	mov	fp, r1
 8008a42:	f7f8 f859 	bl	8000af8 <__aeabi_dcmpeq>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f47f ae11 	bne.w	800866e <_strtod_l+0x56e>
 8008a4c:	e73f      	b.n	80088ce <_strtod_l+0x7ce>
 8008a4e:	4641      	mov	r1, r8
 8008a50:	4620      	mov	r0, r4
 8008a52:	f001 ff64 	bl	800a91e <__ratio>
 8008a56:	ec57 6b10 	vmov	r6, r7, d0
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a60:	ee10 0a10 	vmov	r0, s0
 8008a64:	4639      	mov	r1, r7
 8008a66:	f7f8 f85b 	bl	8000b20 <__aeabi_dcmple>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d077      	beq.n	8008b5e <_strtod_l+0xa5e>
 8008a6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d04a      	beq.n	8008b0a <_strtod_l+0xa0a>
 8008a74:	4b68      	ldr	r3, [pc, #416]	; (8008c18 <_strtod_l+0xb18>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a7c:	4f66      	ldr	r7, [pc, #408]	; (8008c18 <_strtod_l+0xb18>)
 8008a7e:	2600      	movs	r6, #0
 8008a80:	4b62      	ldr	r3, [pc, #392]	; (8008c0c <_strtod_l+0xb0c>)
 8008a82:	402b      	ands	r3, r5
 8008a84:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a88:	4b64      	ldr	r3, [pc, #400]	; (8008c1c <_strtod_l+0xb1c>)
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	f040 80ce 	bne.w	8008c2c <_strtod_l+0xb2c>
 8008a90:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a98:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008a9c:	ec4b ab10 	vmov	d0, sl, fp
 8008aa0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008aa4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008aa8:	f001 fe74 	bl	800a794 <__ulp>
 8008aac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ab0:	ec53 2b10 	vmov	r2, r3, d0
 8008ab4:	f7f7 fdb8 	bl	8000628 <__aeabi_dmul>
 8008ab8:	4652      	mov	r2, sl
 8008aba:	465b      	mov	r3, fp
 8008abc:	f7f7 fbfe 	bl	80002bc <__adddf3>
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	4952      	ldr	r1, [pc, #328]	; (8008c0c <_strtod_l+0xb0c>)
 8008ac4:	4a56      	ldr	r2, [pc, #344]	; (8008c20 <_strtod_l+0xb20>)
 8008ac6:	4019      	ands	r1, r3
 8008ac8:	4291      	cmp	r1, r2
 8008aca:	4682      	mov	sl, r0
 8008acc:	d95b      	bls.n	8008b86 <_strtod_l+0xa86>
 8008ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d103      	bne.n	8008ae0 <_strtod_l+0x9e0>
 8008ad8:	9b08      	ldr	r3, [sp, #32]
 8008ada:	3301      	adds	r3, #1
 8008adc:	f43f ad2e 	beq.w	800853c <_strtod_l+0x43c>
 8008ae0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008c10 <_strtod_l+0xb10>
 8008ae4:	f04f 3aff 	mov.w	sl, #4294967295
 8008ae8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008aea:	4648      	mov	r0, r9
 8008aec:	f001 fbbb 	bl	800a266 <_Bfree>
 8008af0:	9905      	ldr	r1, [sp, #20]
 8008af2:	4648      	mov	r0, r9
 8008af4:	f001 fbb7 	bl	800a266 <_Bfree>
 8008af8:	4641      	mov	r1, r8
 8008afa:	4648      	mov	r0, r9
 8008afc:	f001 fbb3 	bl	800a266 <_Bfree>
 8008b00:	4621      	mov	r1, r4
 8008b02:	4648      	mov	r0, r9
 8008b04:	f001 fbaf 	bl	800a266 <_Bfree>
 8008b08:	e619      	b.n	800873e <_strtod_l+0x63e>
 8008b0a:	f1ba 0f00 	cmp.w	sl, #0
 8008b0e:	d11a      	bne.n	8008b46 <_strtod_l+0xa46>
 8008b10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b14:	b9eb      	cbnz	r3, 8008b52 <_strtod_l+0xa52>
 8008b16:	2200      	movs	r2, #0
 8008b18:	4b3f      	ldr	r3, [pc, #252]	; (8008c18 <_strtod_l+0xb18>)
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	f7f7 fff5 	bl	8000b0c <__aeabi_dcmplt>
 8008b22:	b9c8      	cbnz	r0, 8008b58 <_strtod_l+0xa58>
 8008b24:	4630      	mov	r0, r6
 8008b26:	4639      	mov	r1, r7
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4b3e      	ldr	r3, [pc, #248]	; (8008c24 <_strtod_l+0xb24>)
 8008b2c:	f7f7 fd7c 	bl	8000628 <__aeabi_dmul>
 8008b30:	4606      	mov	r6, r0
 8008b32:	460f      	mov	r7, r1
 8008b34:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008b38:	9618      	str	r6, [sp, #96]	; 0x60
 8008b3a:	9319      	str	r3, [sp, #100]	; 0x64
 8008b3c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8008b40:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b44:	e79c      	b.n	8008a80 <_strtod_l+0x980>
 8008b46:	f1ba 0f01 	cmp.w	sl, #1
 8008b4a:	d102      	bne.n	8008b52 <_strtod_l+0xa52>
 8008b4c:	2d00      	cmp	r5, #0
 8008b4e:	f43f ad8e 	beq.w	800866e <_strtod_l+0x56e>
 8008b52:	2200      	movs	r2, #0
 8008b54:	4b34      	ldr	r3, [pc, #208]	; (8008c28 <_strtod_l+0xb28>)
 8008b56:	e78f      	b.n	8008a78 <_strtod_l+0x978>
 8008b58:	2600      	movs	r6, #0
 8008b5a:	4f32      	ldr	r7, [pc, #200]	; (8008c24 <_strtod_l+0xb24>)
 8008b5c:	e7ea      	b.n	8008b34 <_strtod_l+0xa34>
 8008b5e:	4b31      	ldr	r3, [pc, #196]	; (8008c24 <_strtod_l+0xb24>)
 8008b60:	4630      	mov	r0, r6
 8008b62:	4639      	mov	r1, r7
 8008b64:	2200      	movs	r2, #0
 8008b66:	f7f7 fd5f 	bl	8000628 <__aeabi_dmul>
 8008b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	460f      	mov	r7, r1
 8008b70:	b933      	cbnz	r3, 8008b80 <_strtod_l+0xa80>
 8008b72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b76:	9010      	str	r0, [sp, #64]	; 0x40
 8008b78:	9311      	str	r3, [sp, #68]	; 0x44
 8008b7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b7e:	e7df      	b.n	8008b40 <_strtod_l+0xa40>
 8008b80:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008b84:	e7f9      	b.n	8008b7a <_strtod_l+0xa7a>
 8008b86:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008b8a:	9b04      	ldr	r3, [sp, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1ab      	bne.n	8008ae8 <_strtod_l+0x9e8>
 8008b90:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b94:	0d1b      	lsrs	r3, r3, #20
 8008b96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b98:	051b      	lsls	r3, r3, #20
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	465d      	mov	r5, fp
 8008b9e:	d1a3      	bne.n	8008ae8 <_strtod_l+0x9e8>
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	f7f7 fff0 	bl	8000b88 <__aeabi_d2iz>
 8008ba8:	f7f7 fcd4 	bl	8000554 <__aeabi_i2d>
 8008bac:	460b      	mov	r3, r1
 8008bae:	4602      	mov	r2, r0
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	f7f7 fb80 	bl	80002b8 <__aeabi_dsub>
 8008bb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bba:	4606      	mov	r6, r0
 8008bbc:	460f      	mov	r7, r1
 8008bbe:	b933      	cbnz	r3, 8008bce <_strtod_l+0xace>
 8008bc0:	f1ba 0f00 	cmp.w	sl, #0
 8008bc4:	d103      	bne.n	8008bce <_strtod_l+0xace>
 8008bc6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008bca:	2d00      	cmp	r5, #0
 8008bcc:	d06d      	beq.n	8008caa <_strtod_l+0xbaa>
 8008bce:	a30a      	add	r3, pc, #40	; (adr r3, 8008bf8 <_strtod_l+0xaf8>)
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	f7f7 ff98 	bl	8000b0c <__aeabi_dcmplt>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	f47f acb8 	bne.w	8008552 <_strtod_l+0x452>
 8008be2:	a307      	add	r3, pc, #28	; (adr r3, 8008c00 <_strtod_l+0xb00>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	4630      	mov	r0, r6
 8008bea:	4639      	mov	r1, r7
 8008bec:	f7f7 ffac 	bl	8000b48 <__aeabi_dcmpgt>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f43f af79 	beq.w	8008ae8 <_strtod_l+0x9e8>
 8008bf6:	e4ac      	b.n	8008552 <_strtod_l+0x452>
 8008bf8:	94a03595 	.word	0x94a03595
 8008bfc:	3fdfffff 	.word	0x3fdfffff
 8008c00:	35afe535 	.word	0x35afe535
 8008c04:	3fe00000 	.word	0x3fe00000
 8008c08:	000fffff 	.word	0x000fffff
 8008c0c:	7ff00000 	.word	0x7ff00000
 8008c10:	7fefffff 	.word	0x7fefffff
 8008c14:	39500000 	.word	0x39500000
 8008c18:	3ff00000 	.word	0x3ff00000
 8008c1c:	7fe00000 	.word	0x7fe00000
 8008c20:	7c9fffff 	.word	0x7c9fffff
 8008c24:	3fe00000 	.word	0x3fe00000
 8008c28:	bff00000 	.word	0xbff00000
 8008c2c:	9b04      	ldr	r3, [sp, #16]
 8008c2e:	b333      	cbz	r3, 8008c7e <_strtod_l+0xb7e>
 8008c30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c32:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c36:	d822      	bhi.n	8008c7e <_strtod_l+0xb7e>
 8008c38:	a327      	add	r3, pc, #156	; (adr r3, 8008cd8 <_strtod_l+0xbd8>)
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	4630      	mov	r0, r6
 8008c40:	4639      	mov	r1, r7
 8008c42:	f7f7 ff6d 	bl	8000b20 <__aeabi_dcmple>
 8008c46:	b1a0      	cbz	r0, 8008c72 <_strtod_l+0xb72>
 8008c48:	4639      	mov	r1, r7
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f7f7 ffc4 	bl	8000bd8 <__aeabi_d2uiz>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	bf08      	it	eq
 8008c54:	2001      	moveq	r0, #1
 8008c56:	f7f7 fc6d 	bl	8000534 <__aeabi_ui2d>
 8008c5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c5c:	4606      	mov	r6, r0
 8008c5e:	460f      	mov	r7, r1
 8008c60:	bb03      	cbnz	r3, 8008ca4 <_strtod_l+0xba4>
 8008c62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c66:	9012      	str	r0, [sp, #72]	; 0x48
 8008c68:	9313      	str	r3, [sp, #76]	; 0x4c
 8008c6a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008c6e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c76:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008c7a:	1a9b      	subs	r3, r3, r2
 8008c7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c7e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008c82:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008c86:	f001 fd85 	bl	800a794 <__ulp>
 8008c8a:	4650      	mov	r0, sl
 8008c8c:	ec53 2b10 	vmov	r2, r3, d0
 8008c90:	4659      	mov	r1, fp
 8008c92:	f7f7 fcc9 	bl	8000628 <__aeabi_dmul>
 8008c96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c9a:	f7f7 fb0f 	bl	80002bc <__adddf3>
 8008c9e:	4682      	mov	sl, r0
 8008ca0:	468b      	mov	fp, r1
 8008ca2:	e772      	b.n	8008b8a <_strtod_l+0xa8a>
 8008ca4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008ca8:	e7df      	b.n	8008c6a <_strtod_l+0xb6a>
 8008caa:	a30d      	add	r3, pc, #52	; (adr r3, 8008ce0 <_strtod_l+0xbe0>)
 8008cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb0:	f7f7 ff2c 	bl	8000b0c <__aeabi_dcmplt>
 8008cb4:	e79c      	b.n	8008bf0 <_strtod_l+0xaf0>
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	930d      	str	r3, [sp, #52]	; 0x34
 8008cba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cbe:	6013      	str	r3, [r2, #0]
 8008cc0:	f7ff ba61 	b.w	8008186 <_strtod_l+0x86>
 8008cc4:	2b65      	cmp	r3, #101	; 0x65
 8008cc6:	f04f 0200 	mov.w	r2, #0
 8008cca:	f43f ab4e 	beq.w	800836a <_strtod_l+0x26a>
 8008cce:	2101      	movs	r1, #1
 8008cd0:	4614      	mov	r4, r2
 8008cd2:	9104      	str	r1, [sp, #16]
 8008cd4:	f7ff bacb 	b.w	800826e <_strtod_l+0x16e>
 8008cd8:	ffc00000 	.word	0xffc00000
 8008cdc:	41dfffff 	.word	0x41dfffff
 8008ce0:	94a03595 	.word	0x94a03595
 8008ce4:	3fcfffff 	.word	0x3fcfffff

08008ce8 <_strtod_r>:
 8008ce8:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <_strtod_r+0x18>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	b410      	push	{r4}
 8008cee:	6a1b      	ldr	r3, [r3, #32]
 8008cf0:	4c04      	ldr	r4, [pc, #16]	; (8008d04 <_strtod_r+0x1c>)
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bf08      	it	eq
 8008cf6:	4623      	moveq	r3, r4
 8008cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cfc:	f7ff ba00 	b.w	8008100 <_strtod_l>
 8008d00:	2000000c 	.word	0x2000000c
 8008d04:	20000070 	.word	0x20000070

08008d08 <strtod>:
 8008d08:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <strtod+0x20>)
 8008d0a:	4a08      	ldr	r2, [pc, #32]	; (8008d2c <strtod+0x24>)
 8008d0c:	b410      	push	{r4}
 8008d0e:	681c      	ldr	r4, [r3, #0]
 8008d10:	6a23      	ldr	r3, [r4, #32]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bf08      	it	eq
 8008d16:	4613      	moveq	r3, r2
 8008d18:	460a      	mov	r2, r1
 8008d1a:	4601      	mov	r1, r0
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d22:	f7ff b9ed 	b.w	8008100 <_strtod_l>
 8008d26:	bf00      	nop
 8008d28:	2000000c 	.word	0x2000000c
 8008d2c:	20000070 	.word	0x20000070

08008d30 <_strtol_l.isra.0>:
 8008d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d34:	4680      	mov	r8, r0
 8008d36:	4689      	mov	r9, r1
 8008d38:	4692      	mov	sl, r2
 8008d3a:	461e      	mov	r6, r3
 8008d3c:	460f      	mov	r7, r1
 8008d3e:	463d      	mov	r5, r7
 8008d40:	9808      	ldr	r0, [sp, #32]
 8008d42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d46:	f001 fa21 	bl	800a18c <__locale_ctype_ptr_l>
 8008d4a:	4420      	add	r0, r4
 8008d4c:	7843      	ldrb	r3, [r0, #1]
 8008d4e:	f013 0308 	ands.w	r3, r3, #8
 8008d52:	d132      	bne.n	8008dba <_strtol_l.isra.0+0x8a>
 8008d54:	2c2d      	cmp	r4, #45	; 0x2d
 8008d56:	d132      	bne.n	8008dbe <_strtol_l.isra.0+0x8e>
 8008d58:	787c      	ldrb	r4, [r7, #1]
 8008d5a:	1cbd      	adds	r5, r7, #2
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	2e00      	cmp	r6, #0
 8008d60:	d05d      	beq.n	8008e1e <_strtol_l.isra.0+0xee>
 8008d62:	2e10      	cmp	r6, #16
 8008d64:	d109      	bne.n	8008d7a <_strtol_l.isra.0+0x4a>
 8008d66:	2c30      	cmp	r4, #48	; 0x30
 8008d68:	d107      	bne.n	8008d7a <_strtol_l.isra.0+0x4a>
 8008d6a:	782b      	ldrb	r3, [r5, #0]
 8008d6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d70:	2b58      	cmp	r3, #88	; 0x58
 8008d72:	d14f      	bne.n	8008e14 <_strtol_l.isra.0+0xe4>
 8008d74:	786c      	ldrb	r4, [r5, #1]
 8008d76:	2610      	movs	r6, #16
 8008d78:	3502      	adds	r5, #2
 8008d7a:	2a00      	cmp	r2, #0
 8008d7c:	bf14      	ite	ne
 8008d7e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008d82:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008d86:	2700      	movs	r7, #0
 8008d88:	fbb1 fcf6 	udiv	ip, r1, r6
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008d92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008d96:	2b09      	cmp	r3, #9
 8008d98:	d817      	bhi.n	8008dca <_strtol_l.isra.0+0x9a>
 8008d9a:	461c      	mov	r4, r3
 8008d9c:	42a6      	cmp	r6, r4
 8008d9e:	dd23      	ble.n	8008de8 <_strtol_l.isra.0+0xb8>
 8008da0:	1c7b      	adds	r3, r7, #1
 8008da2:	d007      	beq.n	8008db4 <_strtol_l.isra.0+0x84>
 8008da4:	4584      	cmp	ip, r0
 8008da6:	d31c      	bcc.n	8008de2 <_strtol_l.isra.0+0xb2>
 8008da8:	d101      	bne.n	8008dae <_strtol_l.isra.0+0x7e>
 8008daa:	45a6      	cmp	lr, r4
 8008dac:	db19      	blt.n	8008de2 <_strtol_l.isra.0+0xb2>
 8008dae:	fb00 4006 	mla	r0, r0, r6, r4
 8008db2:	2701      	movs	r7, #1
 8008db4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008db8:	e7eb      	b.n	8008d92 <_strtol_l.isra.0+0x62>
 8008dba:	462f      	mov	r7, r5
 8008dbc:	e7bf      	b.n	8008d3e <_strtol_l.isra.0+0xe>
 8008dbe:	2c2b      	cmp	r4, #43	; 0x2b
 8008dc0:	bf04      	itt	eq
 8008dc2:	1cbd      	addeq	r5, r7, #2
 8008dc4:	787c      	ldrbeq	r4, [r7, #1]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	e7c9      	b.n	8008d5e <_strtol_l.isra.0+0x2e>
 8008dca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008dce:	2b19      	cmp	r3, #25
 8008dd0:	d801      	bhi.n	8008dd6 <_strtol_l.isra.0+0xa6>
 8008dd2:	3c37      	subs	r4, #55	; 0x37
 8008dd4:	e7e2      	b.n	8008d9c <_strtol_l.isra.0+0x6c>
 8008dd6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008dda:	2b19      	cmp	r3, #25
 8008ddc:	d804      	bhi.n	8008de8 <_strtol_l.isra.0+0xb8>
 8008dde:	3c57      	subs	r4, #87	; 0x57
 8008de0:	e7dc      	b.n	8008d9c <_strtol_l.isra.0+0x6c>
 8008de2:	f04f 37ff 	mov.w	r7, #4294967295
 8008de6:	e7e5      	b.n	8008db4 <_strtol_l.isra.0+0x84>
 8008de8:	1c7b      	adds	r3, r7, #1
 8008dea:	d108      	bne.n	8008dfe <_strtol_l.isra.0+0xce>
 8008dec:	2322      	movs	r3, #34	; 0x22
 8008dee:	f8c8 3000 	str.w	r3, [r8]
 8008df2:	4608      	mov	r0, r1
 8008df4:	f1ba 0f00 	cmp.w	sl, #0
 8008df8:	d107      	bne.n	8008e0a <_strtol_l.isra.0+0xda>
 8008dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfe:	b102      	cbz	r2, 8008e02 <_strtol_l.isra.0+0xd2>
 8008e00:	4240      	negs	r0, r0
 8008e02:	f1ba 0f00 	cmp.w	sl, #0
 8008e06:	d0f8      	beq.n	8008dfa <_strtol_l.isra.0+0xca>
 8008e08:	b10f      	cbz	r7, 8008e0e <_strtol_l.isra.0+0xde>
 8008e0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8008e0e:	f8ca 9000 	str.w	r9, [sl]
 8008e12:	e7f2      	b.n	8008dfa <_strtol_l.isra.0+0xca>
 8008e14:	2430      	movs	r4, #48	; 0x30
 8008e16:	2e00      	cmp	r6, #0
 8008e18:	d1af      	bne.n	8008d7a <_strtol_l.isra.0+0x4a>
 8008e1a:	2608      	movs	r6, #8
 8008e1c:	e7ad      	b.n	8008d7a <_strtol_l.isra.0+0x4a>
 8008e1e:	2c30      	cmp	r4, #48	; 0x30
 8008e20:	d0a3      	beq.n	8008d6a <_strtol_l.isra.0+0x3a>
 8008e22:	260a      	movs	r6, #10
 8008e24:	e7a9      	b.n	8008d7a <_strtol_l.isra.0+0x4a>
	...

08008e28 <_strtol_r>:
 8008e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e2a:	4c06      	ldr	r4, [pc, #24]	; (8008e44 <_strtol_r+0x1c>)
 8008e2c:	4d06      	ldr	r5, [pc, #24]	; (8008e48 <_strtol_r+0x20>)
 8008e2e:	6824      	ldr	r4, [r4, #0]
 8008e30:	6a24      	ldr	r4, [r4, #32]
 8008e32:	2c00      	cmp	r4, #0
 8008e34:	bf08      	it	eq
 8008e36:	462c      	moveq	r4, r5
 8008e38:	9400      	str	r4, [sp, #0]
 8008e3a:	f7ff ff79 	bl	8008d30 <_strtol_l.isra.0>
 8008e3e:	b003      	add	sp, #12
 8008e40:	bd30      	pop	{r4, r5, pc}
 8008e42:	bf00      	nop
 8008e44:	2000000c 	.word	0x2000000c
 8008e48:	20000070 	.word	0x20000070

08008e4c <strtol>:
 8008e4c:	4b08      	ldr	r3, [pc, #32]	; (8008e70 <strtol+0x24>)
 8008e4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e50:	681c      	ldr	r4, [r3, #0]
 8008e52:	4d08      	ldr	r5, [pc, #32]	; (8008e74 <strtol+0x28>)
 8008e54:	6a23      	ldr	r3, [r4, #32]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	bf08      	it	eq
 8008e5a:	462b      	moveq	r3, r5
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	460a      	mov	r2, r1
 8008e62:	4601      	mov	r1, r0
 8008e64:	4620      	mov	r0, r4
 8008e66:	f7ff ff63 	bl	8008d30 <_strtol_l.isra.0>
 8008e6a:	b003      	add	sp, #12
 8008e6c:	bd30      	pop	{r4, r5, pc}
 8008e6e:	bf00      	nop
 8008e70:	2000000c 	.word	0x2000000c
 8008e74:	20000070 	.word	0x20000070

08008e78 <_vsiprintf_r>:
 8008e78:	b500      	push	{lr}
 8008e7a:	b09b      	sub	sp, #108	; 0x6c
 8008e7c:	9100      	str	r1, [sp, #0]
 8008e7e:	9104      	str	r1, [sp, #16]
 8008e80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e84:	9105      	str	r1, [sp, #20]
 8008e86:	9102      	str	r1, [sp, #8]
 8008e88:	4905      	ldr	r1, [pc, #20]	; (8008ea0 <_vsiprintf_r+0x28>)
 8008e8a:	9103      	str	r1, [sp, #12]
 8008e8c:	4669      	mov	r1, sp
 8008e8e:	f001 fec5 	bl	800ac1c <_svfiprintf_r>
 8008e92:	9b00      	ldr	r3, [sp, #0]
 8008e94:	2200      	movs	r2, #0
 8008e96:	701a      	strb	r2, [r3, #0]
 8008e98:	b01b      	add	sp, #108	; 0x6c
 8008e9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e9e:	bf00      	nop
 8008ea0:	ffff0208 	.word	0xffff0208

08008ea4 <vsiprintf>:
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	460a      	mov	r2, r1
 8008ea8:	4601      	mov	r1, r0
 8008eaa:	4802      	ldr	r0, [pc, #8]	; (8008eb4 <vsiprintf+0x10>)
 8008eac:	6800      	ldr	r0, [r0, #0]
 8008eae:	f7ff bfe3 	b.w	8008e78 <_vsiprintf_r>
 8008eb2:	bf00      	nop
 8008eb4:	2000000c 	.word	0x2000000c

08008eb8 <quorem>:
 8008eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ebc:	6903      	ldr	r3, [r0, #16]
 8008ebe:	690c      	ldr	r4, [r1, #16]
 8008ec0:	42a3      	cmp	r3, r4
 8008ec2:	4680      	mov	r8, r0
 8008ec4:	f2c0 8082 	blt.w	8008fcc <quorem+0x114>
 8008ec8:	3c01      	subs	r4, #1
 8008eca:	f101 0714 	add.w	r7, r1, #20
 8008ece:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008ed2:	f100 0614 	add.w	r6, r0, #20
 8008ed6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008eda:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008ede:	eb06 030c 	add.w	r3, r6, ip
 8008ee2:	3501      	adds	r5, #1
 8008ee4:	eb07 090c 	add.w	r9, r7, ip
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	fbb0 f5f5 	udiv	r5, r0, r5
 8008eee:	b395      	cbz	r5, 8008f56 <quorem+0x9e>
 8008ef0:	f04f 0a00 	mov.w	sl, #0
 8008ef4:	4638      	mov	r0, r7
 8008ef6:	46b6      	mov	lr, r6
 8008ef8:	46d3      	mov	fp, sl
 8008efa:	f850 2b04 	ldr.w	r2, [r0], #4
 8008efe:	b293      	uxth	r3, r2
 8008f00:	fb05 a303 	mla	r3, r5, r3, sl
 8008f04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	ebab 0303 	sub.w	r3, fp, r3
 8008f0e:	0c12      	lsrs	r2, r2, #16
 8008f10:	f8de b000 	ldr.w	fp, [lr]
 8008f14:	fb05 a202 	mla	r2, r5, r2, sl
 8008f18:	fa13 f38b 	uxtah	r3, r3, fp
 8008f1c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008f20:	fa1f fb82 	uxth.w	fp, r2
 8008f24:	f8de 2000 	ldr.w	r2, [lr]
 8008f28:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008f2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f36:	4581      	cmp	r9, r0
 8008f38:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008f3c:	f84e 3b04 	str.w	r3, [lr], #4
 8008f40:	d2db      	bcs.n	8008efa <quorem+0x42>
 8008f42:	f856 300c 	ldr.w	r3, [r6, ip]
 8008f46:	b933      	cbnz	r3, 8008f56 <quorem+0x9e>
 8008f48:	9b01      	ldr	r3, [sp, #4]
 8008f4a:	3b04      	subs	r3, #4
 8008f4c:	429e      	cmp	r6, r3
 8008f4e:	461a      	mov	r2, r3
 8008f50:	d330      	bcc.n	8008fb4 <quorem+0xfc>
 8008f52:	f8c8 4010 	str.w	r4, [r8, #16]
 8008f56:	4640      	mov	r0, r8
 8008f58:	f001 fba4 	bl	800a6a4 <__mcmp>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	db25      	blt.n	8008fac <quorem+0xf4>
 8008f60:	3501      	adds	r5, #1
 8008f62:	4630      	mov	r0, r6
 8008f64:	f04f 0c00 	mov.w	ip, #0
 8008f68:	f857 2b04 	ldr.w	r2, [r7], #4
 8008f6c:	f8d0 e000 	ldr.w	lr, [r0]
 8008f70:	b293      	uxth	r3, r2
 8008f72:	ebac 0303 	sub.w	r3, ip, r3
 8008f76:	0c12      	lsrs	r2, r2, #16
 8008f78:	fa13 f38e 	uxtah	r3, r3, lr
 8008f7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f8a:	45b9      	cmp	r9, r7
 8008f8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f90:	f840 3b04 	str.w	r3, [r0], #4
 8008f94:	d2e8      	bcs.n	8008f68 <quorem+0xb0>
 8008f96:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008f9a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008f9e:	b92a      	cbnz	r2, 8008fac <quorem+0xf4>
 8008fa0:	3b04      	subs	r3, #4
 8008fa2:	429e      	cmp	r6, r3
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	d30b      	bcc.n	8008fc0 <quorem+0x108>
 8008fa8:	f8c8 4010 	str.w	r4, [r8, #16]
 8008fac:	4628      	mov	r0, r5
 8008fae:	b003      	add	sp, #12
 8008fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb4:	6812      	ldr	r2, [r2, #0]
 8008fb6:	3b04      	subs	r3, #4
 8008fb8:	2a00      	cmp	r2, #0
 8008fba:	d1ca      	bne.n	8008f52 <quorem+0x9a>
 8008fbc:	3c01      	subs	r4, #1
 8008fbe:	e7c5      	b.n	8008f4c <quorem+0x94>
 8008fc0:	6812      	ldr	r2, [r2, #0]
 8008fc2:	3b04      	subs	r3, #4
 8008fc4:	2a00      	cmp	r2, #0
 8008fc6:	d1ef      	bne.n	8008fa8 <quorem+0xf0>
 8008fc8:	3c01      	subs	r4, #1
 8008fca:	e7ea      	b.n	8008fa2 <quorem+0xea>
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e7ee      	b.n	8008fae <quorem+0xf6>

08008fd0 <_dtoa_r>:
 8008fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	ec57 6b10 	vmov	r6, r7, d0
 8008fd8:	b097      	sub	sp, #92	; 0x5c
 8008fda:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fdc:	9106      	str	r1, [sp, #24]
 8008fde:	4604      	mov	r4, r0
 8008fe0:	920b      	str	r2, [sp, #44]	; 0x2c
 8008fe2:	9312      	str	r3, [sp, #72]	; 0x48
 8008fe4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008fe8:	e9cd 6700 	strd	r6, r7, [sp]
 8008fec:	b93d      	cbnz	r5, 8008ffe <_dtoa_r+0x2e>
 8008fee:	2010      	movs	r0, #16
 8008ff0:	f001 f8e0 	bl	800a1b4 <malloc>
 8008ff4:	6260      	str	r0, [r4, #36]	; 0x24
 8008ff6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ffa:	6005      	str	r5, [r0, #0]
 8008ffc:	60c5      	str	r5, [r0, #12]
 8008ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009000:	6819      	ldr	r1, [r3, #0]
 8009002:	b151      	cbz	r1, 800901a <_dtoa_r+0x4a>
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	604a      	str	r2, [r1, #4]
 8009008:	2301      	movs	r3, #1
 800900a:	4093      	lsls	r3, r2
 800900c:	608b      	str	r3, [r1, #8]
 800900e:	4620      	mov	r0, r4
 8009010:	f001 f929 	bl	800a266 <_Bfree>
 8009014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	1e3b      	subs	r3, r7, #0
 800901c:	bfbb      	ittet	lt
 800901e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009022:	9301      	strlt	r3, [sp, #4]
 8009024:	2300      	movge	r3, #0
 8009026:	2201      	movlt	r2, #1
 8009028:	bfac      	ite	ge
 800902a:	f8c8 3000 	strge.w	r3, [r8]
 800902e:	f8c8 2000 	strlt.w	r2, [r8]
 8009032:	4baf      	ldr	r3, [pc, #700]	; (80092f0 <_dtoa_r+0x320>)
 8009034:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009038:	ea33 0308 	bics.w	r3, r3, r8
 800903c:	d114      	bne.n	8009068 <_dtoa_r+0x98>
 800903e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009040:	f242 730f 	movw	r3, #9999	; 0x270f
 8009044:	6013      	str	r3, [r2, #0]
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	b923      	cbnz	r3, 8009054 <_dtoa_r+0x84>
 800904a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800904e:	2800      	cmp	r0, #0
 8009050:	f000 8542 	beq.w	8009ad8 <_dtoa_r+0xb08>
 8009054:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009056:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009304 <_dtoa_r+0x334>
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 8544 	beq.w	8009ae8 <_dtoa_r+0xb18>
 8009060:	f10b 0303 	add.w	r3, fp, #3
 8009064:	f000 bd3e 	b.w	8009ae4 <_dtoa_r+0xb14>
 8009068:	e9dd 6700 	ldrd	r6, r7, [sp]
 800906c:	2200      	movs	r2, #0
 800906e:	2300      	movs	r3, #0
 8009070:	4630      	mov	r0, r6
 8009072:	4639      	mov	r1, r7
 8009074:	f7f7 fd40 	bl	8000af8 <__aeabi_dcmpeq>
 8009078:	4681      	mov	r9, r0
 800907a:	b168      	cbz	r0, 8009098 <_dtoa_r+0xc8>
 800907c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800907e:	2301      	movs	r3, #1
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009084:	2b00      	cmp	r3, #0
 8009086:	f000 8524 	beq.w	8009ad2 <_dtoa_r+0xb02>
 800908a:	4b9a      	ldr	r3, [pc, #616]	; (80092f4 <_dtoa_r+0x324>)
 800908c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800908e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009092:	6013      	str	r3, [r2, #0]
 8009094:	f000 bd28 	b.w	8009ae8 <_dtoa_r+0xb18>
 8009098:	aa14      	add	r2, sp, #80	; 0x50
 800909a:	a915      	add	r1, sp, #84	; 0x54
 800909c:	ec47 6b10 	vmov	d0, r6, r7
 80090a0:	4620      	mov	r0, r4
 80090a2:	f001 fbed 	bl	800a880 <__d2b>
 80090a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80090aa:	9004      	str	r0, [sp, #16]
 80090ac:	2d00      	cmp	r5, #0
 80090ae:	d07c      	beq.n	80091aa <_dtoa_r+0x1da>
 80090b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80090b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80090b8:	46b2      	mov	sl, r6
 80090ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80090be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80090c6:	2200      	movs	r2, #0
 80090c8:	4b8b      	ldr	r3, [pc, #556]	; (80092f8 <_dtoa_r+0x328>)
 80090ca:	4650      	mov	r0, sl
 80090cc:	4659      	mov	r1, fp
 80090ce:	f7f7 f8f3 	bl	80002b8 <__aeabi_dsub>
 80090d2:	a381      	add	r3, pc, #516	; (adr r3, 80092d8 <_dtoa_r+0x308>)
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f7f7 faa6 	bl	8000628 <__aeabi_dmul>
 80090dc:	a380      	add	r3, pc, #512	; (adr r3, 80092e0 <_dtoa_r+0x310>)
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	f7f7 f8eb 	bl	80002bc <__adddf3>
 80090e6:	4606      	mov	r6, r0
 80090e8:	4628      	mov	r0, r5
 80090ea:	460f      	mov	r7, r1
 80090ec:	f7f7 fa32 	bl	8000554 <__aeabi_i2d>
 80090f0:	a37d      	add	r3, pc, #500	; (adr r3, 80092e8 <_dtoa_r+0x318>)
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	f7f7 fa97 	bl	8000628 <__aeabi_dmul>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4630      	mov	r0, r6
 8009100:	4639      	mov	r1, r7
 8009102:	f7f7 f8db 	bl	80002bc <__adddf3>
 8009106:	4606      	mov	r6, r0
 8009108:	460f      	mov	r7, r1
 800910a:	f7f7 fd3d 	bl	8000b88 <__aeabi_d2iz>
 800910e:	2200      	movs	r2, #0
 8009110:	4682      	mov	sl, r0
 8009112:	2300      	movs	r3, #0
 8009114:	4630      	mov	r0, r6
 8009116:	4639      	mov	r1, r7
 8009118:	f7f7 fcf8 	bl	8000b0c <__aeabi_dcmplt>
 800911c:	b148      	cbz	r0, 8009132 <_dtoa_r+0x162>
 800911e:	4650      	mov	r0, sl
 8009120:	f7f7 fa18 	bl	8000554 <__aeabi_i2d>
 8009124:	4632      	mov	r2, r6
 8009126:	463b      	mov	r3, r7
 8009128:	f7f7 fce6 	bl	8000af8 <__aeabi_dcmpeq>
 800912c:	b908      	cbnz	r0, 8009132 <_dtoa_r+0x162>
 800912e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009132:	f1ba 0f16 	cmp.w	sl, #22
 8009136:	d859      	bhi.n	80091ec <_dtoa_r+0x21c>
 8009138:	4970      	ldr	r1, [pc, #448]	; (80092fc <_dtoa_r+0x32c>)
 800913a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800913e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009146:	f7f7 fcff 	bl	8000b48 <__aeabi_dcmpgt>
 800914a:	2800      	cmp	r0, #0
 800914c:	d050      	beq.n	80091f0 <_dtoa_r+0x220>
 800914e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009152:	2300      	movs	r3, #0
 8009154:	930f      	str	r3, [sp, #60]	; 0x3c
 8009156:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009158:	1b5d      	subs	r5, r3, r5
 800915a:	f1b5 0801 	subs.w	r8, r5, #1
 800915e:	bf49      	itett	mi
 8009160:	f1c5 0301 	rsbmi	r3, r5, #1
 8009164:	2300      	movpl	r3, #0
 8009166:	9305      	strmi	r3, [sp, #20]
 8009168:	f04f 0800 	movmi.w	r8, #0
 800916c:	bf58      	it	pl
 800916e:	9305      	strpl	r3, [sp, #20]
 8009170:	f1ba 0f00 	cmp.w	sl, #0
 8009174:	db3e      	blt.n	80091f4 <_dtoa_r+0x224>
 8009176:	2300      	movs	r3, #0
 8009178:	44d0      	add	r8, sl
 800917a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800917e:	9307      	str	r3, [sp, #28]
 8009180:	9b06      	ldr	r3, [sp, #24]
 8009182:	2b09      	cmp	r3, #9
 8009184:	f200 8090 	bhi.w	80092a8 <_dtoa_r+0x2d8>
 8009188:	2b05      	cmp	r3, #5
 800918a:	bfc4      	itt	gt
 800918c:	3b04      	subgt	r3, #4
 800918e:	9306      	strgt	r3, [sp, #24]
 8009190:	9b06      	ldr	r3, [sp, #24]
 8009192:	f1a3 0302 	sub.w	r3, r3, #2
 8009196:	bfcc      	ite	gt
 8009198:	2500      	movgt	r5, #0
 800919a:	2501      	movle	r5, #1
 800919c:	2b03      	cmp	r3, #3
 800919e:	f200 808f 	bhi.w	80092c0 <_dtoa_r+0x2f0>
 80091a2:	e8df f003 	tbb	[pc, r3]
 80091a6:	7f7d      	.short	0x7f7d
 80091a8:	7131      	.short	0x7131
 80091aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80091ae:	441d      	add	r5, r3
 80091b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80091b4:	2820      	cmp	r0, #32
 80091b6:	dd13      	ble.n	80091e0 <_dtoa_r+0x210>
 80091b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80091bc:	9b00      	ldr	r3, [sp, #0]
 80091be:	fa08 f800 	lsl.w	r8, r8, r0
 80091c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80091c6:	fa23 f000 	lsr.w	r0, r3, r0
 80091ca:	ea48 0000 	orr.w	r0, r8, r0
 80091ce:	f7f7 f9b1 	bl	8000534 <__aeabi_ui2d>
 80091d2:	2301      	movs	r3, #1
 80091d4:	4682      	mov	sl, r0
 80091d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80091da:	3d01      	subs	r5, #1
 80091dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80091de:	e772      	b.n	80090c6 <_dtoa_r+0xf6>
 80091e0:	9b00      	ldr	r3, [sp, #0]
 80091e2:	f1c0 0020 	rsb	r0, r0, #32
 80091e6:	fa03 f000 	lsl.w	r0, r3, r0
 80091ea:	e7f0      	b.n	80091ce <_dtoa_r+0x1fe>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e7b1      	b.n	8009154 <_dtoa_r+0x184>
 80091f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80091f2:	e7b0      	b.n	8009156 <_dtoa_r+0x186>
 80091f4:	9b05      	ldr	r3, [sp, #20]
 80091f6:	eba3 030a 	sub.w	r3, r3, sl
 80091fa:	9305      	str	r3, [sp, #20]
 80091fc:	f1ca 0300 	rsb	r3, sl, #0
 8009200:	9307      	str	r3, [sp, #28]
 8009202:	2300      	movs	r3, #0
 8009204:	930e      	str	r3, [sp, #56]	; 0x38
 8009206:	e7bb      	b.n	8009180 <_dtoa_r+0x1b0>
 8009208:	2301      	movs	r3, #1
 800920a:	930a      	str	r3, [sp, #40]	; 0x28
 800920c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800920e:	2b00      	cmp	r3, #0
 8009210:	dd59      	ble.n	80092c6 <_dtoa_r+0x2f6>
 8009212:	9302      	str	r3, [sp, #8]
 8009214:	4699      	mov	r9, r3
 8009216:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009218:	2200      	movs	r2, #0
 800921a:	6072      	str	r2, [r6, #4]
 800921c:	2204      	movs	r2, #4
 800921e:	f102 0014 	add.w	r0, r2, #20
 8009222:	4298      	cmp	r0, r3
 8009224:	6871      	ldr	r1, [r6, #4]
 8009226:	d953      	bls.n	80092d0 <_dtoa_r+0x300>
 8009228:	4620      	mov	r0, r4
 800922a:	f000 ffe8 	bl	800a1fe <_Balloc>
 800922e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009230:	6030      	str	r0, [r6, #0]
 8009232:	f1b9 0f0e 	cmp.w	r9, #14
 8009236:	f8d3 b000 	ldr.w	fp, [r3]
 800923a:	f200 80e6 	bhi.w	800940a <_dtoa_r+0x43a>
 800923e:	2d00      	cmp	r5, #0
 8009240:	f000 80e3 	beq.w	800940a <_dtoa_r+0x43a>
 8009244:	ed9d 7b00 	vldr	d7, [sp]
 8009248:	f1ba 0f00 	cmp.w	sl, #0
 800924c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009250:	dd74      	ble.n	800933c <_dtoa_r+0x36c>
 8009252:	4a2a      	ldr	r2, [pc, #168]	; (80092fc <_dtoa_r+0x32c>)
 8009254:	f00a 030f 	and.w	r3, sl, #15
 8009258:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800925c:	ed93 7b00 	vldr	d7, [r3]
 8009260:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009264:	06f0      	lsls	r0, r6, #27
 8009266:	ed8d 7b08 	vstr	d7, [sp, #32]
 800926a:	d565      	bpl.n	8009338 <_dtoa_r+0x368>
 800926c:	4b24      	ldr	r3, [pc, #144]	; (8009300 <_dtoa_r+0x330>)
 800926e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009272:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009276:	f7f7 fb01 	bl	800087c <__aeabi_ddiv>
 800927a:	e9cd 0100 	strd	r0, r1, [sp]
 800927e:	f006 060f 	and.w	r6, r6, #15
 8009282:	2503      	movs	r5, #3
 8009284:	4f1e      	ldr	r7, [pc, #120]	; (8009300 <_dtoa_r+0x330>)
 8009286:	e04c      	b.n	8009322 <_dtoa_r+0x352>
 8009288:	2301      	movs	r3, #1
 800928a:	930a      	str	r3, [sp, #40]	; 0x28
 800928c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800928e:	4453      	add	r3, sl
 8009290:	f103 0901 	add.w	r9, r3, #1
 8009294:	9302      	str	r3, [sp, #8]
 8009296:	464b      	mov	r3, r9
 8009298:	2b01      	cmp	r3, #1
 800929a:	bfb8      	it	lt
 800929c:	2301      	movlt	r3, #1
 800929e:	e7ba      	b.n	8009216 <_dtoa_r+0x246>
 80092a0:	2300      	movs	r3, #0
 80092a2:	e7b2      	b.n	800920a <_dtoa_r+0x23a>
 80092a4:	2300      	movs	r3, #0
 80092a6:	e7f0      	b.n	800928a <_dtoa_r+0x2ba>
 80092a8:	2501      	movs	r5, #1
 80092aa:	2300      	movs	r3, #0
 80092ac:	9306      	str	r3, [sp, #24]
 80092ae:	950a      	str	r5, [sp, #40]	; 0x28
 80092b0:	f04f 33ff 	mov.w	r3, #4294967295
 80092b4:	9302      	str	r3, [sp, #8]
 80092b6:	4699      	mov	r9, r3
 80092b8:	2200      	movs	r2, #0
 80092ba:	2312      	movs	r3, #18
 80092bc:	920b      	str	r2, [sp, #44]	; 0x2c
 80092be:	e7aa      	b.n	8009216 <_dtoa_r+0x246>
 80092c0:	2301      	movs	r3, #1
 80092c2:	930a      	str	r3, [sp, #40]	; 0x28
 80092c4:	e7f4      	b.n	80092b0 <_dtoa_r+0x2e0>
 80092c6:	2301      	movs	r3, #1
 80092c8:	9302      	str	r3, [sp, #8]
 80092ca:	4699      	mov	r9, r3
 80092cc:	461a      	mov	r2, r3
 80092ce:	e7f5      	b.n	80092bc <_dtoa_r+0x2ec>
 80092d0:	3101      	adds	r1, #1
 80092d2:	6071      	str	r1, [r6, #4]
 80092d4:	0052      	lsls	r2, r2, #1
 80092d6:	e7a2      	b.n	800921e <_dtoa_r+0x24e>
 80092d8:	636f4361 	.word	0x636f4361
 80092dc:	3fd287a7 	.word	0x3fd287a7
 80092e0:	8b60c8b3 	.word	0x8b60c8b3
 80092e4:	3fc68a28 	.word	0x3fc68a28
 80092e8:	509f79fb 	.word	0x509f79fb
 80092ec:	3fd34413 	.word	0x3fd34413
 80092f0:	7ff00000 	.word	0x7ff00000
 80092f4:	0800af6d 	.word	0x0800af6d
 80092f8:	3ff80000 	.word	0x3ff80000
 80092fc:	0800b028 	.word	0x0800b028
 8009300:	0800b000 	.word	0x0800b000
 8009304:	0800aff1 	.word	0x0800aff1
 8009308:	07f1      	lsls	r1, r6, #31
 800930a:	d508      	bpl.n	800931e <_dtoa_r+0x34e>
 800930c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009314:	f7f7 f988 	bl	8000628 <__aeabi_dmul>
 8009318:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800931c:	3501      	adds	r5, #1
 800931e:	1076      	asrs	r6, r6, #1
 8009320:	3708      	adds	r7, #8
 8009322:	2e00      	cmp	r6, #0
 8009324:	d1f0      	bne.n	8009308 <_dtoa_r+0x338>
 8009326:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800932a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800932e:	f7f7 faa5 	bl	800087c <__aeabi_ddiv>
 8009332:	e9cd 0100 	strd	r0, r1, [sp]
 8009336:	e01a      	b.n	800936e <_dtoa_r+0x39e>
 8009338:	2502      	movs	r5, #2
 800933a:	e7a3      	b.n	8009284 <_dtoa_r+0x2b4>
 800933c:	f000 80a0 	beq.w	8009480 <_dtoa_r+0x4b0>
 8009340:	f1ca 0600 	rsb	r6, sl, #0
 8009344:	4b9f      	ldr	r3, [pc, #636]	; (80095c4 <_dtoa_r+0x5f4>)
 8009346:	4fa0      	ldr	r7, [pc, #640]	; (80095c8 <_dtoa_r+0x5f8>)
 8009348:	f006 020f 	and.w	r2, r6, #15
 800934c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009354:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009358:	f7f7 f966 	bl	8000628 <__aeabi_dmul>
 800935c:	e9cd 0100 	strd	r0, r1, [sp]
 8009360:	1136      	asrs	r6, r6, #4
 8009362:	2300      	movs	r3, #0
 8009364:	2502      	movs	r5, #2
 8009366:	2e00      	cmp	r6, #0
 8009368:	d17f      	bne.n	800946a <_dtoa_r+0x49a>
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e1      	bne.n	8009332 <_dtoa_r+0x362>
 800936e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009370:	2b00      	cmp	r3, #0
 8009372:	f000 8087 	beq.w	8009484 <_dtoa_r+0x4b4>
 8009376:	e9dd 6700 	ldrd	r6, r7, [sp]
 800937a:	2200      	movs	r2, #0
 800937c:	4b93      	ldr	r3, [pc, #588]	; (80095cc <_dtoa_r+0x5fc>)
 800937e:	4630      	mov	r0, r6
 8009380:	4639      	mov	r1, r7
 8009382:	f7f7 fbc3 	bl	8000b0c <__aeabi_dcmplt>
 8009386:	2800      	cmp	r0, #0
 8009388:	d07c      	beq.n	8009484 <_dtoa_r+0x4b4>
 800938a:	f1b9 0f00 	cmp.w	r9, #0
 800938e:	d079      	beq.n	8009484 <_dtoa_r+0x4b4>
 8009390:	9b02      	ldr	r3, [sp, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	dd35      	ble.n	8009402 <_dtoa_r+0x432>
 8009396:	f10a 33ff 	add.w	r3, sl, #4294967295
 800939a:	9308      	str	r3, [sp, #32]
 800939c:	4639      	mov	r1, r7
 800939e:	2200      	movs	r2, #0
 80093a0:	4b8b      	ldr	r3, [pc, #556]	; (80095d0 <_dtoa_r+0x600>)
 80093a2:	4630      	mov	r0, r6
 80093a4:	f7f7 f940 	bl	8000628 <__aeabi_dmul>
 80093a8:	e9cd 0100 	strd	r0, r1, [sp]
 80093ac:	9f02      	ldr	r7, [sp, #8]
 80093ae:	3501      	adds	r5, #1
 80093b0:	4628      	mov	r0, r5
 80093b2:	f7f7 f8cf 	bl	8000554 <__aeabi_i2d>
 80093b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093ba:	f7f7 f935 	bl	8000628 <__aeabi_dmul>
 80093be:	2200      	movs	r2, #0
 80093c0:	4b84      	ldr	r3, [pc, #528]	; (80095d4 <_dtoa_r+0x604>)
 80093c2:	f7f6 ff7b 	bl	80002bc <__adddf3>
 80093c6:	4605      	mov	r5, r0
 80093c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80093cc:	2f00      	cmp	r7, #0
 80093ce:	d15d      	bne.n	800948c <_dtoa_r+0x4bc>
 80093d0:	2200      	movs	r2, #0
 80093d2:	4b81      	ldr	r3, [pc, #516]	; (80095d8 <_dtoa_r+0x608>)
 80093d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093d8:	f7f6 ff6e 	bl	80002b8 <__aeabi_dsub>
 80093dc:	462a      	mov	r2, r5
 80093de:	4633      	mov	r3, r6
 80093e0:	e9cd 0100 	strd	r0, r1, [sp]
 80093e4:	f7f7 fbb0 	bl	8000b48 <__aeabi_dcmpgt>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	f040 8288 	bne.w	80098fe <_dtoa_r+0x92e>
 80093ee:	462a      	mov	r2, r5
 80093f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80093f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093f8:	f7f7 fb88 	bl	8000b0c <__aeabi_dcmplt>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	f040 827c 	bne.w	80098fa <_dtoa_r+0x92a>
 8009402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009406:	e9cd 2300 	strd	r2, r3, [sp]
 800940a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800940c:	2b00      	cmp	r3, #0
 800940e:	f2c0 8150 	blt.w	80096b2 <_dtoa_r+0x6e2>
 8009412:	f1ba 0f0e 	cmp.w	sl, #14
 8009416:	f300 814c 	bgt.w	80096b2 <_dtoa_r+0x6e2>
 800941a:	4b6a      	ldr	r3, [pc, #424]	; (80095c4 <_dtoa_r+0x5f4>)
 800941c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009420:	ed93 7b00 	vldr	d7, [r3]
 8009424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009426:	2b00      	cmp	r3, #0
 8009428:	ed8d 7b02 	vstr	d7, [sp, #8]
 800942c:	f280 80d8 	bge.w	80095e0 <_dtoa_r+0x610>
 8009430:	f1b9 0f00 	cmp.w	r9, #0
 8009434:	f300 80d4 	bgt.w	80095e0 <_dtoa_r+0x610>
 8009438:	f040 825e 	bne.w	80098f8 <_dtoa_r+0x928>
 800943c:	2200      	movs	r2, #0
 800943e:	4b66      	ldr	r3, [pc, #408]	; (80095d8 <_dtoa_r+0x608>)
 8009440:	ec51 0b17 	vmov	r0, r1, d7
 8009444:	f7f7 f8f0 	bl	8000628 <__aeabi_dmul>
 8009448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800944c:	f7f7 fb72 	bl	8000b34 <__aeabi_dcmpge>
 8009450:	464f      	mov	r7, r9
 8009452:	464e      	mov	r6, r9
 8009454:	2800      	cmp	r0, #0
 8009456:	f040 8234 	bne.w	80098c2 <_dtoa_r+0x8f2>
 800945a:	2331      	movs	r3, #49	; 0x31
 800945c:	f10b 0501 	add.w	r5, fp, #1
 8009460:	f88b 3000 	strb.w	r3, [fp]
 8009464:	f10a 0a01 	add.w	sl, sl, #1
 8009468:	e22f      	b.n	80098ca <_dtoa_r+0x8fa>
 800946a:	07f2      	lsls	r2, r6, #31
 800946c:	d505      	bpl.n	800947a <_dtoa_r+0x4aa>
 800946e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009472:	f7f7 f8d9 	bl	8000628 <__aeabi_dmul>
 8009476:	3501      	adds	r5, #1
 8009478:	2301      	movs	r3, #1
 800947a:	1076      	asrs	r6, r6, #1
 800947c:	3708      	adds	r7, #8
 800947e:	e772      	b.n	8009366 <_dtoa_r+0x396>
 8009480:	2502      	movs	r5, #2
 8009482:	e774      	b.n	800936e <_dtoa_r+0x39e>
 8009484:	f8cd a020 	str.w	sl, [sp, #32]
 8009488:	464f      	mov	r7, r9
 800948a:	e791      	b.n	80093b0 <_dtoa_r+0x3e0>
 800948c:	4b4d      	ldr	r3, [pc, #308]	; (80095c4 <_dtoa_r+0x5f4>)
 800948e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009492:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009498:	2b00      	cmp	r3, #0
 800949a:	d047      	beq.n	800952c <_dtoa_r+0x55c>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	2000      	movs	r0, #0
 80094a2:	494e      	ldr	r1, [pc, #312]	; (80095dc <_dtoa_r+0x60c>)
 80094a4:	f7f7 f9ea 	bl	800087c <__aeabi_ddiv>
 80094a8:	462a      	mov	r2, r5
 80094aa:	4633      	mov	r3, r6
 80094ac:	f7f6 ff04 	bl	80002b8 <__aeabi_dsub>
 80094b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80094b4:	465d      	mov	r5, fp
 80094b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094ba:	f7f7 fb65 	bl	8000b88 <__aeabi_d2iz>
 80094be:	4606      	mov	r6, r0
 80094c0:	f7f7 f848 	bl	8000554 <__aeabi_i2d>
 80094c4:	4602      	mov	r2, r0
 80094c6:	460b      	mov	r3, r1
 80094c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094cc:	f7f6 fef4 	bl	80002b8 <__aeabi_dsub>
 80094d0:	3630      	adds	r6, #48	; 0x30
 80094d2:	f805 6b01 	strb.w	r6, [r5], #1
 80094d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80094da:	e9cd 0100 	strd	r0, r1, [sp]
 80094de:	f7f7 fb15 	bl	8000b0c <__aeabi_dcmplt>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d163      	bne.n	80095ae <_dtoa_r+0x5de>
 80094e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094ea:	2000      	movs	r0, #0
 80094ec:	4937      	ldr	r1, [pc, #220]	; (80095cc <_dtoa_r+0x5fc>)
 80094ee:	f7f6 fee3 	bl	80002b8 <__aeabi_dsub>
 80094f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80094f6:	f7f7 fb09 	bl	8000b0c <__aeabi_dcmplt>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	f040 80b7 	bne.w	800966e <_dtoa_r+0x69e>
 8009500:	eba5 030b 	sub.w	r3, r5, fp
 8009504:	429f      	cmp	r7, r3
 8009506:	f77f af7c 	ble.w	8009402 <_dtoa_r+0x432>
 800950a:	2200      	movs	r2, #0
 800950c:	4b30      	ldr	r3, [pc, #192]	; (80095d0 <_dtoa_r+0x600>)
 800950e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009512:	f7f7 f889 	bl	8000628 <__aeabi_dmul>
 8009516:	2200      	movs	r2, #0
 8009518:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800951c:	4b2c      	ldr	r3, [pc, #176]	; (80095d0 <_dtoa_r+0x600>)
 800951e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009522:	f7f7 f881 	bl	8000628 <__aeabi_dmul>
 8009526:	e9cd 0100 	strd	r0, r1, [sp]
 800952a:	e7c4      	b.n	80094b6 <_dtoa_r+0x4e6>
 800952c:	462a      	mov	r2, r5
 800952e:	4633      	mov	r3, r6
 8009530:	f7f7 f87a 	bl	8000628 <__aeabi_dmul>
 8009534:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009538:	eb0b 0507 	add.w	r5, fp, r7
 800953c:	465e      	mov	r6, fp
 800953e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009542:	f7f7 fb21 	bl	8000b88 <__aeabi_d2iz>
 8009546:	4607      	mov	r7, r0
 8009548:	f7f7 f804 	bl	8000554 <__aeabi_i2d>
 800954c:	3730      	adds	r7, #48	; 0x30
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009556:	f7f6 feaf 	bl	80002b8 <__aeabi_dsub>
 800955a:	f806 7b01 	strb.w	r7, [r6], #1
 800955e:	42ae      	cmp	r6, r5
 8009560:	e9cd 0100 	strd	r0, r1, [sp]
 8009564:	f04f 0200 	mov.w	r2, #0
 8009568:	d126      	bne.n	80095b8 <_dtoa_r+0x5e8>
 800956a:	4b1c      	ldr	r3, [pc, #112]	; (80095dc <_dtoa_r+0x60c>)
 800956c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009570:	f7f6 fea4 	bl	80002bc <__adddf3>
 8009574:	4602      	mov	r2, r0
 8009576:	460b      	mov	r3, r1
 8009578:	e9dd 0100 	ldrd	r0, r1, [sp]
 800957c:	f7f7 fae4 	bl	8000b48 <__aeabi_dcmpgt>
 8009580:	2800      	cmp	r0, #0
 8009582:	d174      	bne.n	800966e <_dtoa_r+0x69e>
 8009584:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009588:	2000      	movs	r0, #0
 800958a:	4914      	ldr	r1, [pc, #80]	; (80095dc <_dtoa_r+0x60c>)
 800958c:	f7f6 fe94 	bl	80002b8 <__aeabi_dsub>
 8009590:	4602      	mov	r2, r0
 8009592:	460b      	mov	r3, r1
 8009594:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009598:	f7f7 fab8 	bl	8000b0c <__aeabi_dcmplt>
 800959c:	2800      	cmp	r0, #0
 800959e:	f43f af30 	beq.w	8009402 <_dtoa_r+0x432>
 80095a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095a6:	2b30      	cmp	r3, #48	; 0x30
 80095a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80095ac:	d002      	beq.n	80095b4 <_dtoa_r+0x5e4>
 80095ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 80095b2:	e04a      	b.n	800964a <_dtoa_r+0x67a>
 80095b4:	4615      	mov	r5, r2
 80095b6:	e7f4      	b.n	80095a2 <_dtoa_r+0x5d2>
 80095b8:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <_dtoa_r+0x600>)
 80095ba:	f7f7 f835 	bl	8000628 <__aeabi_dmul>
 80095be:	e9cd 0100 	strd	r0, r1, [sp]
 80095c2:	e7bc      	b.n	800953e <_dtoa_r+0x56e>
 80095c4:	0800b028 	.word	0x0800b028
 80095c8:	0800b000 	.word	0x0800b000
 80095cc:	3ff00000 	.word	0x3ff00000
 80095d0:	40240000 	.word	0x40240000
 80095d4:	401c0000 	.word	0x401c0000
 80095d8:	40140000 	.word	0x40140000
 80095dc:	3fe00000 	.word	0x3fe00000
 80095e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80095e4:	465d      	mov	r5, fp
 80095e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095ea:	4630      	mov	r0, r6
 80095ec:	4639      	mov	r1, r7
 80095ee:	f7f7 f945 	bl	800087c <__aeabi_ddiv>
 80095f2:	f7f7 fac9 	bl	8000b88 <__aeabi_d2iz>
 80095f6:	4680      	mov	r8, r0
 80095f8:	f7f6 ffac 	bl	8000554 <__aeabi_i2d>
 80095fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009600:	f7f7 f812 	bl	8000628 <__aeabi_dmul>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	4630      	mov	r0, r6
 800960a:	4639      	mov	r1, r7
 800960c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009610:	f7f6 fe52 	bl	80002b8 <__aeabi_dsub>
 8009614:	f805 6b01 	strb.w	r6, [r5], #1
 8009618:	eba5 060b 	sub.w	r6, r5, fp
 800961c:	45b1      	cmp	r9, r6
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	d139      	bne.n	8009698 <_dtoa_r+0x6c8>
 8009624:	f7f6 fe4a 	bl	80002bc <__adddf3>
 8009628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800962c:	4606      	mov	r6, r0
 800962e:	460f      	mov	r7, r1
 8009630:	f7f7 fa8a 	bl	8000b48 <__aeabi_dcmpgt>
 8009634:	b9c8      	cbnz	r0, 800966a <_dtoa_r+0x69a>
 8009636:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800963a:	4630      	mov	r0, r6
 800963c:	4639      	mov	r1, r7
 800963e:	f7f7 fa5b 	bl	8000af8 <__aeabi_dcmpeq>
 8009642:	b110      	cbz	r0, 800964a <_dtoa_r+0x67a>
 8009644:	f018 0f01 	tst.w	r8, #1
 8009648:	d10f      	bne.n	800966a <_dtoa_r+0x69a>
 800964a:	9904      	ldr	r1, [sp, #16]
 800964c:	4620      	mov	r0, r4
 800964e:	f000 fe0a 	bl	800a266 <_Bfree>
 8009652:	2300      	movs	r3, #0
 8009654:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009656:	702b      	strb	r3, [r5, #0]
 8009658:	f10a 0301 	add.w	r3, sl, #1
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 8241 	beq.w	8009ae8 <_dtoa_r+0xb18>
 8009666:	601d      	str	r5, [r3, #0]
 8009668:	e23e      	b.n	8009ae8 <_dtoa_r+0xb18>
 800966a:	f8cd a020 	str.w	sl, [sp, #32]
 800966e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009672:	2a39      	cmp	r2, #57	; 0x39
 8009674:	f105 33ff 	add.w	r3, r5, #4294967295
 8009678:	d108      	bne.n	800968c <_dtoa_r+0x6bc>
 800967a:	459b      	cmp	fp, r3
 800967c:	d10a      	bne.n	8009694 <_dtoa_r+0x6c4>
 800967e:	9b08      	ldr	r3, [sp, #32]
 8009680:	3301      	adds	r3, #1
 8009682:	9308      	str	r3, [sp, #32]
 8009684:	2330      	movs	r3, #48	; 0x30
 8009686:	f88b 3000 	strb.w	r3, [fp]
 800968a:	465b      	mov	r3, fp
 800968c:	781a      	ldrb	r2, [r3, #0]
 800968e:	3201      	adds	r2, #1
 8009690:	701a      	strb	r2, [r3, #0]
 8009692:	e78c      	b.n	80095ae <_dtoa_r+0x5de>
 8009694:	461d      	mov	r5, r3
 8009696:	e7ea      	b.n	800966e <_dtoa_r+0x69e>
 8009698:	2200      	movs	r2, #0
 800969a:	4b9b      	ldr	r3, [pc, #620]	; (8009908 <_dtoa_r+0x938>)
 800969c:	f7f6 ffc4 	bl	8000628 <__aeabi_dmul>
 80096a0:	2200      	movs	r2, #0
 80096a2:	2300      	movs	r3, #0
 80096a4:	4606      	mov	r6, r0
 80096a6:	460f      	mov	r7, r1
 80096a8:	f7f7 fa26 	bl	8000af8 <__aeabi_dcmpeq>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d09a      	beq.n	80095e6 <_dtoa_r+0x616>
 80096b0:	e7cb      	b.n	800964a <_dtoa_r+0x67a>
 80096b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	f000 808b 	beq.w	80097d0 <_dtoa_r+0x800>
 80096ba:	9a06      	ldr	r2, [sp, #24]
 80096bc:	2a01      	cmp	r2, #1
 80096be:	dc6e      	bgt.n	800979e <_dtoa_r+0x7ce>
 80096c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80096c2:	2a00      	cmp	r2, #0
 80096c4:	d067      	beq.n	8009796 <_dtoa_r+0x7c6>
 80096c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80096ca:	9f07      	ldr	r7, [sp, #28]
 80096cc:	9d05      	ldr	r5, [sp, #20]
 80096ce:	9a05      	ldr	r2, [sp, #20]
 80096d0:	2101      	movs	r1, #1
 80096d2:	441a      	add	r2, r3
 80096d4:	4620      	mov	r0, r4
 80096d6:	9205      	str	r2, [sp, #20]
 80096d8:	4498      	add	r8, r3
 80096da:	f000 fea2 	bl	800a422 <__i2b>
 80096de:	4606      	mov	r6, r0
 80096e0:	2d00      	cmp	r5, #0
 80096e2:	dd0c      	ble.n	80096fe <_dtoa_r+0x72e>
 80096e4:	f1b8 0f00 	cmp.w	r8, #0
 80096e8:	dd09      	ble.n	80096fe <_dtoa_r+0x72e>
 80096ea:	4545      	cmp	r5, r8
 80096ec:	9a05      	ldr	r2, [sp, #20]
 80096ee:	462b      	mov	r3, r5
 80096f0:	bfa8      	it	ge
 80096f2:	4643      	movge	r3, r8
 80096f4:	1ad2      	subs	r2, r2, r3
 80096f6:	9205      	str	r2, [sp, #20]
 80096f8:	1aed      	subs	r5, r5, r3
 80096fa:	eba8 0803 	sub.w	r8, r8, r3
 80096fe:	9b07      	ldr	r3, [sp, #28]
 8009700:	b1eb      	cbz	r3, 800973e <_dtoa_r+0x76e>
 8009702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009704:	2b00      	cmp	r3, #0
 8009706:	d067      	beq.n	80097d8 <_dtoa_r+0x808>
 8009708:	b18f      	cbz	r7, 800972e <_dtoa_r+0x75e>
 800970a:	4631      	mov	r1, r6
 800970c:	463a      	mov	r2, r7
 800970e:	4620      	mov	r0, r4
 8009710:	f000 ff26 	bl	800a560 <__pow5mult>
 8009714:	9a04      	ldr	r2, [sp, #16]
 8009716:	4601      	mov	r1, r0
 8009718:	4606      	mov	r6, r0
 800971a:	4620      	mov	r0, r4
 800971c:	f000 fe8a 	bl	800a434 <__multiply>
 8009720:	9904      	ldr	r1, [sp, #16]
 8009722:	9008      	str	r0, [sp, #32]
 8009724:	4620      	mov	r0, r4
 8009726:	f000 fd9e 	bl	800a266 <_Bfree>
 800972a:	9b08      	ldr	r3, [sp, #32]
 800972c:	9304      	str	r3, [sp, #16]
 800972e:	9b07      	ldr	r3, [sp, #28]
 8009730:	1bda      	subs	r2, r3, r7
 8009732:	d004      	beq.n	800973e <_dtoa_r+0x76e>
 8009734:	9904      	ldr	r1, [sp, #16]
 8009736:	4620      	mov	r0, r4
 8009738:	f000 ff12 	bl	800a560 <__pow5mult>
 800973c:	9004      	str	r0, [sp, #16]
 800973e:	2101      	movs	r1, #1
 8009740:	4620      	mov	r0, r4
 8009742:	f000 fe6e 	bl	800a422 <__i2b>
 8009746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009748:	4607      	mov	r7, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 81d0 	beq.w	8009af0 <_dtoa_r+0xb20>
 8009750:	461a      	mov	r2, r3
 8009752:	4601      	mov	r1, r0
 8009754:	4620      	mov	r0, r4
 8009756:	f000 ff03 	bl	800a560 <__pow5mult>
 800975a:	9b06      	ldr	r3, [sp, #24]
 800975c:	2b01      	cmp	r3, #1
 800975e:	4607      	mov	r7, r0
 8009760:	dc40      	bgt.n	80097e4 <_dtoa_r+0x814>
 8009762:	9b00      	ldr	r3, [sp, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d139      	bne.n	80097dc <_dtoa_r+0x80c>
 8009768:	9b01      	ldr	r3, [sp, #4]
 800976a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800976e:	2b00      	cmp	r3, #0
 8009770:	d136      	bne.n	80097e0 <_dtoa_r+0x810>
 8009772:	9b01      	ldr	r3, [sp, #4]
 8009774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009778:	0d1b      	lsrs	r3, r3, #20
 800977a:	051b      	lsls	r3, r3, #20
 800977c:	b12b      	cbz	r3, 800978a <_dtoa_r+0x7ba>
 800977e:	9b05      	ldr	r3, [sp, #20]
 8009780:	3301      	adds	r3, #1
 8009782:	9305      	str	r3, [sp, #20]
 8009784:	f108 0801 	add.w	r8, r8, #1
 8009788:	2301      	movs	r3, #1
 800978a:	9307      	str	r3, [sp, #28]
 800978c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800978e:	2b00      	cmp	r3, #0
 8009790:	d12a      	bne.n	80097e8 <_dtoa_r+0x818>
 8009792:	2001      	movs	r0, #1
 8009794:	e030      	b.n	80097f8 <_dtoa_r+0x828>
 8009796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009798:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800979c:	e795      	b.n	80096ca <_dtoa_r+0x6fa>
 800979e:	9b07      	ldr	r3, [sp, #28]
 80097a0:	f109 37ff 	add.w	r7, r9, #4294967295
 80097a4:	42bb      	cmp	r3, r7
 80097a6:	bfbf      	itttt	lt
 80097a8:	9b07      	ldrlt	r3, [sp, #28]
 80097aa:	9707      	strlt	r7, [sp, #28]
 80097ac:	1afa      	sublt	r2, r7, r3
 80097ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80097b0:	bfbb      	ittet	lt
 80097b2:	189b      	addlt	r3, r3, r2
 80097b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80097b6:	1bdf      	subge	r7, r3, r7
 80097b8:	2700      	movlt	r7, #0
 80097ba:	f1b9 0f00 	cmp.w	r9, #0
 80097be:	bfb5      	itete	lt
 80097c0:	9b05      	ldrlt	r3, [sp, #20]
 80097c2:	9d05      	ldrge	r5, [sp, #20]
 80097c4:	eba3 0509 	sublt.w	r5, r3, r9
 80097c8:	464b      	movge	r3, r9
 80097ca:	bfb8      	it	lt
 80097cc:	2300      	movlt	r3, #0
 80097ce:	e77e      	b.n	80096ce <_dtoa_r+0x6fe>
 80097d0:	9f07      	ldr	r7, [sp, #28]
 80097d2:	9d05      	ldr	r5, [sp, #20]
 80097d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80097d6:	e783      	b.n	80096e0 <_dtoa_r+0x710>
 80097d8:	9a07      	ldr	r2, [sp, #28]
 80097da:	e7ab      	b.n	8009734 <_dtoa_r+0x764>
 80097dc:	2300      	movs	r3, #0
 80097de:	e7d4      	b.n	800978a <_dtoa_r+0x7ba>
 80097e0:	9b00      	ldr	r3, [sp, #0]
 80097e2:	e7d2      	b.n	800978a <_dtoa_r+0x7ba>
 80097e4:	2300      	movs	r3, #0
 80097e6:	9307      	str	r3, [sp, #28]
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80097ee:	6918      	ldr	r0, [r3, #16]
 80097f0:	f000 fdc9 	bl	800a386 <__hi0bits>
 80097f4:	f1c0 0020 	rsb	r0, r0, #32
 80097f8:	4440      	add	r0, r8
 80097fa:	f010 001f 	ands.w	r0, r0, #31
 80097fe:	d047      	beq.n	8009890 <_dtoa_r+0x8c0>
 8009800:	f1c0 0320 	rsb	r3, r0, #32
 8009804:	2b04      	cmp	r3, #4
 8009806:	dd3b      	ble.n	8009880 <_dtoa_r+0x8b0>
 8009808:	9b05      	ldr	r3, [sp, #20]
 800980a:	f1c0 001c 	rsb	r0, r0, #28
 800980e:	4403      	add	r3, r0
 8009810:	9305      	str	r3, [sp, #20]
 8009812:	4405      	add	r5, r0
 8009814:	4480      	add	r8, r0
 8009816:	9b05      	ldr	r3, [sp, #20]
 8009818:	2b00      	cmp	r3, #0
 800981a:	dd05      	ble.n	8009828 <_dtoa_r+0x858>
 800981c:	461a      	mov	r2, r3
 800981e:	9904      	ldr	r1, [sp, #16]
 8009820:	4620      	mov	r0, r4
 8009822:	f000 feeb 	bl	800a5fc <__lshift>
 8009826:	9004      	str	r0, [sp, #16]
 8009828:	f1b8 0f00 	cmp.w	r8, #0
 800982c:	dd05      	ble.n	800983a <_dtoa_r+0x86a>
 800982e:	4639      	mov	r1, r7
 8009830:	4642      	mov	r2, r8
 8009832:	4620      	mov	r0, r4
 8009834:	f000 fee2 	bl	800a5fc <__lshift>
 8009838:	4607      	mov	r7, r0
 800983a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800983c:	b353      	cbz	r3, 8009894 <_dtoa_r+0x8c4>
 800983e:	4639      	mov	r1, r7
 8009840:	9804      	ldr	r0, [sp, #16]
 8009842:	f000 ff2f 	bl	800a6a4 <__mcmp>
 8009846:	2800      	cmp	r0, #0
 8009848:	da24      	bge.n	8009894 <_dtoa_r+0x8c4>
 800984a:	2300      	movs	r3, #0
 800984c:	220a      	movs	r2, #10
 800984e:	9904      	ldr	r1, [sp, #16]
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fd1f 	bl	800a294 <__multadd>
 8009856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009858:	9004      	str	r0, [sp, #16]
 800985a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 814d 	beq.w	8009afe <_dtoa_r+0xb2e>
 8009864:	2300      	movs	r3, #0
 8009866:	4631      	mov	r1, r6
 8009868:	220a      	movs	r2, #10
 800986a:	4620      	mov	r0, r4
 800986c:	f000 fd12 	bl	800a294 <__multadd>
 8009870:	9b02      	ldr	r3, [sp, #8]
 8009872:	2b00      	cmp	r3, #0
 8009874:	4606      	mov	r6, r0
 8009876:	dc4f      	bgt.n	8009918 <_dtoa_r+0x948>
 8009878:	9b06      	ldr	r3, [sp, #24]
 800987a:	2b02      	cmp	r3, #2
 800987c:	dd4c      	ble.n	8009918 <_dtoa_r+0x948>
 800987e:	e011      	b.n	80098a4 <_dtoa_r+0x8d4>
 8009880:	d0c9      	beq.n	8009816 <_dtoa_r+0x846>
 8009882:	9a05      	ldr	r2, [sp, #20]
 8009884:	331c      	adds	r3, #28
 8009886:	441a      	add	r2, r3
 8009888:	9205      	str	r2, [sp, #20]
 800988a:	441d      	add	r5, r3
 800988c:	4498      	add	r8, r3
 800988e:	e7c2      	b.n	8009816 <_dtoa_r+0x846>
 8009890:	4603      	mov	r3, r0
 8009892:	e7f6      	b.n	8009882 <_dtoa_r+0x8b2>
 8009894:	f1b9 0f00 	cmp.w	r9, #0
 8009898:	dc38      	bgt.n	800990c <_dtoa_r+0x93c>
 800989a:	9b06      	ldr	r3, [sp, #24]
 800989c:	2b02      	cmp	r3, #2
 800989e:	dd35      	ble.n	800990c <_dtoa_r+0x93c>
 80098a0:	f8cd 9008 	str.w	r9, [sp, #8]
 80098a4:	9b02      	ldr	r3, [sp, #8]
 80098a6:	b963      	cbnz	r3, 80098c2 <_dtoa_r+0x8f2>
 80098a8:	4639      	mov	r1, r7
 80098aa:	2205      	movs	r2, #5
 80098ac:	4620      	mov	r0, r4
 80098ae:	f000 fcf1 	bl	800a294 <__multadd>
 80098b2:	4601      	mov	r1, r0
 80098b4:	4607      	mov	r7, r0
 80098b6:	9804      	ldr	r0, [sp, #16]
 80098b8:	f000 fef4 	bl	800a6a4 <__mcmp>
 80098bc:	2800      	cmp	r0, #0
 80098be:	f73f adcc 	bgt.w	800945a <_dtoa_r+0x48a>
 80098c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098c4:	465d      	mov	r5, fp
 80098c6:	ea6f 0a03 	mvn.w	sl, r3
 80098ca:	f04f 0900 	mov.w	r9, #0
 80098ce:	4639      	mov	r1, r7
 80098d0:	4620      	mov	r0, r4
 80098d2:	f000 fcc8 	bl	800a266 <_Bfree>
 80098d6:	2e00      	cmp	r6, #0
 80098d8:	f43f aeb7 	beq.w	800964a <_dtoa_r+0x67a>
 80098dc:	f1b9 0f00 	cmp.w	r9, #0
 80098e0:	d005      	beq.n	80098ee <_dtoa_r+0x91e>
 80098e2:	45b1      	cmp	r9, r6
 80098e4:	d003      	beq.n	80098ee <_dtoa_r+0x91e>
 80098e6:	4649      	mov	r1, r9
 80098e8:	4620      	mov	r0, r4
 80098ea:	f000 fcbc 	bl	800a266 <_Bfree>
 80098ee:	4631      	mov	r1, r6
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 fcb8 	bl	800a266 <_Bfree>
 80098f6:	e6a8      	b.n	800964a <_dtoa_r+0x67a>
 80098f8:	2700      	movs	r7, #0
 80098fa:	463e      	mov	r6, r7
 80098fc:	e7e1      	b.n	80098c2 <_dtoa_r+0x8f2>
 80098fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009902:	463e      	mov	r6, r7
 8009904:	e5a9      	b.n	800945a <_dtoa_r+0x48a>
 8009906:	bf00      	nop
 8009908:	40240000 	.word	0x40240000
 800990c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800990e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 80fa 	beq.w	8009b0c <_dtoa_r+0xb3c>
 8009918:	2d00      	cmp	r5, #0
 800991a:	dd05      	ble.n	8009928 <_dtoa_r+0x958>
 800991c:	4631      	mov	r1, r6
 800991e:	462a      	mov	r2, r5
 8009920:	4620      	mov	r0, r4
 8009922:	f000 fe6b 	bl	800a5fc <__lshift>
 8009926:	4606      	mov	r6, r0
 8009928:	9b07      	ldr	r3, [sp, #28]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d04c      	beq.n	80099c8 <_dtoa_r+0x9f8>
 800992e:	6871      	ldr	r1, [r6, #4]
 8009930:	4620      	mov	r0, r4
 8009932:	f000 fc64 	bl	800a1fe <_Balloc>
 8009936:	6932      	ldr	r2, [r6, #16]
 8009938:	3202      	adds	r2, #2
 800993a:	4605      	mov	r5, r0
 800993c:	0092      	lsls	r2, r2, #2
 800993e:	f106 010c 	add.w	r1, r6, #12
 8009942:	300c      	adds	r0, #12
 8009944:	f000 fc50 	bl	800a1e8 <memcpy>
 8009948:	2201      	movs	r2, #1
 800994a:	4629      	mov	r1, r5
 800994c:	4620      	mov	r0, r4
 800994e:	f000 fe55 	bl	800a5fc <__lshift>
 8009952:	9b00      	ldr	r3, [sp, #0]
 8009954:	f8cd b014 	str.w	fp, [sp, #20]
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	46b1      	mov	r9, r6
 800995e:	9307      	str	r3, [sp, #28]
 8009960:	4606      	mov	r6, r0
 8009962:	4639      	mov	r1, r7
 8009964:	9804      	ldr	r0, [sp, #16]
 8009966:	f7ff faa7 	bl	8008eb8 <quorem>
 800996a:	4649      	mov	r1, r9
 800996c:	4605      	mov	r5, r0
 800996e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009972:	9804      	ldr	r0, [sp, #16]
 8009974:	f000 fe96 	bl	800a6a4 <__mcmp>
 8009978:	4632      	mov	r2, r6
 800997a:	9000      	str	r0, [sp, #0]
 800997c:	4639      	mov	r1, r7
 800997e:	4620      	mov	r0, r4
 8009980:	f000 feaa 	bl	800a6d8 <__mdiff>
 8009984:	68c3      	ldr	r3, [r0, #12]
 8009986:	4602      	mov	r2, r0
 8009988:	bb03      	cbnz	r3, 80099cc <_dtoa_r+0x9fc>
 800998a:	4601      	mov	r1, r0
 800998c:	9008      	str	r0, [sp, #32]
 800998e:	9804      	ldr	r0, [sp, #16]
 8009990:	f000 fe88 	bl	800a6a4 <__mcmp>
 8009994:	9a08      	ldr	r2, [sp, #32]
 8009996:	4603      	mov	r3, r0
 8009998:	4611      	mov	r1, r2
 800999a:	4620      	mov	r0, r4
 800999c:	9308      	str	r3, [sp, #32]
 800999e:	f000 fc62 	bl	800a266 <_Bfree>
 80099a2:	9b08      	ldr	r3, [sp, #32]
 80099a4:	b9a3      	cbnz	r3, 80099d0 <_dtoa_r+0xa00>
 80099a6:	9a06      	ldr	r2, [sp, #24]
 80099a8:	b992      	cbnz	r2, 80099d0 <_dtoa_r+0xa00>
 80099aa:	9a07      	ldr	r2, [sp, #28]
 80099ac:	b982      	cbnz	r2, 80099d0 <_dtoa_r+0xa00>
 80099ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80099b2:	d029      	beq.n	8009a08 <_dtoa_r+0xa38>
 80099b4:	9b00      	ldr	r3, [sp, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	dd01      	ble.n	80099be <_dtoa_r+0x9ee>
 80099ba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80099be:	9b05      	ldr	r3, [sp, #20]
 80099c0:	1c5d      	adds	r5, r3, #1
 80099c2:	f883 8000 	strb.w	r8, [r3]
 80099c6:	e782      	b.n	80098ce <_dtoa_r+0x8fe>
 80099c8:	4630      	mov	r0, r6
 80099ca:	e7c2      	b.n	8009952 <_dtoa_r+0x982>
 80099cc:	2301      	movs	r3, #1
 80099ce:	e7e3      	b.n	8009998 <_dtoa_r+0x9c8>
 80099d0:	9a00      	ldr	r2, [sp, #0]
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	db04      	blt.n	80099e0 <_dtoa_r+0xa10>
 80099d6:	d125      	bne.n	8009a24 <_dtoa_r+0xa54>
 80099d8:	9a06      	ldr	r2, [sp, #24]
 80099da:	bb1a      	cbnz	r2, 8009a24 <_dtoa_r+0xa54>
 80099dc:	9a07      	ldr	r2, [sp, #28]
 80099de:	bb0a      	cbnz	r2, 8009a24 <_dtoa_r+0xa54>
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	ddec      	ble.n	80099be <_dtoa_r+0x9ee>
 80099e4:	2201      	movs	r2, #1
 80099e6:	9904      	ldr	r1, [sp, #16]
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 fe07 	bl	800a5fc <__lshift>
 80099ee:	4639      	mov	r1, r7
 80099f0:	9004      	str	r0, [sp, #16]
 80099f2:	f000 fe57 	bl	800a6a4 <__mcmp>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	dc03      	bgt.n	8009a02 <_dtoa_r+0xa32>
 80099fa:	d1e0      	bne.n	80099be <_dtoa_r+0x9ee>
 80099fc:	f018 0f01 	tst.w	r8, #1
 8009a00:	d0dd      	beq.n	80099be <_dtoa_r+0x9ee>
 8009a02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009a06:	d1d8      	bne.n	80099ba <_dtoa_r+0x9ea>
 8009a08:	9b05      	ldr	r3, [sp, #20]
 8009a0a:	9a05      	ldr	r2, [sp, #20]
 8009a0c:	1c5d      	adds	r5, r3, #1
 8009a0e:	2339      	movs	r3, #57	; 0x39
 8009a10:	7013      	strb	r3, [r2, #0]
 8009a12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a16:	2b39      	cmp	r3, #57	; 0x39
 8009a18:	f105 32ff 	add.w	r2, r5, #4294967295
 8009a1c:	d04f      	beq.n	8009abe <_dtoa_r+0xaee>
 8009a1e:	3301      	adds	r3, #1
 8009a20:	7013      	strb	r3, [r2, #0]
 8009a22:	e754      	b.n	80098ce <_dtoa_r+0x8fe>
 8009a24:	9a05      	ldr	r2, [sp, #20]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f102 0501 	add.w	r5, r2, #1
 8009a2c:	dd06      	ble.n	8009a3c <_dtoa_r+0xa6c>
 8009a2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009a32:	d0e9      	beq.n	8009a08 <_dtoa_r+0xa38>
 8009a34:	f108 0801 	add.w	r8, r8, #1
 8009a38:	9b05      	ldr	r3, [sp, #20]
 8009a3a:	e7c2      	b.n	80099c2 <_dtoa_r+0x9f2>
 8009a3c:	9a02      	ldr	r2, [sp, #8]
 8009a3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009a42:	eba5 030b 	sub.w	r3, r5, fp
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d021      	beq.n	8009a8e <_dtoa_r+0xabe>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	220a      	movs	r2, #10
 8009a4e:	9904      	ldr	r1, [sp, #16]
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 fc1f 	bl	800a294 <__multadd>
 8009a56:	45b1      	cmp	r9, r6
 8009a58:	9004      	str	r0, [sp, #16]
 8009a5a:	f04f 0300 	mov.w	r3, #0
 8009a5e:	f04f 020a 	mov.w	r2, #10
 8009a62:	4649      	mov	r1, r9
 8009a64:	4620      	mov	r0, r4
 8009a66:	d105      	bne.n	8009a74 <_dtoa_r+0xaa4>
 8009a68:	f000 fc14 	bl	800a294 <__multadd>
 8009a6c:	4681      	mov	r9, r0
 8009a6e:	4606      	mov	r6, r0
 8009a70:	9505      	str	r5, [sp, #20]
 8009a72:	e776      	b.n	8009962 <_dtoa_r+0x992>
 8009a74:	f000 fc0e 	bl	800a294 <__multadd>
 8009a78:	4631      	mov	r1, r6
 8009a7a:	4681      	mov	r9, r0
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	220a      	movs	r2, #10
 8009a80:	4620      	mov	r0, r4
 8009a82:	f000 fc07 	bl	800a294 <__multadd>
 8009a86:	4606      	mov	r6, r0
 8009a88:	e7f2      	b.n	8009a70 <_dtoa_r+0xaa0>
 8009a8a:	f04f 0900 	mov.w	r9, #0
 8009a8e:	2201      	movs	r2, #1
 8009a90:	9904      	ldr	r1, [sp, #16]
 8009a92:	4620      	mov	r0, r4
 8009a94:	f000 fdb2 	bl	800a5fc <__lshift>
 8009a98:	4639      	mov	r1, r7
 8009a9a:	9004      	str	r0, [sp, #16]
 8009a9c:	f000 fe02 	bl	800a6a4 <__mcmp>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	dcb6      	bgt.n	8009a12 <_dtoa_r+0xa42>
 8009aa4:	d102      	bne.n	8009aac <_dtoa_r+0xadc>
 8009aa6:	f018 0f01 	tst.w	r8, #1
 8009aaa:	d1b2      	bne.n	8009a12 <_dtoa_r+0xa42>
 8009aac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ab0:	2b30      	cmp	r3, #48	; 0x30
 8009ab2:	f105 32ff 	add.w	r2, r5, #4294967295
 8009ab6:	f47f af0a 	bne.w	80098ce <_dtoa_r+0x8fe>
 8009aba:	4615      	mov	r5, r2
 8009abc:	e7f6      	b.n	8009aac <_dtoa_r+0xadc>
 8009abe:	4593      	cmp	fp, r2
 8009ac0:	d105      	bne.n	8009ace <_dtoa_r+0xafe>
 8009ac2:	2331      	movs	r3, #49	; 0x31
 8009ac4:	f10a 0a01 	add.w	sl, sl, #1
 8009ac8:	f88b 3000 	strb.w	r3, [fp]
 8009acc:	e6ff      	b.n	80098ce <_dtoa_r+0x8fe>
 8009ace:	4615      	mov	r5, r2
 8009ad0:	e79f      	b.n	8009a12 <_dtoa_r+0xa42>
 8009ad2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009b38 <_dtoa_r+0xb68>
 8009ad6:	e007      	b.n	8009ae8 <_dtoa_r+0xb18>
 8009ad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ada:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009b3c <_dtoa_r+0xb6c>
 8009ade:	b11b      	cbz	r3, 8009ae8 <_dtoa_r+0xb18>
 8009ae0:	f10b 0308 	add.w	r3, fp, #8
 8009ae4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ae6:	6013      	str	r3, [r2, #0]
 8009ae8:	4658      	mov	r0, fp
 8009aea:	b017      	add	sp, #92	; 0x5c
 8009aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af0:	9b06      	ldr	r3, [sp, #24]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	f77f ae35 	ble.w	8009762 <_dtoa_r+0x792>
 8009af8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009afa:	9307      	str	r3, [sp, #28]
 8009afc:	e649      	b.n	8009792 <_dtoa_r+0x7c2>
 8009afe:	9b02      	ldr	r3, [sp, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	dc03      	bgt.n	8009b0c <_dtoa_r+0xb3c>
 8009b04:	9b06      	ldr	r3, [sp, #24]
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	f73f aecc 	bgt.w	80098a4 <_dtoa_r+0x8d4>
 8009b0c:	465d      	mov	r5, fp
 8009b0e:	4639      	mov	r1, r7
 8009b10:	9804      	ldr	r0, [sp, #16]
 8009b12:	f7ff f9d1 	bl	8008eb8 <quorem>
 8009b16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009b1a:	f805 8b01 	strb.w	r8, [r5], #1
 8009b1e:	9a02      	ldr	r2, [sp, #8]
 8009b20:	eba5 030b 	sub.w	r3, r5, fp
 8009b24:	429a      	cmp	r2, r3
 8009b26:	ddb0      	ble.n	8009a8a <_dtoa_r+0xaba>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	220a      	movs	r2, #10
 8009b2c:	9904      	ldr	r1, [sp, #16]
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 fbb0 	bl	800a294 <__multadd>
 8009b34:	9004      	str	r0, [sp, #16]
 8009b36:	e7ea      	b.n	8009b0e <_dtoa_r+0xb3e>
 8009b38:	0800af6c 	.word	0x0800af6c
 8009b3c:	0800afe8 	.word	0x0800afe8

08009b40 <rshift>:
 8009b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b42:	6906      	ldr	r6, [r0, #16]
 8009b44:	114b      	asrs	r3, r1, #5
 8009b46:	429e      	cmp	r6, r3
 8009b48:	f100 0414 	add.w	r4, r0, #20
 8009b4c:	dd30      	ble.n	8009bb0 <rshift+0x70>
 8009b4e:	f011 011f 	ands.w	r1, r1, #31
 8009b52:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009b56:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009b5a:	d108      	bne.n	8009b6e <rshift+0x2e>
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	42b2      	cmp	r2, r6
 8009b60:	460b      	mov	r3, r1
 8009b62:	d211      	bcs.n	8009b88 <rshift+0x48>
 8009b64:	f852 3b04 	ldr.w	r3, [r2], #4
 8009b68:	f841 3b04 	str.w	r3, [r1], #4
 8009b6c:	e7f7      	b.n	8009b5e <rshift+0x1e>
 8009b6e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009b72:	f1c1 0c20 	rsb	ip, r1, #32
 8009b76:	40cd      	lsrs	r5, r1
 8009b78:	3204      	adds	r2, #4
 8009b7a:	4623      	mov	r3, r4
 8009b7c:	42b2      	cmp	r2, r6
 8009b7e:	4617      	mov	r7, r2
 8009b80:	d30c      	bcc.n	8009b9c <rshift+0x5c>
 8009b82:	601d      	str	r5, [r3, #0]
 8009b84:	b105      	cbz	r5, 8009b88 <rshift+0x48>
 8009b86:	3304      	adds	r3, #4
 8009b88:	1b1a      	subs	r2, r3, r4
 8009b8a:	42a3      	cmp	r3, r4
 8009b8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b90:	bf08      	it	eq
 8009b92:	2300      	moveq	r3, #0
 8009b94:	6102      	str	r2, [r0, #16]
 8009b96:	bf08      	it	eq
 8009b98:	6143      	streq	r3, [r0, #20]
 8009b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b9c:	683f      	ldr	r7, [r7, #0]
 8009b9e:	fa07 f70c 	lsl.w	r7, r7, ip
 8009ba2:	433d      	orrs	r5, r7
 8009ba4:	f843 5b04 	str.w	r5, [r3], #4
 8009ba8:	f852 5b04 	ldr.w	r5, [r2], #4
 8009bac:	40cd      	lsrs	r5, r1
 8009bae:	e7e5      	b.n	8009b7c <rshift+0x3c>
 8009bb0:	4623      	mov	r3, r4
 8009bb2:	e7e9      	b.n	8009b88 <rshift+0x48>

08009bb4 <__hexdig_fun>:
 8009bb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009bb8:	2b09      	cmp	r3, #9
 8009bba:	d802      	bhi.n	8009bc2 <__hexdig_fun+0xe>
 8009bbc:	3820      	subs	r0, #32
 8009bbe:	b2c0      	uxtb	r0, r0
 8009bc0:	4770      	bx	lr
 8009bc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009bc6:	2b05      	cmp	r3, #5
 8009bc8:	d801      	bhi.n	8009bce <__hexdig_fun+0x1a>
 8009bca:	3847      	subs	r0, #71	; 0x47
 8009bcc:	e7f7      	b.n	8009bbe <__hexdig_fun+0xa>
 8009bce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009bd2:	2b05      	cmp	r3, #5
 8009bd4:	d801      	bhi.n	8009bda <__hexdig_fun+0x26>
 8009bd6:	3827      	subs	r0, #39	; 0x27
 8009bd8:	e7f1      	b.n	8009bbe <__hexdig_fun+0xa>
 8009bda:	2000      	movs	r0, #0
 8009bdc:	4770      	bx	lr

08009bde <__gethex>:
 8009bde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be2:	b08b      	sub	sp, #44	; 0x2c
 8009be4:	468a      	mov	sl, r1
 8009be6:	9002      	str	r0, [sp, #8]
 8009be8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009bea:	9306      	str	r3, [sp, #24]
 8009bec:	4690      	mov	r8, r2
 8009bee:	f000 fad0 	bl	800a192 <__localeconv_l>
 8009bf2:	6803      	ldr	r3, [r0, #0]
 8009bf4:	9303      	str	r3, [sp, #12]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7f6 fafc 	bl	80001f4 <strlen>
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	9001      	str	r0, [sp, #4]
 8009c00:	4403      	add	r3, r0
 8009c02:	f04f 0b00 	mov.w	fp, #0
 8009c06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009c0a:	9307      	str	r3, [sp, #28]
 8009c0c:	f8da 3000 	ldr.w	r3, [sl]
 8009c10:	3302      	adds	r3, #2
 8009c12:	461f      	mov	r7, r3
 8009c14:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009c18:	2830      	cmp	r0, #48	; 0x30
 8009c1a:	d06c      	beq.n	8009cf6 <__gethex+0x118>
 8009c1c:	f7ff ffca 	bl	8009bb4 <__hexdig_fun>
 8009c20:	4604      	mov	r4, r0
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d16a      	bne.n	8009cfc <__gethex+0x11e>
 8009c26:	9a01      	ldr	r2, [sp, #4]
 8009c28:	9903      	ldr	r1, [sp, #12]
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	f001 f8fe 	bl	800ae2c <strncmp>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d166      	bne.n	8009d02 <__gethex+0x124>
 8009c34:	9b01      	ldr	r3, [sp, #4]
 8009c36:	5cf8      	ldrb	r0, [r7, r3]
 8009c38:	18fe      	adds	r6, r7, r3
 8009c3a:	f7ff ffbb 	bl	8009bb4 <__hexdig_fun>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d062      	beq.n	8009d08 <__gethex+0x12a>
 8009c42:	4633      	mov	r3, r6
 8009c44:	7818      	ldrb	r0, [r3, #0]
 8009c46:	2830      	cmp	r0, #48	; 0x30
 8009c48:	461f      	mov	r7, r3
 8009c4a:	f103 0301 	add.w	r3, r3, #1
 8009c4e:	d0f9      	beq.n	8009c44 <__gethex+0x66>
 8009c50:	f7ff ffb0 	bl	8009bb4 <__hexdig_fun>
 8009c54:	fab0 f580 	clz	r5, r0
 8009c58:	096d      	lsrs	r5, r5, #5
 8009c5a:	4634      	mov	r4, r6
 8009c5c:	f04f 0b01 	mov.w	fp, #1
 8009c60:	463a      	mov	r2, r7
 8009c62:	4616      	mov	r6, r2
 8009c64:	3201      	adds	r2, #1
 8009c66:	7830      	ldrb	r0, [r6, #0]
 8009c68:	f7ff ffa4 	bl	8009bb4 <__hexdig_fun>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d1f8      	bne.n	8009c62 <__gethex+0x84>
 8009c70:	9a01      	ldr	r2, [sp, #4]
 8009c72:	9903      	ldr	r1, [sp, #12]
 8009c74:	4630      	mov	r0, r6
 8009c76:	f001 f8d9 	bl	800ae2c <strncmp>
 8009c7a:	b950      	cbnz	r0, 8009c92 <__gethex+0xb4>
 8009c7c:	b954      	cbnz	r4, 8009c94 <__gethex+0xb6>
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	18f4      	adds	r4, r6, r3
 8009c82:	4622      	mov	r2, r4
 8009c84:	4616      	mov	r6, r2
 8009c86:	3201      	adds	r2, #1
 8009c88:	7830      	ldrb	r0, [r6, #0]
 8009c8a:	f7ff ff93 	bl	8009bb4 <__hexdig_fun>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d1f8      	bne.n	8009c84 <__gethex+0xa6>
 8009c92:	b10c      	cbz	r4, 8009c98 <__gethex+0xba>
 8009c94:	1ba4      	subs	r4, r4, r6
 8009c96:	00a4      	lsls	r4, r4, #2
 8009c98:	7833      	ldrb	r3, [r6, #0]
 8009c9a:	2b50      	cmp	r3, #80	; 0x50
 8009c9c:	d001      	beq.n	8009ca2 <__gethex+0xc4>
 8009c9e:	2b70      	cmp	r3, #112	; 0x70
 8009ca0:	d140      	bne.n	8009d24 <__gethex+0x146>
 8009ca2:	7873      	ldrb	r3, [r6, #1]
 8009ca4:	2b2b      	cmp	r3, #43	; 0x2b
 8009ca6:	d031      	beq.n	8009d0c <__gethex+0x12e>
 8009ca8:	2b2d      	cmp	r3, #45	; 0x2d
 8009caa:	d033      	beq.n	8009d14 <__gethex+0x136>
 8009cac:	1c71      	adds	r1, r6, #1
 8009cae:	f04f 0900 	mov.w	r9, #0
 8009cb2:	7808      	ldrb	r0, [r1, #0]
 8009cb4:	f7ff ff7e 	bl	8009bb4 <__hexdig_fun>
 8009cb8:	1e43      	subs	r3, r0, #1
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	2b18      	cmp	r3, #24
 8009cbe:	d831      	bhi.n	8009d24 <__gethex+0x146>
 8009cc0:	f1a0 0210 	sub.w	r2, r0, #16
 8009cc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009cc8:	f7ff ff74 	bl	8009bb4 <__hexdig_fun>
 8009ccc:	1e43      	subs	r3, r0, #1
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b18      	cmp	r3, #24
 8009cd2:	d922      	bls.n	8009d1a <__gethex+0x13c>
 8009cd4:	f1b9 0f00 	cmp.w	r9, #0
 8009cd8:	d000      	beq.n	8009cdc <__gethex+0xfe>
 8009cda:	4252      	negs	r2, r2
 8009cdc:	4414      	add	r4, r2
 8009cde:	f8ca 1000 	str.w	r1, [sl]
 8009ce2:	b30d      	cbz	r5, 8009d28 <__gethex+0x14a>
 8009ce4:	f1bb 0f00 	cmp.w	fp, #0
 8009ce8:	bf0c      	ite	eq
 8009cea:	2706      	moveq	r7, #6
 8009cec:	2700      	movne	r7, #0
 8009cee:	4638      	mov	r0, r7
 8009cf0:	b00b      	add	sp, #44	; 0x2c
 8009cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf6:	f10b 0b01 	add.w	fp, fp, #1
 8009cfa:	e78a      	b.n	8009c12 <__gethex+0x34>
 8009cfc:	2500      	movs	r5, #0
 8009cfe:	462c      	mov	r4, r5
 8009d00:	e7ae      	b.n	8009c60 <__gethex+0x82>
 8009d02:	463e      	mov	r6, r7
 8009d04:	2501      	movs	r5, #1
 8009d06:	e7c7      	b.n	8009c98 <__gethex+0xba>
 8009d08:	4604      	mov	r4, r0
 8009d0a:	e7fb      	b.n	8009d04 <__gethex+0x126>
 8009d0c:	f04f 0900 	mov.w	r9, #0
 8009d10:	1cb1      	adds	r1, r6, #2
 8009d12:	e7ce      	b.n	8009cb2 <__gethex+0xd4>
 8009d14:	f04f 0901 	mov.w	r9, #1
 8009d18:	e7fa      	b.n	8009d10 <__gethex+0x132>
 8009d1a:	230a      	movs	r3, #10
 8009d1c:	fb03 0202 	mla	r2, r3, r2, r0
 8009d20:	3a10      	subs	r2, #16
 8009d22:	e7cf      	b.n	8009cc4 <__gethex+0xe6>
 8009d24:	4631      	mov	r1, r6
 8009d26:	e7da      	b.n	8009cde <__gethex+0x100>
 8009d28:	1bf3      	subs	r3, r6, r7
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	2b07      	cmp	r3, #7
 8009d30:	dc49      	bgt.n	8009dc6 <__gethex+0x1e8>
 8009d32:	9802      	ldr	r0, [sp, #8]
 8009d34:	f000 fa63 	bl	800a1fe <_Balloc>
 8009d38:	9b01      	ldr	r3, [sp, #4]
 8009d3a:	f100 0914 	add.w	r9, r0, #20
 8009d3e:	f04f 0b00 	mov.w	fp, #0
 8009d42:	f1c3 0301 	rsb	r3, r3, #1
 8009d46:	4605      	mov	r5, r0
 8009d48:	f8cd 9010 	str.w	r9, [sp, #16]
 8009d4c:	46da      	mov	sl, fp
 8009d4e:	9308      	str	r3, [sp, #32]
 8009d50:	42b7      	cmp	r7, r6
 8009d52:	d33b      	bcc.n	8009dcc <__gethex+0x1ee>
 8009d54:	9804      	ldr	r0, [sp, #16]
 8009d56:	f840 ab04 	str.w	sl, [r0], #4
 8009d5a:	eba0 0009 	sub.w	r0, r0, r9
 8009d5e:	1080      	asrs	r0, r0, #2
 8009d60:	6128      	str	r0, [r5, #16]
 8009d62:	0147      	lsls	r7, r0, #5
 8009d64:	4650      	mov	r0, sl
 8009d66:	f000 fb0e 	bl	800a386 <__hi0bits>
 8009d6a:	f8d8 6000 	ldr.w	r6, [r8]
 8009d6e:	1a3f      	subs	r7, r7, r0
 8009d70:	42b7      	cmp	r7, r6
 8009d72:	dd64      	ble.n	8009e3e <__gethex+0x260>
 8009d74:	1bbf      	subs	r7, r7, r6
 8009d76:	4639      	mov	r1, r7
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f000 fe1d 	bl	800a9b8 <__any_on>
 8009d7e:	4682      	mov	sl, r0
 8009d80:	b178      	cbz	r0, 8009da2 <__gethex+0x1c4>
 8009d82:	1e7b      	subs	r3, r7, #1
 8009d84:	1159      	asrs	r1, r3, #5
 8009d86:	f003 021f 	and.w	r2, r3, #31
 8009d8a:	f04f 0a01 	mov.w	sl, #1
 8009d8e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009d92:	fa0a f202 	lsl.w	r2, sl, r2
 8009d96:	420a      	tst	r2, r1
 8009d98:	d003      	beq.n	8009da2 <__gethex+0x1c4>
 8009d9a:	4553      	cmp	r3, sl
 8009d9c:	dc46      	bgt.n	8009e2c <__gethex+0x24e>
 8009d9e:	f04f 0a02 	mov.w	sl, #2
 8009da2:	4639      	mov	r1, r7
 8009da4:	4628      	mov	r0, r5
 8009da6:	f7ff fecb 	bl	8009b40 <rshift>
 8009daa:	443c      	add	r4, r7
 8009dac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009db0:	42a3      	cmp	r3, r4
 8009db2:	da52      	bge.n	8009e5a <__gethex+0x27c>
 8009db4:	4629      	mov	r1, r5
 8009db6:	9802      	ldr	r0, [sp, #8]
 8009db8:	f000 fa55 	bl	800a266 <_Bfree>
 8009dbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	27a3      	movs	r7, #163	; 0xa3
 8009dc4:	e793      	b.n	8009cee <__gethex+0x110>
 8009dc6:	3101      	adds	r1, #1
 8009dc8:	105b      	asrs	r3, r3, #1
 8009dca:	e7b0      	b.n	8009d2e <__gethex+0x150>
 8009dcc:	1e73      	subs	r3, r6, #1
 8009dce:	9305      	str	r3, [sp, #20]
 8009dd0:	9a07      	ldr	r2, [sp, #28]
 8009dd2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d018      	beq.n	8009e0c <__gethex+0x22e>
 8009dda:	f1bb 0f20 	cmp.w	fp, #32
 8009dde:	d107      	bne.n	8009df0 <__gethex+0x212>
 8009de0:	9b04      	ldr	r3, [sp, #16]
 8009de2:	f8c3 a000 	str.w	sl, [r3]
 8009de6:	3304      	adds	r3, #4
 8009de8:	f04f 0a00 	mov.w	sl, #0
 8009dec:	9304      	str	r3, [sp, #16]
 8009dee:	46d3      	mov	fp, sl
 8009df0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009df4:	f7ff fede 	bl	8009bb4 <__hexdig_fun>
 8009df8:	f000 000f 	and.w	r0, r0, #15
 8009dfc:	fa00 f00b 	lsl.w	r0, r0, fp
 8009e00:	ea4a 0a00 	orr.w	sl, sl, r0
 8009e04:	f10b 0b04 	add.w	fp, fp, #4
 8009e08:	9b05      	ldr	r3, [sp, #20]
 8009e0a:	e00d      	b.n	8009e28 <__gethex+0x24a>
 8009e0c:	9b05      	ldr	r3, [sp, #20]
 8009e0e:	9a08      	ldr	r2, [sp, #32]
 8009e10:	4413      	add	r3, r2
 8009e12:	42bb      	cmp	r3, r7
 8009e14:	d3e1      	bcc.n	8009dda <__gethex+0x1fc>
 8009e16:	4618      	mov	r0, r3
 8009e18:	9a01      	ldr	r2, [sp, #4]
 8009e1a:	9903      	ldr	r1, [sp, #12]
 8009e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e1e:	f001 f805 	bl	800ae2c <strncmp>
 8009e22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d1d8      	bne.n	8009dda <__gethex+0x1fc>
 8009e28:	461e      	mov	r6, r3
 8009e2a:	e791      	b.n	8009d50 <__gethex+0x172>
 8009e2c:	1eb9      	subs	r1, r7, #2
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f000 fdc2 	bl	800a9b8 <__any_on>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d0b2      	beq.n	8009d9e <__gethex+0x1c0>
 8009e38:	f04f 0a03 	mov.w	sl, #3
 8009e3c:	e7b1      	b.n	8009da2 <__gethex+0x1c4>
 8009e3e:	da09      	bge.n	8009e54 <__gethex+0x276>
 8009e40:	1bf7      	subs	r7, r6, r7
 8009e42:	4629      	mov	r1, r5
 8009e44:	463a      	mov	r2, r7
 8009e46:	9802      	ldr	r0, [sp, #8]
 8009e48:	f000 fbd8 	bl	800a5fc <__lshift>
 8009e4c:	1be4      	subs	r4, r4, r7
 8009e4e:	4605      	mov	r5, r0
 8009e50:	f100 0914 	add.w	r9, r0, #20
 8009e54:	f04f 0a00 	mov.w	sl, #0
 8009e58:	e7a8      	b.n	8009dac <__gethex+0x1ce>
 8009e5a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009e5e:	42a0      	cmp	r0, r4
 8009e60:	dd6a      	ble.n	8009f38 <__gethex+0x35a>
 8009e62:	1b04      	subs	r4, r0, r4
 8009e64:	42a6      	cmp	r6, r4
 8009e66:	dc2e      	bgt.n	8009ec6 <__gethex+0x2e8>
 8009e68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d022      	beq.n	8009eb6 <__gethex+0x2d8>
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d024      	beq.n	8009ebe <__gethex+0x2e0>
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d115      	bne.n	8009ea4 <__gethex+0x2c6>
 8009e78:	42a6      	cmp	r6, r4
 8009e7a:	d113      	bne.n	8009ea4 <__gethex+0x2c6>
 8009e7c:	2e01      	cmp	r6, #1
 8009e7e:	dc0b      	bgt.n	8009e98 <__gethex+0x2ba>
 8009e80:	9a06      	ldr	r2, [sp, #24]
 8009e82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	2301      	movs	r3, #1
 8009e8a:	612b      	str	r3, [r5, #16]
 8009e8c:	f8c9 3000 	str.w	r3, [r9]
 8009e90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e92:	2762      	movs	r7, #98	; 0x62
 8009e94:	601d      	str	r5, [r3, #0]
 8009e96:	e72a      	b.n	8009cee <__gethex+0x110>
 8009e98:	1e71      	subs	r1, r6, #1
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	f000 fd8c 	bl	800a9b8 <__any_on>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d1ed      	bne.n	8009e80 <__gethex+0x2a2>
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	9802      	ldr	r0, [sp, #8]
 8009ea8:	f000 f9dd 	bl	800a266 <_Bfree>
 8009eac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	2750      	movs	r7, #80	; 0x50
 8009eb4:	e71b      	b.n	8009cee <__gethex+0x110>
 8009eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d0e1      	beq.n	8009e80 <__gethex+0x2a2>
 8009ebc:	e7f2      	b.n	8009ea4 <__gethex+0x2c6>
 8009ebe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1dd      	bne.n	8009e80 <__gethex+0x2a2>
 8009ec4:	e7ee      	b.n	8009ea4 <__gethex+0x2c6>
 8009ec6:	1e67      	subs	r7, r4, #1
 8009ec8:	f1ba 0f00 	cmp.w	sl, #0
 8009ecc:	d131      	bne.n	8009f32 <__gethex+0x354>
 8009ece:	b127      	cbz	r7, 8009eda <__gethex+0x2fc>
 8009ed0:	4639      	mov	r1, r7
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f000 fd70 	bl	800a9b8 <__any_on>
 8009ed8:	4682      	mov	sl, r0
 8009eda:	117a      	asrs	r2, r7, #5
 8009edc:	2301      	movs	r3, #1
 8009ede:	f007 071f 	and.w	r7, r7, #31
 8009ee2:	fa03 f707 	lsl.w	r7, r3, r7
 8009ee6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009eea:	4621      	mov	r1, r4
 8009eec:	421f      	tst	r7, r3
 8009eee:	4628      	mov	r0, r5
 8009ef0:	bf18      	it	ne
 8009ef2:	f04a 0a02 	orrne.w	sl, sl, #2
 8009ef6:	1b36      	subs	r6, r6, r4
 8009ef8:	f7ff fe22 	bl	8009b40 <rshift>
 8009efc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009f00:	2702      	movs	r7, #2
 8009f02:	f1ba 0f00 	cmp.w	sl, #0
 8009f06:	d048      	beq.n	8009f9a <__gethex+0x3bc>
 8009f08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d015      	beq.n	8009f3c <__gethex+0x35e>
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d017      	beq.n	8009f44 <__gethex+0x366>
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d109      	bne.n	8009f2c <__gethex+0x34e>
 8009f18:	f01a 0f02 	tst.w	sl, #2
 8009f1c:	d006      	beq.n	8009f2c <__gethex+0x34e>
 8009f1e:	f8d9 3000 	ldr.w	r3, [r9]
 8009f22:	ea4a 0a03 	orr.w	sl, sl, r3
 8009f26:	f01a 0f01 	tst.w	sl, #1
 8009f2a:	d10e      	bne.n	8009f4a <__gethex+0x36c>
 8009f2c:	f047 0710 	orr.w	r7, r7, #16
 8009f30:	e033      	b.n	8009f9a <__gethex+0x3bc>
 8009f32:	f04f 0a01 	mov.w	sl, #1
 8009f36:	e7d0      	b.n	8009eda <__gethex+0x2fc>
 8009f38:	2701      	movs	r7, #1
 8009f3a:	e7e2      	b.n	8009f02 <__gethex+0x324>
 8009f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f3e:	f1c3 0301 	rsb	r3, r3, #1
 8009f42:	9315      	str	r3, [sp, #84]	; 0x54
 8009f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d0f0      	beq.n	8009f2c <__gethex+0x34e>
 8009f4a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009f4e:	f105 0314 	add.w	r3, r5, #20
 8009f52:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009f56:	eb03 010a 	add.w	r1, r3, sl
 8009f5a:	f04f 0c00 	mov.w	ip, #0
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f68:	d01c      	beq.n	8009fa4 <__gethex+0x3c6>
 8009f6a:	3201      	adds	r2, #1
 8009f6c:	6002      	str	r2, [r0, #0]
 8009f6e:	2f02      	cmp	r7, #2
 8009f70:	f105 0314 	add.w	r3, r5, #20
 8009f74:	d138      	bne.n	8009fe8 <__gethex+0x40a>
 8009f76:	f8d8 2000 	ldr.w	r2, [r8]
 8009f7a:	3a01      	subs	r2, #1
 8009f7c:	42b2      	cmp	r2, r6
 8009f7e:	d10a      	bne.n	8009f96 <__gethex+0x3b8>
 8009f80:	1171      	asrs	r1, r6, #5
 8009f82:	2201      	movs	r2, #1
 8009f84:	f006 061f 	and.w	r6, r6, #31
 8009f88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f8c:	fa02 f606 	lsl.w	r6, r2, r6
 8009f90:	421e      	tst	r6, r3
 8009f92:	bf18      	it	ne
 8009f94:	4617      	movne	r7, r2
 8009f96:	f047 0720 	orr.w	r7, r7, #32
 8009f9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f9c:	601d      	str	r5, [r3, #0]
 8009f9e:	9b06      	ldr	r3, [sp, #24]
 8009fa0:	601c      	str	r4, [r3, #0]
 8009fa2:	e6a4      	b.n	8009cee <__gethex+0x110>
 8009fa4:	4299      	cmp	r1, r3
 8009fa6:	f843 cc04 	str.w	ip, [r3, #-4]
 8009faa:	d8d8      	bhi.n	8009f5e <__gethex+0x380>
 8009fac:	68ab      	ldr	r3, [r5, #8]
 8009fae:	4599      	cmp	r9, r3
 8009fb0:	db12      	blt.n	8009fd8 <__gethex+0x3fa>
 8009fb2:	6869      	ldr	r1, [r5, #4]
 8009fb4:	9802      	ldr	r0, [sp, #8]
 8009fb6:	3101      	adds	r1, #1
 8009fb8:	f000 f921 	bl	800a1fe <_Balloc>
 8009fbc:	692a      	ldr	r2, [r5, #16]
 8009fbe:	3202      	adds	r2, #2
 8009fc0:	f105 010c 	add.w	r1, r5, #12
 8009fc4:	4683      	mov	fp, r0
 8009fc6:	0092      	lsls	r2, r2, #2
 8009fc8:	300c      	adds	r0, #12
 8009fca:	f000 f90d 	bl	800a1e8 <memcpy>
 8009fce:	4629      	mov	r1, r5
 8009fd0:	9802      	ldr	r0, [sp, #8]
 8009fd2:	f000 f948 	bl	800a266 <_Bfree>
 8009fd6:	465d      	mov	r5, fp
 8009fd8:	692b      	ldr	r3, [r5, #16]
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009fe0:	612a      	str	r2, [r5, #16]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	615a      	str	r2, [r3, #20]
 8009fe6:	e7c2      	b.n	8009f6e <__gethex+0x390>
 8009fe8:	692a      	ldr	r2, [r5, #16]
 8009fea:	454a      	cmp	r2, r9
 8009fec:	dd0b      	ble.n	800a006 <__gethex+0x428>
 8009fee:	2101      	movs	r1, #1
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f7ff fda5 	bl	8009b40 <rshift>
 8009ff6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ffa:	3401      	adds	r4, #1
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	f6ff aed9 	blt.w	8009db4 <__gethex+0x1d6>
 800a002:	2701      	movs	r7, #1
 800a004:	e7c7      	b.n	8009f96 <__gethex+0x3b8>
 800a006:	f016 061f 	ands.w	r6, r6, #31
 800a00a:	d0fa      	beq.n	800a002 <__gethex+0x424>
 800a00c:	449a      	add	sl, r3
 800a00e:	f1c6 0620 	rsb	r6, r6, #32
 800a012:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a016:	f000 f9b6 	bl	800a386 <__hi0bits>
 800a01a:	42b0      	cmp	r0, r6
 800a01c:	dbe7      	blt.n	8009fee <__gethex+0x410>
 800a01e:	e7f0      	b.n	800a002 <__gethex+0x424>

0800a020 <L_shift>:
 800a020:	f1c2 0208 	rsb	r2, r2, #8
 800a024:	0092      	lsls	r2, r2, #2
 800a026:	b570      	push	{r4, r5, r6, lr}
 800a028:	f1c2 0620 	rsb	r6, r2, #32
 800a02c:	6843      	ldr	r3, [r0, #4]
 800a02e:	6804      	ldr	r4, [r0, #0]
 800a030:	fa03 f506 	lsl.w	r5, r3, r6
 800a034:	432c      	orrs	r4, r5
 800a036:	40d3      	lsrs	r3, r2
 800a038:	6004      	str	r4, [r0, #0]
 800a03a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a03e:	4288      	cmp	r0, r1
 800a040:	d3f4      	bcc.n	800a02c <L_shift+0xc>
 800a042:	bd70      	pop	{r4, r5, r6, pc}

0800a044 <__match>:
 800a044:	b530      	push	{r4, r5, lr}
 800a046:	6803      	ldr	r3, [r0, #0]
 800a048:	3301      	adds	r3, #1
 800a04a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a04e:	b914      	cbnz	r4, 800a056 <__match+0x12>
 800a050:	6003      	str	r3, [r0, #0]
 800a052:	2001      	movs	r0, #1
 800a054:	bd30      	pop	{r4, r5, pc}
 800a056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a05a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a05e:	2d19      	cmp	r5, #25
 800a060:	bf98      	it	ls
 800a062:	3220      	addls	r2, #32
 800a064:	42a2      	cmp	r2, r4
 800a066:	d0f0      	beq.n	800a04a <__match+0x6>
 800a068:	2000      	movs	r0, #0
 800a06a:	e7f3      	b.n	800a054 <__match+0x10>

0800a06c <__hexnan>:
 800a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a070:	680b      	ldr	r3, [r1, #0]
 800a072:	6801      	ldr	r1, [r0, #0]
 800a074:	115f      	asrs	r7, r3, #5
 800a076:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a07a:	f013 031f 	ands.w	r3, r3, #31
 800a07e:	b087      	sub	sp, #28
 800a080:	bf18      	it	ne
 800a082:	3704      	addne	r7, #4
 800a084:	2500      	movs	r5, #0
 800a086:	1f3e      	subs	r6, r7, #4
 800a088:	4682      	mov	sl, r0
 800a08a:	4690      	mov	r8, r2
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	f847 5c04 	str.w	r5, [r7, #-4]
 800a092:	46b1      	mov	r9, r6
 800a094:	4634      	mov	r4, r6
 800a096:	9502      	str	r5, [sp, #8]
 800a098:	46ab      	mov	fp, r5
 800a09a:	784a      	ldrb	r2, [r1, #1]
 800a09c:	1c4b      	adds	r3, r1, #1
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	b342      	cbz	r2, 800a0f4 <__hexnan+0x88>
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	9105      	str	r1, [sp, #20]
 800a0a6:	9204      	str	r2, [sp, #16]
 800a0a8:	f7ff fd84 	bl	8009bb4 <__hexdig_fun>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d143      	bne.n	800a138 <__hexnan+0xcc>
 800a0b0:	9a04      	ldr	r2, [sp, #16]
 800a0b2:	9905      	ldr	r1, [sp, #20]
 800a0b4:	2a20      	cmp	r2, #32
 800a0b6:	d818      	bhi.n	800a0ea <__hexnan+0x7e>
 800a0b8:	9b02      	ldr	r3, [sp, #8]
 800a0ba:	459b      	cmp	fp, r3
 800a0bc:	dd13      	ble.n	800a0e6 <__hexnan+0x7a>
 800a0be:	454c      	cmp	r4, r9
 800a0c0:	d206      	bcs.n	800a0d0 <__hexnan+0x64>
 800a0c2:	2d07      	cmp	r5, #7
 800a0c4:	dc04      	bgt.n	800a0d0 <__hexnan+0x64>
 800a0c6:	462a      	mov	r2, r5
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f7ff ffa8 	bl	800a020 <L_shift>
 800a0d0:	4544      	cmp	r4, r8
 800a0d2:	d944      	bls.n	800a15e <__hexnan+0xf2>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	f1a4 0904 	sub.w	r9, r4, #4
 800a0da:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0de:	f8cd b008 	str.w	fp, [sp, #8]
 800a0e2:	464c      	mov	r4, r9
 800a0e4:	461d      	mov	r5, r3
 800a0e6:	9903      	ldr	r1, [sp, #12]
 800a0e8:	e7d7      	b.n	800a09a <__hexnan+0x2e>
 800a0ea:	2a29      	cmp	r2, #41	; 0x29
 800a0ec:	d14a      	bne.n	800a184 <__hexnan+0x118>
 800a0ee:	3102      	adds	r1, #2
 800a0f0:	f8ca 1000 	str.w	r1, [sl]
 800a0f4:	f1bb 0f00 	cmp.w	fp, #0
 800a0f8:	d044      	beq.n	800a184 <__hexnan+0x118>
 800a0fa:	454c      	cmp	r4, r9
 800a0fc:	d206      	bcs.n	800a10c <__hexnan+0xa0>
 800a0fe:	2d07      	cmp	r5, #7
 800a100:	dc04      	bgt.n	800a10c <__hexnan+0xa0>
 800a102:	462a      	mov	r2, r5
 800a104:	4649      	mov	r1, r9
 800a106:	4620      	mov	r0, r4
 800a108:	f7ff ff8a 	bl	800a020 <L_shift>
 800a10c:	4544      	cmp	r4, r8
 800a10e:	d928      	bls.n	800a162 <__hexnan+0xf6>
 800a110:	4643      	mov	r3, r8
 800a112:	f854 2b04 	ldr.w	r2, [r4], #4
 800a116:	f843 2b04 	str.w	r2, [r3], #4
 800a11a:	42a6      	cmp	r6, r4
 800a11c:	d2f9      	bcs.n	800a112 <__hexnan+0xa6>
 800a11e:	2200      	movs	r2, #0
 800a120:	f843 2b04 	str.w	r2, [r3], #4
 800a124:	429e      	cmp	r6, r3
 800a126:	d2fb      	bcs.n	800a120 <__hexnan+0xb4>
 800a128:	6833      	ldr	r3, [r6, #0]
 800a12a:	b91b      	cbnz	r3, 800a134 <__hexnan+0xc8>
 800a12c:	4546      	cmp	r6, r8
 800a12e:	d127      	bne.n	800a180 <__hexnan+0x114>
 800a130:	2301      	movs	r3, #1
 800a132:	6033      	str	r3, [r6, #0]
 800a134:	2005      	movs	r0, #5
 800a136:	e026      	b.n	800a186 <__hexnan+0x11a>
 800a138:	3501      	adds	r5, #1
 800a13a:	2d08      	cmp	r5, #8
 800a13c:	f10b 0b01 	add.w	fp, fp, #1
 800a140:	dd06      	ble.n	800a150 <__hexnan+0xe4>
 800a142:	4544      	cmp	r4, r8
 800a144:	d9cf      	bls.n	800a0e6 <__hexnan+0x7a>
 800a146:	2300      	movs	r3, #0
 800a148:	f844 3c04 	str.w	r3, [r4, #-4]
 800a14c:	2501      	movs	r5, #1
 800a14e:	3c04      	subs	r4, #4
 800a150:	6822      	ldr	r2, [r4, #0]
 800a152:	f000 000f 	and.w	r0, r0, #15
 800a156:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a15a:	6020      	str	r0, [r4, #0]
 800a15c:	e7c3      	b.n	800a0e6 <__hexnan+0x7a>
 800a15e:	2508      	movs	r5, #8
 800a160:	e7c1      	b.n	800a0e6 <__hexnan+0x7a>
 800a162:	9b01      	ldr	r3, [sp, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d0df      	beq.n	800a128 <__hexnan+0xbc>
 800a168:	f04f 32ff 	mov.w	r2, #4294967295
 800a16c:	f1c3 0320 	rsb	r3, r3, #32
 800a170:	fa22 f303 	lsr.w	r3, r2, r3
 800a174:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a178:	401a      	ands	r2, r3
 800a17a:	f847 2c04 	str.w	r2, [r7, #-4]
 800a17e:	e7d3      	b.n	800a128 <__hexnan+0xbc>
 800a180:	3e04      	subs	r6, #4
 800a182:	e7d1      	b.n	800a128 <__hexnan+0xbc>
 800a184:	2004      	movs	r0, #4
 800a186:	b007      	add	sp, #28
 800a188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a18c <__locale_ctype_ptr_l>:
 800a18c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a190:	4770      	bx	lr

0800a192 <__localeconv_l>:
 800a192:	30f0      	adds	r0, #240	; 0xf0
 800a194:	4770      	bx	lr
	...

0800a198 <_localeconv_r>:
 800a198:	4b04      	ldr	r3, [pc, #16]	; (800a1ac <_localeconv_r+0x14>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6a18      	ldr	r0, [r3, #32]
 800a19e:	4b04      	ldr	r3, [pc, #16]	; (800a1b0 <_localeconv_r+0x18>)
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	bf08      	it	eq
 800a1a4:	4618      	moveq	r0, r3
 800a1a6:	30f0      	adds	r0, #240	; 0xf0
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	2000000c 	.word	0x2000000c
 800a1b0:	20000070 	.word	0x20000070

0800a1b4 <malloc>:
 800a1b4:	4b02      	ldr	r3, [pc, #8]	; (800a1c0 <malloc+0xc>)
 800a1b6:	4601      	mov	r1, r0
 800a1b8:	6818      	ldr	r0, [r3, #0]
 800a1ba:	f000 bc7b 	b.w	800aab4 <_malloc_r>
 800a1be:	bf00      	nop
 800a1c0:	2000000c 	.word	0x2000000c

0800a1c4 <__ascii_mbtowc>:
 800a1c4:	b082      	sub	sp, #8
 800a1c6:	b901      	cbnz	r1, 800a1ca <__ascii_mbtowc+0x6>
 800a1c8:	a901      	add	r1, sp, #4
 800a1ca:	b142      	cbz	r2, 800a1de <__ascii_mbtowc+0x1a>
 800a1cc:	b14b      	cbz	r3, 800a1e2 <__ascii_mbtowc+0x1e>
 800a1ce:	7813      	ldrb	r3, [r2, #0]
 800a1d0:	600b      	str	r3, [r1, #0]
 800a1d2:	7812      	ldrb	r2, [r2, #0]
 800a1d4:	1c10      	adds	r0, r2, #0
 800a1d6:	bf18      	it	ne
 800a1d8:	2001      	movne	r0, #1
 800a1da:	b002      	add	sp, #8
 800a1dc:	4770      	bx	lr
 800a1de:	4610      	mov	r0, r2
 800a1e0:	e7fb      	b.n	800a1da <__ascii_mbtowc+0x16>
 800a1e2:	f06f 0001 	mvn.w	r0, #1
 800a1e6:	e7f8      	b.n	800a1da <__ascii_mbtowc+0x16>

0800a1e8 <memcpy>:
 800a1e8:	b510      	push	{r4, lr}
 800a1ea:	1e43      	subs	r3, r0, #1
 800a1ec:	440a      	add	r2, r1
 800a1ee:	4291      	cmp	r1, r2
 800a1f0:	d100      	bne.n	800a1f4 <memcpy+0xc>
 800a1f2:	bd10      	pop	{r4, pc}
 800a1f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1fc:	e7f7      	b.n	800a1ee <memcpy+0x6>

0800a1fe <_Balloc>:
 800a1fe:	b570      	push	{r4, r5, r6, lr}
 800a200:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a202:	4604      	mov	r4, r0
 800a204:	460e      	mov	r6, r1
 800a206:	b93d      	cbnz	r5, 800a218 <_Balloc+0x1a>
 800a208:	2010      	movs	r0, #16
 800a20a:	f7ff ffd3 	bl	800a1b4 <malloc>
 800a20e:	6260      	str	r0, [r4, #36]	; 0x24
 800a210:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a214:	6005      	str	r5, [r0, #0]
 800a216:	60c5      	str	r5, [r0, #12]
 800a218:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a21a:	68eb      	ldr	r3, [r5, #12]
 800a21c:	b183      	cbz	r3, 800a240 <_Balloc+0x42>
 800a21e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a226:	b9b8      	cbnz	r0, 800a258 <_Balloc+0x5a>
 800a228:	2101      	movs	r1, #1
 800a22a:	fa01 f506 	lsl.w	r5, r1, r6
 800a22e:	1d6a      	adds	r2, r5, #5
 800a230:	0092      	lsls	r2, r2, #2
 800a232:	4620      	mov	r0, r4
 800a234:	f000 fbe1 	bl	800a9fa <_calloc_r>
 800a238:	b160      	cbz	r0, 800a254 <_Balloc+0x56>
 800a23a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a23e:	e00e      	b.n	800a25e <_Balloc+0x60>
 800a240:	2221      	movs	r2, #33	; 0x21
 800a242:	2104      	movs	r1, #4
 800a244:	4620      	mov	r0, r4
 800a246:	f000 fbd8 	bl	800a9fa <_calloc_r>
 800a24a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a24c:	60e8      	str	r0, [r5, #12]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e4      	bne.n	800a21e <_Balloc+0x20>
 800a254:	2000      	movs	r0, #0
 800a256:	bd70      	pop	{r4, r5, r6, pc}
 800a258:	6802      	ldr	r2, [r0, #0]
 800a25a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a25e:	2300      	movs	r3, #0
 800a260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a264:	e7f7      	b.n	800a256 <_Balloc+0x58>

0800a266 <_Bfree>:
 800a266:	b570      	push	{r4, r5, r6, lr}
 800a268:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a26a:	4606      	mov	r6, r0
 800a26c:	460d      	mov	r5, r1
 800a26e:	b93c      	cbnz	r4, 800a280 <_Bfree+0x1a>
 800a270:	2010      	movs	r0, #16
 800a272:	f7ff ff9f 	bl	800a1b4 <malloc>
 800a276:	6270      	str	r0, [r6, #36]	; 0x24
 800a278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a27c:	6004      	str	r4, [r0, #0]
 800a27e:	60c4      	str	r4, [r0, #12]
 800a280:	b13d      	cbz	r5, 800a292 <_Bfree+0x2c>
 800a282:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a284:	686a      	ldr	r2, [r5, #4]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a28c:	6029      	str	r1, [r5, #0]
 800a28e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a292:	bd70      	pop	{r4, r5, r6, pc}

0800a294 <__multadd>:
 800a294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a298:	690d      	ldr	r5, [r1, #16]
 800a29a:	461f      	mov	r7, r3
 800a29c:	4606      	mov	r6, r0
 800a29e:	460c      	mov	r4, r1
 800a2a0:	f101 0c14 	add.w	ip, r1, #20
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f8dc 0000 	ldr.w	r0, [ip]
 800a2aa:	b281      	uxth	r1, r0
 800a2ac:	fb02 7101 	mla	r1, r2, r1, r7
 800a2b0:	0c0f      	lsrs	r7, r1, #16
 800a2b2:	0c00      	lsrs	r0, r0, #16
 800a2b4:	fb02 7000 	mla	r0, r2, r0, r7
 800a2b8:	b289      	uxth	r1, r1
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a2c0:	429d      	cmp	r5, r3
 800a2c2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a2c6:	f84c 1b04 	str.w	r1, [ip], #4
 800a2ca:	dcec      	bgt.n	800a2a6 <__multadd+0x12>
 800a2cc:	b1d7      	cbz	r7, 800a304 <__multadd+0x70>
 800a2ce:	68a3      	ldr	r3, [r4, #8]
 800a2d0:	42ab      	cmp	r3, r5
 800a2d2:	dc12      	bgt.n	800a2fa <__multadd+0x66>
 800a2d4:	6861      	ldr	r1, [r4, #4]
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	3101      	adds	r1, #1
 800a2da:	f7ff ff90 	bl	800a1fe <_Balloc>
 800a2de:	6922      	ldr	r2, [r4, #16]
 800a2e0:	3202      	adds	r2, #2
 800a2e2:	f104 010c 	add.w	r1, r4, #12
 800a2e6:	4680      	mov	r8, r0
 800a2e8:	0092      	lsls	r2, r2, #2
 800a2ea:	300c      	adds	r0, #12
 800a2ec:	f7ff ff7c 	bl	800a1e8 <memcpy>
 800a2f0:	4621      	mov	r1, r4
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f7ff ffb7 	bl	800a266 <_Bfree>
 800a2f8:	4644      	mov	r4, r8
 800a2fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2fe:	3501      	adds	r5, #1
 800a300:	615f      	str	r7, [r3, #20]
 800a302:	6125      	str	r5, [r4, #16]
 800a304:	4620      	mov	r0, r4
 800a306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a30a <__s2b>:
 800a30a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a30e:	460c      	mov	r4, r1
 800a310:	4615      	mov	r5, r2
 800a312:	461f      	mov	r7, r3
 800a314:	2209      	movs	r2, #9
 800a316:	3308      	adds	r3, #8
 800a318:	4606      	mov	r6, r0
 800a31a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a31e:	2100      	movs	r1, #0
 800a320:	2201      	movs	r2, #1
 800a322:	429a      	cmp	r2, r3
 800a324:	db20      	blt.n	800a368 <__s2b+0x5e>
 800a326:	4630      	mov	r0, r6
 800a328:	f7ff ff69 	bl	800a1fe <_Balloc>
 800a32c:	9b08      	ldr	r3, [sp, #32]
 800a32e:	6143      	str	r3, [r0, #20]
 800a330:	2d09      	cmp	r5, #9
 800a332:	f04f 0301 	mov.w	r3, #1
 800a336:	6103      	str	r3, [r0, #16]
 800a338:	dd19      	ble.n	800a36e <__s2b+0x64>
 800a33a:	f104 0809 	add.w	r8, r4, #9
 800a33e:	46c1      	mov	r9, r8
 800a340:	442c      	add	r4, r5
 800a342:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a346:	4601      	mov	r1, r0
 800a348:	3b30      	subs	r3, #48	; 0x30
 800a34a:	220a      	movs	r2, #10
 800a34c:	4630      	mov	r0, r6
 800a34e:	f7ff ffa1 	bl	800a294 <__multadd>
 800a352:	45a1      	cmp	r9, r4
 800a354:	d1f5      	bne.n	800a342 <__s2b+0x38>
 800a356:	eb08 0405 	add.w	r4, r8, r5
 800a35a:	3c08      	subs	r4, #8
 800a35c:	1b2d      	subs	r5, r5, r4
 800a35e:	1963      	adds	r3, r4, r5
 800a360:	42bb      	cmp	r3, r7
 800a362:	db07      	blt.n	800a374 <__s2b+0x6a>
 800a364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a368:	0052      	lsls	r2, r2, #1
 800a36a:	3101      	adds	r1, #1
 800a36c:	e7d9      	b.n	800a322 <__s2b+0x18>
 800a36e:	340a      	adds	r4, #10
 800a370:	2509      	movs	r5, #9
 800a372:	e7f3      	b.n	800a35c <__s2b+0x52>
 800a374:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a378:	4601      	mov	r1, r0
 800a37a:	3b30      	subs	r3, #48	; 0x30
 800a37c:	220a      	movs	r2, #10
 800a37e:	4630      	mov	r0, r6
 800a380:	f7ff ff88 	bl	800a294 <__multadd>
 800a384:	e7eb      	b.n	800a35e <__s2b+0x54>

0800a386 <__hi0bits>:
 800a386:	0c02      	lsrs	r2, r0, #16
 800a388:	0412      	lsls	r2, r2, #16
 800a38a:	4603      	mov	r3, r0
 800a38c:	b9b2      	cbnz	r2, 800a3bc <__hi0bits+0x36>
 800a38e:	0403      	lsls	r3, r0, #16
 800a390:	2010      	movs	r0, #16
 800a392:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a396:	bf04      	itt	eq
 800a398:	021b      	lsleq	r3, r3, #8
 800a39a:	3008      	addeq	r0, #8
 800a39c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a3a0:	bf04      	itt	eq
 800a3a2:	011b      	lsleq	r3, r3, #4
 800a3a4:	3004      	addeq	r0, #4
 800a3a6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a3aa:	bf04      	itt	eq
 800a3ac:	009b      	lsleq	r3, r3, #2
 800a3ae:	3002      	addeq	r0, #2
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	db06      	blt.n	800a3c2 <__hi0bits+0x3c>
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	d503      	bpl.n	800a3c0 <__hi0bits+0x3a>
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	4770      	bx	lr
 800a3bc:	2000      	movs	r0, #0
 800a3be:	e7e8      	b.n	800a392 <__hi0bits+0xc>
 800a3c0:	2020      	movs	r0, #32
 800a3c2:	4770      	bx	lr

0800a3c4 <__lo0bits>:
 800a3c4:	6803      	ldr	r3, [r0, #0]
 800a3c6:	f013 0207 	ands.w	r2, r3, #7
 800a3ca:	4601      	mov	r1, r0
 800a3cc:	d00b      	beq.n	800a3e6 <__lo0bits+0x22>
 800a3ce:	07da      	lsls	r2, r3, #31
 800a3d0:	d423      	bmi.n	800a41a <__lo0bits+0x56>
 800a3d2:	0798      	lsls	r0, r3, #30
 800a3d4:	bf49      	itett	mi
 800a3d6:	085b      	lsrmi	r3, r3, #1
 800a3d8:	089b      	lsrpl	r3, r3, #2
 800a3da:	2001      	movmi	r0, #1
 800a3dc:	600b      	strmi	r3, [r1, #0]
 800a3de:	bf5c      	itt	pl
 800a3e0:	600b      	strpl	r3, [r1, #0]
 800a3e2:	2002      	movpl	r0, #2
 800a3e4:	4770      	bx	lr
 800a3e6:	b298      	uxth	r0, r3
 800a3e8:	b9a8      	cbnz	r0, 800a416 <__lo0bits+0x52>
 800a3ea:	0c1b      	lsrs	r3, r3, #16
 800a3ec:	2010      	movs	r0, #16
 800a3ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a3f2:	bf04      	itt	eq
 800a3f4:	0a1b      	lsreq	r3, r3, #8
 800a3f6:	3008      	addeq	r0, #8
 800a3f8:	071a      	lsls	r2, r3, #28
 800a3fa:	bf04      	itt	eq
 800a3fc:	091b      	lsreq	r3, r3, #4
 800a3fe:	3004      	addeq	r0, #4
 800a400:	079a      	lsls	r2, r3, #30
 800a402:	bf04      	itt	eq
 800a404:	089b      	lsreq	r3, r3, #2
 800a406:	3002      	addeq	r0, #2
 800a408:	07da      	lsls	r2, r3, #31
 800a40a:	d402      	bmi.n	800a412 <__lo0bits+0x4e>
 800a40c:	085b      	lsrs	r3, r3, #1
 800a40e:	d006      	beq.n	800a41e <__lo0bits+0x5a>
 800a410:	3001      	adds	r0, #1
 800a412:	600b      	str	r3, [r1, #0]
 800a414:	4770      	bx	lr
 800a416:	4610      	mov	r0, r2
 800a418:	e7e9      	b.n	800a3ee <__lo0bits+0x2a>
 800a41a:	2000      	movs	r0, #0
 800a41c:	4770      	bx	lr
 800a41e:	2020      	movs	r0, #32
 800a420:	4770      	bx	lr

0800a422 <__i2b>:
 800a422:	b510      	push	{r4, lr}
 800a424:	460c      	mov	r4, r1
 800a426:	2101      	movs	r1, #1
 800a428:	f7ff fee9 	bl	800a1fe <_Balloc>
 800a42c:	2201      	movs	r2, #1
 800a42e:	6144      	str	r4, [r0, #20]
 800a430:	6102      	str	r2, [r0, #16]
 800a432:	bd10      	pop	{r4, pc}

0800a434 <__multiply>:
 800a434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a438:	4614      	mov	r4, r2
 800a43a:	690a      	ldr	r2, [r1, #16]
 800a43c:	6923      	ldr	r3, [r4, #16]
 800a43e:	429a      	cmp	r2, r3
 800a440:	bfb8      	it	lt
 800a442:	460b      	movlt	r3, r1
 800a444:	4688      	mov	r8, r1
 800a446:	bfbc      	itt	lt
 800a448:	46a0      	movlt	r8, r4
 800a44a:	461c      	movlt	r4, r3
 800a44c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a450:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a454:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a458:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a45c:	eb07 0609 	add.w	r6, r7, r9
 800a460:	42b3      	cmp	r3, r6
 800a462:	bfb8      	it	lt
 800a464:	3101      	addlt	r1, #1
 800a466:	f7ff feca 	bl	800a1fe <_Balloc>
 800a46a:	f100 0514 	add.w	r5, r0, #20
 800a46e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a472:	462b      	mov	r3, r5
 800a474:	2200      	movs	r2, #0
 800a476:	4573      	cmp	r3, lr
 800a478:	d316      	bcc.n	800a4a8 <__multiply+0x74>
 800a47a:	f104 0214 	add.w	r2, r4, #20
 800a47e:	f108 0114 	add.w	r1, r8, #20
 800a482:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a486:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	9b00      	ldr	r3, [sp, #0]
 800a48e:	9201      	str	r2, [sp, #4]
 800a490:	4293      	cmp	r3, r2
 800a492:	d80c      	bhi.n	800a4ae <__multiply+0x7a>
 800a494:	2e00      	cmp	r6, #0
 800a496:	dd03      	ble.n	800a4a0 <__multiply+0x6c>
 800a498:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d05d      	beq.n	800a55c <__multiply+0x128>
 800a4a0:	6106      	str	r6, [r0, #16]
 800a4a2:	b003      	add	sp, #12
 800a4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a8:	f843 2b04 	str.w	r2, [r3], #4
 800a4ac:	e7e3      	b.n	800a476 <__multiply+0x42>
 800a4ae:	f8b2 b000 	ldrh.w	fp, [r2]
 800a4b2:	f1bb 0f00 	cmp.w	fp, #0
 800a4b6:	d023      	beq.n	800a500 <__multiply+0xcc>
 800a4b8:	4689      	mov	r9, r1
 800a4ba:	46ac      	mov	ip, r5
 800a4bc:	f04f 0800 	mov.w	r8, #0
 800a4c0:	f859 4b04 	ldr.w	r4, [r9], #4
 800a4c4:	f8dc a000 	ldr.w	sl, [ip]
 800a4c8:	b2a3      	uxth	r3, r4
 800a4ca:	fa1f fa8a 	uxth.w	sl, sl
 800a4ce:	fb0b a303 	mla	r3, fp, r3, sl
 800a4d2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a4d6:	f8dc 4000 	ldr.w	r4, [ip]
 800a4da:	4443      	add	r3, r8
 800a4dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a4e0:	fb0b 840a 	mla	r4, fp, sl, r8
 800a4e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a4e8:	46e2      	mov	sl, ip
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a4f0:	454f      	cmp	r7, r9
 800a4f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a4f6:	f84a 3b04 	str.w	r3, [sl], #4
 800a4fa:	d82b      	bhi.n	800a554 <__multiply+0x120>
 800a4fc:	f8cc 8004 	str.w	r8, [ip, #4]
 800a500:	9b01      	ldr	r3, [sp, #4]
 800a502:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a506:	3204      	adds	r2, #4
 800a508:	f1ba 0f00 	cmp.w	sl, #0
 800a50c:	d020      	beq.n	800a550 <__multiply+0x11c>
 800a50e:	682b      	ldr	r3, [r5, #0]
 800a510:	4689      	mov	r9, r1
 800a512:	46a8      	mov	r8, r5
 800a514:	f04f 0b00 	mov.w	fp, #0
 800a518:	f8b9 c000 	ldrh.w	ip, [r9]
 800a51c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a520:	fb0a 440c 	mla	r4, sl, ip, r4
 800a524:	445c      	add	r4, fp
 800a526:	46c4      	mov	ip, r8
 800a528:	b29b      	uxth	r3, r3
 800a52a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a52e:	f84c 3b04 	str.w	r3, [ip], #4
 800a532:	f859 3b04 	ldr.w	r3, [r9], #4
 800a536:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a53a:	0c1b      	lsrs	r3, r3, #16
 800a53c:	fb0a b303 	mla	r3, sl, r3, fp
 800a540:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a544:	454f      	cmp	r7, r9
 800a546:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a54a:	d805      	bhi.n	800a558 <__multiply+0x124>
 800a54c:	f8c8 3004 	str.w	r3, [r8, #4]
 800a550:	3504      	adds	r5, #4
 800a552:	e79b      	b.n	800a48c <__multiply+0x58>
 800a554:	46d4      	mov	ip, sl
 800a556:	e7b3      	b.n	800a4c0 <__multiply+0x8c>
 800a558:	46e0      	mov	r8, ip
 800a55a:	e7dd      	b.n	800a518 <__multiply+0xe4>
 800a55c:	3e01      	subs	r6, #1
 800a55e:	e799      	b.n	800a494 <__multiply+0x60>

0800a560 <__pow5mult>:
 800a560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a564:	4615      	mov	r5, r2
 800a566:	f012 0203 	ands.w	r2, r2, #3
 800a56a:	4606      	mov	r6, r0
 800a56c:	460f      	mov	r7, r1
 800a56e:	d007      	beq.n	800a580 <__pow5mult+0x20>
 800a570:	3a01      	subs	r2, #1
 800a572:	4c21      	ldr	r4, [pc, #132]	; (800a5f8 <__pow5mult+0x98>)
 800a574:	2300      	movs	r3, #0
 800a576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a57a:	f7ff fe8b 	bl	800a294 <__multadd>
 800a57e:	4607      	mov	r7, r0
 800a580:	10ad      	asrs	r5, r5, #2
 800a582:	d035      	beq.n	800a5f0 <__pow5mult+0x90>
 800a584:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a586:	b93c      	cbnz	r4, 800a598 <__pow5mult+0x38>
 800a588:	2010      	movs	r0, #16
 800a58a:	f7ff fe13 	bl	800a1b4 <malloc>
 800a58e:	6270      	str	r0, [r6, #36]	; 0x24
 800a590:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a594:	6004      	str	r4, [r0, #0]
 800a596:	60c4      	str	r4, [r0, #12]
 800a598:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a59c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5a0:	b94c      	cbnz	r4, 800a5b6 <__pow5mult+0x56>
 800a5a2:	f240 2171 	movw	r1, #625	; 0x271
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	f7ff ff3b 	bl	800a422 <__i2b>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	6003      	str	r3, [r0, #0]
 800a5b6:	f04f 0800 	mov.w	r8, #0
 800a5ba:	07eb      	lsls	r3, r5, #31
 800a5bc:	d50a      	bpl.n	800a5d4 <__pow5mult+0x74>
 800a5be:	4639      	mov	r1, r7
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f7ff ff36 	bl	800a434 <__multiply>
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	4681      	mov	r9, r0
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7ff fe4a 	bl	800a266 <_Bfree>
 800a5d2:	464f      	mov	r7, r9
 800a5d4:	106d      	asrs	r5, r5, #1
 800a5d6:	d00b      	beq.n	800a5f0 <__pow5mult+0x90>
 800a5d8:	6820      	ldr	r0, [r4, #0]
 800a5da:	b938      	cbnz	r0, 800a5ec <__pow5mult+0x8c>
 800a5dc:	4622      	mov	r2, r4
 800a5de:	4621      	mov	r1, r4
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f7ff ff27 	bl	800a434 <__multiply>
 800a5e6:	6020      	str	r0, [r4, #0]
 800a5e8:	f8c0 8000 	str.w	r8, [r0]
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	e7e4      	b.n	800a5ba <__pow5mult+0x5a>
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5f6:	bf00      	nop
 800a5f8:	0800b0f0 	.word	0x0800b0f0

0800a5fc <__lshift>:
 800a5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a600:	460c      	mov	r4, r1
 800a602:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a606:	6923      	ldr	r3, [r4, #16]
 800a608:	6849      	ldr	r1, [r1, #4]
 800a60a:	eb0a 0903 	add.w	r9, sl, r3
 800a60e:	68a3      	ldr	r3, [r4, #8]
 800a610:	4607      	mov	r7, r0
 800a612:	4616      	mov	r6, r2
 800a614:	f109 0501 	add.w	r5, r9, #1
 800a618:	42ab      	cmp	r3, r5
 800a61a:	db32      	blt.n	800a682 <__lshift+0x86>
 800a61c:	4638      	mov	r0, r7
 800a61e:	f7ff fdee 	bl	800a1fe <_Balloc>
 800a622:	2300      	movs	r3, #0
 800a624:	4680      	mov	r8, r0
 800a626:	f100 0114 	add.w	r1, r0, #20
 800a62a:	461a      	mov	r2, r3
 800a62c:	4553      	cmp	r3, sl
 800a62e:	db2b      	blt.n	800a688 <__lshift+0x8c>
 800a630:	6920      	ldr	r0, [r4, #16]
 800a632:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a636:	f104 0314 	add.w	r3, r4, #20
 800a63a:	f016 021f 	ands.w	r2, r6, #31
 800a63e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a642:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a646:	d025      	beq.n	800a694 <__lshift+0x98>
 800a648:	f1c2 0e20 	rsb	lr, r2, #32
 800a64c:	2000      	movs	r0, #0
 800a64e:	681e      	ldr	r6, [r3, #0]
 800a650:	468a      	mov	sl, r1
 800a652:	4096      	lsls	r6, r2
 800a654:	4330      	orrs	r0, r6
 800a656:	f84a 0b04 	str.w	r0, [sl], #4
 800a65a:	f853 0b04 	ldr.w	r0, [r3], #4
 800a65e:	459c      	cmp	ip, r3
 800a660:	fa20 f00e 	lsr.w	r0, r0, lr
 800a664:	d814      	bhi.n	800a690 <__lshift+0x94>
 800a666:	6048      	str	r0, [r1, #4]
 800a668:	b108      	cbz	r0, 800a66e <__lshift+0x72>
 800a66a:	f109 0502 	add.w	r5, r9, #2
 800a66e:	3d01      	subs	r5, #1
 800a670:	4638      	mov	r0, r7
 800a672:	f8c8 5010 	str.w	r5, [r8, #16]
 800a676:	4621      	mov	r1, r4
 800a678:	f7ff fdf5 	bl	800a266 <_Bfree>
 800a67c:	4640      	mov	r0, r8
 800a67e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a682:	3101      	adds	r1, #1
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	e7c7      	b.n	800a618 <__lshift+0x1c>
 800a688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a68c:	3301      	adds	r3, #1
 800a68e:	e7cd      	b.n	800a62c <__lshift+0x30>
 800a690:	4651      	mov	r1, sl
 800a692:	e7dc      	b.n	800a64e <__lshift+0x52>
 800a694:	3904      	subs	r1, #4
 800a696:	f853 2b04 	ldr.w	r2, [r3], #4
 800a69a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a69e:	459c      	cmp	ip, r3
 800a6a0:	d8f9      	bhi.n	800a696 <__lshift+0x9a>
 800a6a2:	e7e4      	b.n	800a66e <__lshift+0x72>

0800a6a4 <__mcmp>:
 800a6a4:	6903      	ldr	r3, [r0, #16]
 800a6a6:	690a      	ldr	r2, [r1, #16]
 800a6a8:	1a9b      	subs	r3, r3, r2
 800a6aa:	b530      	push	{r4, r5, lr}
 800a6ac:	d10c      	bne.n	800a6c8 <__mcmp+0x24>
 800a6ae:	0092      	lsls	r2, r2, #2
 800a6b0:	3014      	adds	r0, #20
 800a6b2:	3114      	adds	r1, #20
 800a6b4:	1884      	adds	r4, r0, r2
 800a6b6:	4411      	add	r1, r2
 800a6b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6c0:	4295      	cmp	r5, r2
 800a6c2:	d003      	beq.n	800a6cc <__mcmp+0x28>
 800a6c4:	d305      	bcc.n	800a6d2 <__mcmp+0x2e>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	bd30      	pop	{r4, r5, pc}
 800a6cc:	42a0      	cmp	r0, r4
 800a6ce:	d3f3      	bcc.n	800a6b8 <__mcmp+0x14>
 800a6d0:	e7fa      	b.n	800a6c8 <__mcmp+0x24>
 800a6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d6:	e7f7      	b.n	800a6c8 <__mcmp+0x24>

0800a6d8 <__mdiff>:
 800a6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6dc:	460d      	mov	r5, r1
 800a6de:	4607      	mov	r7, r0
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	4614      	mov	r4, r2
 800a6e6:	f7ff ffdd 	bl	800a6a4 <__mcmp>
 800a6ea:	1e06      	subs	r6, r0, #0
 800a6ec:	d108      	bne.n	800a700 <__mdiff+0x28>
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	f7ff fd84 	bl	800a1fe <_Balloc>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a700:	bfa4      	itt	ge
 800a702:	4623      	movge	r3, r4
 800a704:	462c      	movge	r4, r5
 800a706:	4638      	mov	r0, r7
 800a708:	6861      	ldr	r1, [r4, #4]
 800a70a:	bfa6      	itte	ge
 800a70c:	461d      	movge	r5, r3
 800a70e:	2600      	movge	r6, #0
 800a710:	2601      	movlt	r6, #1
 800a712:	f7ff fd74 	bl	800a1fe <_Balloc>
 800a716:	692b      	ldr	r3, [r5, #16]
 800a718:	60c6      	str	r6, [r0, #12]
 800a71a:	6926      	ldr	r6, [r4, #16]
 800a71c:	f105 0914 	add.w	r9, r5, #20
 800a720:	f104 0214 	add.w	r2, r4, #20
 800a724:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a728:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a72c:	f100 0514 	add.w	r5, r0, #20
 800a730:	f04f 0e00 	mov.w	lr, #0
 800a734:	f852 ab04 	ldr.w	sl, [r2], #4
 800a738:	f859 4b04 	ldr.w	r4, [r9], #4
 800a73c:	fa1e f18a 	uxtah	r1, lr, sl
 800a740:	b2a3      	uxth	r3, r4
 800a742:	1ac9      	subs	r1, r1, r3
 800a744:	0c23      	lsrs	r3, r4, #16
 800a746:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a74a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a74e:	b289      	uxth	r1, r1
 800a750:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a754:	45c8      	cmp	r8, r9
 800a756:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a75a:	4694      	mov	ip, r2
 800a75c:	f845 3b04 	str.w	r3, [r5], #4
 800a760:	d8e8      	bhi.n	800a734 <__mdiff+0x5c>
 800a762:	45bc      	cmp	ip, r7
 800a764:	d304      	bcc.n	800a770 <__mdiff+0x98>
 800a766:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a76a:	b183      	cbz	r3, 800a78e <__mdiff+0xb6>
 800a76c:	6106      	str	r6, [r0, #16]
 800a76e:	e7c5      	b.n	800a6fc <__mdiff+0x24>
 800a770:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a774:	fa1e f381 	uxtah	r3, lr, r1
 800a778:	141a      	asrs	r2, r3, #16
 800a77a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a77e:	b29b      	uxth	r3, r3
 800a780:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a784:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a788:	f845 3b04 	str.w	r3, [r5], #4
 800a78c:	e7e9      	b.n	800a762 <__mdiff+0x8a>
 800a78e:	3e01      	subs	r6, #1
 800a790:	e7e9      	b.n	800a766 <__mdiff+0x8e>
	...

0800a794 <__ulp>:
 800a794:	4b12      	ldr	r3, [pc, #72]	; (800a7e0 <__ulp+0x4c>)
 800a796:	ee10 2a90 	vmov	r2, s1
 800a79a:	401a      	ands	r2, r3
 800a79c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	dd04      	ble.n	800a7ae <__ulp+0x1a>
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	ec41 0b10 	vmov	d0, r0, r1
 800a7ac:	4770      	bx	lr
 800a7ae:	425b      	negs	r3, r3
 800a7b0:	151b      	asrs	r3, r3, #20
 800a7b2:	2b13      	cmp	r3, #19
 800a7b4:	f04f 0000 	mov.w	r0, #0
 800a7b8:	f04f 0100 	mov.w	r1, #0
 800a7bc:	dc04      	bgt.n	800a7c8 <__ulp+0x34>
 800a7be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a7c2:	fa42 f103 	asr.w	r1, r2, r3
 800a7c6:	e7ef      	b.n	800a7a8 <__ulp+0x14>
 800a7c8:	3b14      	subs	r3, #20
 800a7ca:	2b1e      	cmp	r3, #30
 800a7cc:	f04f 0201 	mov.w	r2, #1
 800a7d0:	bfda      	itte	le
 800a7d2:	f1c3 031f 	rsble	r3, r3, #31
 800a7d6:	fa02 f303 	lslle.w	r3, r2, r3
 800a7da:	4613      	movgt	r3, r2
 800a7dc:	4618      	mov	r0, r3
 800a7de:	e7e3      	b.n	800a7a8 <__ulp+0x14>
 800a7e0:	7ff00000 	.word	0x7ff00000

0800a7e4 <__b2d>:
 800a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e6:	6905      	ldr	r5, [r0, #16]
 800a7e8:	f100 0714 	add.w	r7, r0, #20
 800a7ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a7f0:	1f2e      	subs	r6, r5, #4
 800a7f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f7ff fdc5 	bl	800a386 <__hi0bits>
 800a7fc:	f1c0 0320 	rsb	r3, r0, #32
 800a800:	280a      	cmp	r0, #10
 800a802:	600b      	str	r3, [r1, #0]
 800a804:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a87c <__b2d+0x98>
 800a808:	dc14      	bgt.n	800a834 <__b2d+0x50>
 800a80a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a80e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a812:	42b7      	cmp	r7, r6
 800a814:	ea41 030c 	orr.w	r3, r1, ip
 800a818:	bf34      	ite	cc
 800a81a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a81e:	2100      	movcs	r1, #0
 800a820:	3015      	adds	r0, #21
 800a822:	fa04 f000 	lsl.w	r0, r4, r0
 800a826:	fa21 f10e 	lsr.w	r1, r1, lr
 800a82a:	ea40 0201 	orr.w	r2, r0, r1
 800a82e:	ec43 2b10 	vmov	d0, r2, r3
 800a832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a834:	42b7      	cmp	r7, r6
 800a836:	bf3a      	itte	cc
 800a838:	f1a5 0608 	subcc.w	r6, r5, #8
 800a83c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a840:	2100      	movcs	r1, #0
 800a842:	380b      	subs	r0, #11
 800a844:	d015      	beq.n	800a872 <__b2d+0x8e>
 800a846:	4084      	lsls	r4, r0
 800a848:	f1c0 0520 	rsb	r5, r0, #32
 800a84c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a850:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a854:	42be      	cmp	r6, r7
 800a856:	fa21 fc05 	lsr.w	ip, r1, r5
 800a85a:	ea44 030c 	orr.w	r3, r4, ip
 800a85e:	bf8c      	ite	hi
 800a860:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a864:	2400      	movls	r4, #0
 800a866:	fa01 f000 	lsl.w	r0, r1, r0
 800a86a:	40ec      	lsrs	r4, r5
 800a86c:	ea40 0204 	orr.w	r2, r0, r4
 800a870:	e7dd      	b.n	800a82e <__b2d+0x4a>
 800a872:	ea44 030c 	orr.w	r3, r4, ip
 800a876:	460a      	mov	r2, r1
 800a878:	e7d9      	b.n	800a82e <__b2d+0x4a>
 800a87a:	bf00      	nop
 800a87c:	3ff00000 	.word	0x3ff00000

0800a880 <__d2b>:
 800a880:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a884:	460e      	mov	r6, r1
 800a886:	2101      	movs	r1, #1
 800a888:	ec59 8b10 	vmov	r8, r9, d0
 800a88c:	4615      	mov	r5, r2
 800a88e:	f7ff fcb6 	bl	800a1fe <_Balloc>
 800a892:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a896:	4607      	mov	r7, r0
 800a898:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a89c:	bb34      	cbnz	r4, 800a8ec <__d2b+0x6c>
 800a89e:	9301      	str	r3, [sp, #4]
 800a8a0:	f1b8 0300 	subs.w	r3, r8, #0
 800a8a4:	d027      	beq.n	800a8f6 <__d2b+0x76>
 800a8a6:	a802      	add	r0, sp, #8
 800a8a8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a8ac:	f7ff fd8a 	bl	800a3c4 <__lo0bits>
 800a8b0:	9900      	ldr	r1, [sp, #0]
 800a8b2:	b1f0      	cbz	r0, 800a8f2 <__d2b+0x72>
 800a8b4:	9a01      	ldr	r2, [sp, #4]
 800a8b6:	f1c0 0320 	rsb	r3, r0, #32
 800a8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a8be:	430b      	orrs	r3, r1
 800a8c0:	40c2      	lsrs	r2, r0
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	9201      	str	r2, [sp, #4]
 800a8c6:	9b01      	ldr	r3, [sp, #4]
 800a8c8:	61bb      	str	r3, [r7, #24]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	bf14      	ite	ne
 800a8ce:	2102      	movne	r1, #2
 800a8d0:	2101      	moveq	r1, #1
 800a8d2:	6139      	str	r1, [r7, #16]
 800a8d4:	b1c4      	cbz	r4, 800a908 <__d2b+0x88>
 800a8d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a8da:	4404      	add	r4, r0
 800a8dc:	6034      	str	r4, [r6, #0]
 800a8de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8e2:	6028      	str	r0, [r5, #0]
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	b003      	add	sp, #12
 800a8e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8f0:	e7d5      	b.n	800a89e <__d2b+0x1e>
 800a8f2:	6179      	str	r1, [r7, #20]
 800a8f4:	e7e7      	b.n	800a8c6 <__d2b+0x46>
 800a8f6:	a801      	add	r0, sp, #4
 800a8f8:	f7ff fd64 	bl	800a3c4 <__lo0bits>
 800a8fc:	9b01      	ldr	r3, [sp, #4]
 800a8fe:	617b      	str	r3, [r7, #20]
 800a900:	2101      	movs	r1, #1
 800a902:	6139      	str	r1, [r7, #16]
 800a904:	3020      	adds	r0, #32
 800a906:	e7e5      	b.n	800a8d4 <__d2b+0x54>
 800a908:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a90c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a910:	6030      	str	r0, [r6, #0]
 800a912:	6918      	ldr	r0, [r3, #16]
 800a914:	f7ff fd37 	bl	800a386 <__hi0bits>
 800a918:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a91c:	e7e1      	b.n	800a8e2 <__d2b+0x62>

0800a91e <__ratio>:
 800a91e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a922:	4688      	mov	r8, r1
 800a924:	4669      	mov	r1, sp
 800a926:	4681      	mov	r9, r0
 800a928:	f7ff ff5c 	bl	800a7e4 <__b2d>
 800a92c:	a901      	add	r1, sp, #4
 800a92e:	4640      	mov	r0, r8
 800a930:	ec57 6b10 	vmov	r6, r7, d0
 800a934:	f7ff ff56 	bl	800a7e4 <__b2d>
 800a938:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a93c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a940:	eba3 0c02 	sub.w	ip, r3, r2
 800a944:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a948:	1a9b      	subs	r3, r3, r2
 800a94a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a94e:	ec5b ab10 	vmov	sl, fp, d0
 800a952:	2b00      	cmp	r3, #0
 800a954:	bfce      	itee	gt
 800a956:	463a      	movgt	r2, r7
 800a958:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a95c:	465a      	movle	r2, fp
 800a95e:	4659      	mov	r1, fp
 800a960:	463d      	mov	r5, r7
 800a962:	bfd4      	ite	le
 800a964:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a968:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a96c:	4630      	mov	r0, r6
 800a96e:	ee10 2a10 	vmov	r2, s0
 800a972:	460b      	mov	r3, r1
 800a974:	4629      	mov	r1, r5
 800a976:	f7f5 ff81 	bl	800087c <__aeabi_ddiv>
 800a97a:	ec41 0b10 	vmov	d0, r0, r1
 800a97e:	b003      	add	sp, #12
 800a980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a984 <__copybits>:
 800a984:	3901      	subs	r1, #1
 800a986:	b510      	push	{r4, lr}
 800a988:	1149      	asrs	r1, r1, #5
 800a98a:	6914      	ldr	r4, [r2, #16]
 800a98c:	3101      	adds	r1, #1
 800a98e:	f102 0314 	add.w	r3, r2, #20
 800a992:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a996:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a99a:	42a3      	cmp	r3, r4
 800a99c:	4602      	mov	r2, r0
 800a99e:	d303      	bcc.n	800a9a8 <__copybits+0x24>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	428a      	cmp	r2, r1
 800a9a4:	d305      	bcc.n	800a9b2 <__copybits+0x2e>
 800a9a6:	bd10      	pop	{r4, pc}
 800a9a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ac:	f840 2b04 	str.w	r2, [r0], #4
 800a9b0:	e7f3      	b.n	800a99a <__copybits+0x16>
 800a9b2:	f842 3b04 	str.w	r3, [r2], #4
 800a9b6:	e7f4      	b.n	800a9a2 <__copybits+0x1e>

0800a9b8 <__any_on>:
 800a9b8:	f100 0214 	add.w	r2, r0, #20
 800a9bc:	6900      	ldr	r0, [r0, #16]
 800a9be:	114b      	asrs	r3, r1, #5
 800a9c0:	4298      	cmp	r0, r3
 800a9c2:	b510      	push	{r4, lr}
 800a9c4:	db11      	blt.n	800a9ea <__any_on+0x32>
 800a9c6:	dd0a      	ble.n	800a9de <__any_on+0x26>
 800a9c8:	f011 011f 	ands.w	r1, r1, #31
 800a9cc:	d007      	beq.n	800a9de <__any_on+0x26>
 800a9ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a9d2:	fa24 f001 	lsr.w	r0, r4, r1
 800a9d6:	fa00 f101 	lsl.w	r1, r0, r1
 800a9da:	428c      	cmp	r4, r1
 800a9dc:	d10b      	bne.n	800a9f6 <__any_on+0x3e>
 800a9de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d803      	bhi.n	800a9ee <__any_on+0x36>
 800a9e6:	2000      	movs	r0, #0
 800a9e8:	bd10      	pop	{r4, pc}
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	e7f7      	b.n	800a9de <__any_on+0x26>
 800a9ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9f2:	2900      	cmp	r1, #0
 800a9f4:	d0f5      	beq.n	800a9e2 <__any_on+0x2a>
 800a9f6:	2001      	movs	r0, #1
 800a9f8:	e7f6      	b.n	800a9e8 <__any_on+0x30>

0800a9fa <_calloc_r>:
 800a9fa:	b538      	push	{r3, r4, r5, lr}
 800a9fc:	fb02 f401 	mul.w	r4, r2, r1
 800aa00:	4621      	mov	r1, r4
 800aa02:	f000 f857 	bl	800aab4 <_malloc_r>
 800aa06:	4605      	mov	r5, r0
 800aa08:	b118      	cbz	r0, 800aa12 <_calloc_r+0x18>
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	f7fc fcd3 	bl	80073b8 <memset>
 800aa12:	4628      	mov	r0, r5
 800aa14:	bd38      	pop	{r3, r4, r5, pc}
	...

0800aa18 <_free_r>:
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	4605      	mov	r5, r0
 800aa1c:	2900      	cmp	r1, #0
 800aa1e:	d045      	beq.n	800aaac <_free_r+0x94>
 800aa20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa24:	1f0c      	subs	r4, r1, #4
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	bfb8      	it	lt
 800aa2a:	18e4      	addlt	r4, r4, r3
 800aa2c:	f000 fa36 	bl	800ae9c <__malloc_lock>
 800aa30:	4a1f      	ldr	r2, [pc, #124]	; (800aab0 <_free_r+0x98>)
 800aa32:	6813      	ldr	r3, [r2, #0]
 800aa34:	4610      	mov	r0, r2
 800aa36:	b933      	cbnz	r3, 800aa46 <_free_r+0x2e>
 800aa38:	6063      	str	r3, [r4, #4]
 800aa3a:	6014      	str	r4, [r2, #0]
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa42:	f000 ba2c 	b.w	800ae9e <__malloc_unlock>
 800aa46:	42a3      	cmp	r3, r4
 800aa48:	d90c      	bls.n	800aa64 <_free_r+0x4c>
 800aa4a:	6821      	ldr	r1, [r4, #0]
 800aa4c:	1862      	adds	r2, r4, r1
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	bf04      	itt	eq
 800aa52:	681a      	ldreq	r2, [r3, #0]
 800aa54:	685b      	ldreq	r3, [r3, #4]
 800aa56:	6063      	str	r3, [r4, #4]
 800aa58:	bf04      	itt	eq
 800aa5a:	1852      	addeq	r2, r2, r1
 800aa5c:	6022      	streq	r2, [r4, #0]
 800aa5e:	6004      	str	r4, [r0, #0]
 800aa60:	e7ec      	b.n	800aa3c <_free_r+0x24>
 800aa62:	4613      	mov	r3, r2
 800aa64:	685a      	ldr	r2, [r3, #4]
 800aa66:	b10a      	cbz	r2, 800aa6c <_free_r+0x54>
 800aa68:	42a2      	cmp	r2, r4
 800aa6a:	d9fa      	bls.n	800aa62 <_free_r+0x4a>
 800aa6c:	6819      	ldr	r1, [r3, #0]
 800aa6e:	1858      	adds	r0, r3, r1
 800aa70:	42a0      	cmp	r0, r4
 800aa72:	d10b      	bne.n	800aa8c <_free_r+0x74>
 800aa74:	6820      	ldr	r0, [r4, #0]
 800aa76:	4401      	add	r1, r0
 800aa78:	1858      	adds	r0, r3, r1
 800aa7a:	4282      	cmp	r2, r0
 800aa7c:	6019      	str	r1, [r3, #0]
 800aa7e:	d1dd      	bne.n	800aa3c <_free_r+0x24>
 800aa80:	6810      	ldr	r0, [r2, #0]
 800aa82:	6852      	ldr	r2, [r2, #4]
 800aa84:	605a      	str	r2, [r3, #4]
 800aa86:	4401      	add	r1, r0
 800aa88:	6019      	str	r1, [r3, #0]
 800aa8a:	e7d7      	b.n	800aa3c <_free_r+0x24>
 800aa8c:	d902      	bls.n	800aa94 <_free_r+0x7c>
 800aa8e:	230c      	movs	r3, #12
 800aa90:	602b      	str	r3, [r5, #0]
 800aa92:	e7d3      	b.n	800aa3c <_free_r+0x24>
 800aa94:	6820      	ldr	r0, [r4, #0]
 800aa96:	1821      	adds	r1, r4, r0
 800aa98:	428a      	cmp	r2, r1
 800aa9a:	bf04      	itt	eq
 800aa9c:	6811      	ldreq	r1, [r2, #0]
 800aa9e:	6852      	ldreq	r2, [r2, #4]
 800aaa0:	6062      	str	r2, [r4, #4]
 800aaa2:	bf04      	itt	eq
 800aaa4:	1809      	addeq	r1, r1, r0
 800aaa6:	6021      	streq	r1, [r4, #0]
 800aaa8:	605c      	str	r4, [r3, #4]
 800aaaa:	e7c7      	b.n	800aa3c <_free_r+0x24>
 800aaac:	bd38      	pop	{r3, r4, r5, pc}
 800aaae:	bf00      	nop
 800aab0:	20000210 	.word	0x20000210

0800aab4 <_malloc_r>:
 800aab4:	b570      	push	{r4, r5, r6, lr}
 800aab6:	1ccd      	adds	r5, r1, #3
 800aab8:	f025 0503 	bic.w	r5, r5, #3
 800aabc:	3508      	adds	r5, #8
 800aabe:	2d0c      	cmp	r5, #12
 800aac0:	bf38      	it	cc
 800aac2:	250c      	movcc	r5, #12
 800aac4:	2d00      	cmp	r5, #0
 800aac6:	4606      	mov	r6, r0
 800aac8:	db01      	blt.n	800aace <_malloc_r+0x1a>
 800aaca:	42a9      	cmp	r1, r5
 800aacc:	d903      	bls.n	800aad6 <_malloc_r+0x22>
 800aace:	230c      	movs	r3, #12
 800aad0:	6033      	str	r3, [r6, #0]
 800aad2:	2000      	movs	r0, #0
 800aad4:	bd70      	pop	{r4, r5, r6, pc}
 800aad6:	f000 f9e1 	bl	800ae9c <__malloc_lock>
 800aada:	4a21      	ldr	r2, [pc, #132]	; (800ab60 <_malloc_r+0xac>)
 800aadc:	6814      	ldr	r4, [r2, #0]
 800aade:	4621      	mov	r1, r4
 800aae0:	b991      	cbnz	r1, 800ab08 <_malloc_r+0x54>
 800aae2:	4c20      	ldr	r4, [pc, #128]	; (800ab64 <_malloc_r+0xb0>)
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	b91b      	cbnz	r3, 800aaf0 <_malloc_r+0x3c>
 800aae8:	4630      	mov	r0, r6
 800aaea:	f000 f98f 	bl	800ae0c <_sbrk_r>
 800aaee:	6020      	str	r0, [r4, #0]
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f000 f98a 	bl	800ae0c <_sbrk_r>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d124      	bne.n	800ab46 <_malloc_r+0x92>
 800aafc:	230c      	movs	r3, #12
 800aafe:	6033      	str	r3, [r6, #0]
 800ab00:	4630      	mov	r0, r6
 800ab02:	f000 f9cc 	bl	800ae9e <__malloc_unlock>
 800ab06:	e7e4      	b.n	800aad2 <_malloc_r+0x1e>
 800ab08:	680b      	ldr	r3, [r1, #0]
 800ab0a:	1b5b      	subs	r3, r3, r5
 800ab0c:	d418      	bmi.n	800ab40 <_malloc_r+0x8c>
 800ab0e:	2b0b      	cmp	r3, #11
 800ab10:	d90f      	bls.n	800ab32 <_malloc_r+0x7e>
 800ab12:	600b      	str	r3, [r1, #0]
 800ab14:	50cd      	str	r5, [r1, r3]
 800ab16:	18cc      	adds	r4, r1, r3
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f000 f9c0 	bl	800ae9e <__malloc_unlock>
 800ab1e:	f104 000b 	add.w	r0, r4, #11
 800ab22:	1d23      	adds	r3, r4, #4
 800ab24:	f020 0007 	bic.w	r0, r0, #7
 800ab28:	1ac3      	subs	r3, r0, r3
 800ab2a:	d0d3      	beq.n	800aad4 <_malloc_r+0x20>
 800ab2c:	425a      	negs	r2, r3
 800ab2e:	50e2      	str	r2, [r4, r3]
 800ab30:	e7d0      	b.n	800aad4 <_malloc_r+0x20>
 800ab32:	428c      	cmp	r4, r1
 800ab34:	684b      	ldr	r3, [r1, #4]
 800ab36:	bf16      	itet	ne
 800ab38:	6063      	strne	r3, [r4, #4]
 800ab3a:	6013      	streq	r3, [r2, #0]
 800ab3c:	460c      	movne	r4, r1
 800ab3e:	e7eb      	b.n	800ab18 <_malloc_r+0x64>
 800ab40:	460c      	mov	r4, r1
 800ab42:	6849      	ldr	r1, [r1, #4]
 800ab44:	e7cc      	b.n	800aae0 <_malloc_r+0x2c>
 800ab46:	1cc4      	adds	r4, r0, #3
 800ab48:	f024 0403 	bic.w	r4, r4, #3
 800ab4c:	42a0      	cmp	r0, r4
 800ab4e:	d005      	beq.n	800ab5c <_malloc_r+0xa8>
 800ab50:	1a21      	subs	r1, r4, r0
 800ab52:	4630      	mov	r0, r6
 800ab54:	f000 f95a 	bl	800ae0c <_sbrk_r>
 800ab58:	3001      	adds	r0, #1
 800ab5a:	d0cf      	beq.n	800aafc <_malloc_r+0x48>
 800ab5c:	6025      	str	r5, [r4, #0]
 800ab5e:	e7db      	b.n	800ab18 <_malloc_r+0x64>
 800ab60:	20000210 	.word	0x20000210
 800ab64:	20000214 	.word	0x20000214

0800ab68 <__ssputs_r>:
 800ab68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6c:	688e      	ldr	r6, [r1, #8]
 800ab6e:	429e      	cmp	r6, r3
 800ab70:	4682      	mov	sl, r0
 800ab72:	460c      	mov	r4, r1
 800ab74:	4690      	mov	r8, r2
 800ab76:	4699      	mov	r9, r3
 800ab78:	d837      	bhi.n	800abea <__ssputs_r+0x82>
 800ab7a:	898a      	ldrh	r2, [r1, #12]
 800ab7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab80:	d031      	beq.n	800abe6 <__ssputs_r+0x7e>
 800ab82:	6825      	ldr	r5, [r4, #0]
 800ab84:	6909      	ldr	r1, [r1, #16]
 800ab86:	1a6f      	subs	r7, r5, r1
 800ab88:	6965      	ldr	r5, [r4, #20]
 800ab8a:	2302      	movs	r3, #2
 800ab8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab90:	fb95 f5f3 	sdiv	r5, r5, r3
 800ab94:	f109 0301 	add.w	r3, r9, #1
 800ab98:	443b      	add	r3, r7
 800ab9a:	429d      	cmp	r5, r3
 800ab9c:	bf38      	it	cc
 800ab9e:	461d      	movcc	r5, r3
 800aba0:	0553      	lsls	r3, r2, #21
 800aba2:	d530      	bpl.n	800ac06 <__ssputs_r+0x9e>
 800aba4:	4629      	mov	r1, r5
 800aba6:	f7ff ff85 	bl	800aab4 <_malloc_r>
 800abaa:	4606      	mov	r6, r0
 800abac:	b950      	cbnz	r0, 800abc4 <__ssputs_r+0x5c>
 800abae:	230c      	movs	r3, #12
 800abb0:	f8ca 3000 	str.w	r3, [sl]
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abba:	81a3      	strh	r3, [r4, #12]
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295
 800abc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc4:	463a      	mov	r2, r7
 800abc6:	6921      	ldr	r1, [r4, #16]
 800abc8:	f7ff fb0e 	bl	800a1e8 <memcpy>
 800abcc:	89a3      	ldrh	r3, [r4, #12]
 800abce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd6:	81a3      	strh	r3, [r4, #12]
 800abd8:	6126      	str	r6, [r4, #16]
 800abda:	6165      	str	r5, [r4, #20]
 800abdc:	443e      	add	r6, r7
 800abde:	1bed      	subs	r5, r5, r7
 800abe0:	6026      	str	r6, [r4, #0]
 800abe2:	60a5      	str	r5, [r4, #8]
 800abe4:	464e      	mov	r6, r9
 800abe6:	454e      	cmp	r6, r9
 800abe8:	d900      	bls.n	800abec <__ssputs_r+0x84>
 800abea:	464e      	mov	r6, r9
 800abec:	4632      	mov	r2, r6
 800abee:	4641      	mov	r1, r8
 800abf0:	6820      	ldr	r0, [r4, #0]
 800abf2:	f000 f93a 	bl	800ae6a <memmove>
 800abf6:	68a3      	ldr	r3, [r4, #8]
 800abf8:	1b9b      	subs	r3, r3, r6
 800abfa:	60a3      	str	r3, [r4, #8]
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	441e      	add	r6, r3
 800ac00:	6026      	str	r6, [r4, #0]
 800ac02:	2000      	movs	r0, #0
 800ac04:	e7dc      	b.n	800abc0 <__ssputs_r+0x58>
 800ac06:	462a      	mov	r2, r5
 800ac08:	f000 f94a 	bl	800aea0 <_realloc_r>
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d1e2      	bne.n	800abd8 <__ssputs_r+0x70>
 800ac12:	6921      	ldr	r1, [r4, #16]
 800ac14:	4650      	mov	r0, sl
 800ac16:	f7ff feff 	bl	800aa18 <_free_r>
 800ac1a:	e7c8      	b.n	800abae <__ssputs_r+0x46>

0800ac1c <_svfiprintf_r>:
 800ac1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac20:	461d      	mov	r5, r3
 800ac22:	898b      	ldrh	r3, [r1, #12]
 800ac24:	061f      	lsls	r7, r3, #24
 800ac26:	b09d      	sub	sp, #116	; 0x74
 800ac28:	4680      	mov	r8, r0
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	4616      	mov	r6, r2
 800ac2e:	d50f      	bpl.n	800ac50 <_svfiprintf_r+0x34>
 800ac30:	690b      	ldr	r3, [r1, #16]
 800ac32:	b96b      	cbnz	r3, 800ac50 <_svfiprintf_r+0x34>
 800ac34:	2140      	movs	r1, #64	; 0x40
 800ac36:	f7ff ff3d 	bl	800aab4 <_malloc_r>
 800ac3a:	6020      	str	r0, [r4, #0]
 800ac3c:	6120      	str	r0, [r4, #16]
 800ac3e:	b928      	cbnz	r0, 800ac4c <_svfiprintf_r+0x30>
 800ac40:	230c      	movs	r3, #12
 800ac42:	f8c8 3000 	str.w	r3, [r8]
 800ac46:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4a:	e0c8      	b.n	800adde <_svfiprintf_r+0x1c2>
 800ac4c:	2340      	movs	r3, #64	; 0x40
 800ac4e:	6163      	str	r3, [r4, #20]
 800ac50:	2300      	movs	r3, #0
 800ac52:	9309      	str	r3, [sp, #36]	; 0x24
 800ac54:	2320      	movs	r3, #32
 800ac56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac5a:	2330      	movs	r3, #48	; 0x30
 800ac5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac60:	9503      	str	r5, [sp, #12]
 800ac62:	f04f 0b01 	mov.w	fp, #1
 800ac66:	4637      	mov	r7, r6
 800ac68:	463d      	mov	r5, r7
 800ac6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ac6e:	b10b      	cbz	r3, 800ac74 <_svfiprintf_r+0x58>
 800ac70:	2b25      	cmp	r3, #37	; 0x25
 800ac72:	d13e      	bne.n	800acf2 <_svfiprintf_r+0xd6>
 800ac74:	ebb7 0a06 	subs.w	sl, r7, r6
 800ac78:	d00b      	beq.n	800ac92 <_svfiprintf_r+0x76>
 800ac7a:	4653      	mov	r3, sl
 800ac7c:	4632      	mov	r2, r6
 800ac7e:	4621      	mov	r1, r4
 800ac80:	4640      	mov	r0, r8
 800ac82:	f7ff ff71 	bl	800ab68 <__ssputs_r>
 800ac86:	3001      	adds	r0, #1
 800ac88:	f000 80a4 	beq.w	800add4 <_svfiprintf_r+0x1b8>
 800ac8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac8e:	4453      	add	r3, sl
 800ac90:	9309      	str	r3, [sp, #36]	; 0x24
 800ac92:	783b      	ldrb	r3, [r7, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 809d 	beq.w	800add4 <_svfiprintf_r+0x1b8>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aca0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aca4:	9304      	str	r3, [sp, #16]
 800aca6:	9307      	str	r3, [sp, #28]
 800aca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acac:	931a      	str	r3, [sp, #104]	; 0x68
 800acae:	462f      	mov	r7, r5
 800acb0:	2205      	movs	r2, #5
 800acb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800acb6:	4850      	ldr	r0, [pc, #320]	; (800adf8 <_svfiprintf_r+0x1dc>)
 800acb8:	f7f5 faaa 	bl	8000210 <memchr>
 800acbc:	9b04      	ldr	r3, [sp, #16]
 800acbe:	b9d0      	cbnz	r0, 800acf6 <_svfiprintf_r+0xda>
 800acc0:	06d9      	lsls	r1, r3, #27
 800acc2:	bf44      	itt	mi
 800acc4:	2220      	movmi	r2, #32
 800acc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800acca:	071a      	lsls	r2, r3, #28
 800accc:	bf44      	itt	mi
 800acce:	222b      	movmi	r2, #43	; 0x2b
 800acd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800acd4:	782a      	ldrb	r2, [r5, #0]
 800acd6:	2a2a      	cmp	r2, #42	; 0x2a
 800acd8:	d015      	beq.n	800ad06 <_svfiprintf_r+0xea>
 800acda:	9a07      	ldr	r2, [sp, #28]
 800acdc:	462f      	mov	r7, r5
 800acde:	2000      	movs	r0, #0
 800ace0:	250a      	movs	r5, #10
 800ace2:	4639      	mov	r1, r7
 800ace4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ace8:	3b30      	subs	r3, #48	; 0x30
 800acea:	2b09      	cmp	r3, #9
 800acec:	d94d      	bls.n	800ad8a <_svfiprintf_r+0x16e>
 800acee:	b1b8      	cbz	r0, 800ad20 <_svfiprintf_r+0x104>
 800acf0:	e00f      	b.n	800ad12 <_svfiprintf_r+0xf6>
 800acf2:	462f      	mov	r7, r5
 800acf4:	e7b8      	b.n	800ac68 <_svfiprintf_r+0x4c>
 800acf6:	4a40      	ldr	r2, [pc, #256]	; (800adf8 <_svfiprintf_r+0x1dc>)
 800acf8:	1a80      	subs	r0, r0, r2
 800acfa:	fa0b f000 	lsl.w	r0, fp, r0
 800acfe:	4318      	orrs	r0, r3
 800ad00:	9004      	str	r0, [sp, #16]
 800ad02:	463d      	mov	r5, r7
 800ad04:	e7d3      	b.n	800acae <_svfiprintf_r+0x92>
 800ad06:	9a03      	ldr	r2, [sp, #12]
 800ad08:	1d11      	adds	r1, r2, #4
 800ad0a:	6812      	ldr	r2, [r2, #0]
 800ad0c:	9103      	str	r1, [sp, #12]
 800ad0e:	2a00      	cmp	r2, #0
 800ad10:	db01      	blt.n	800ad16 <_svfiprintf_r+0xfa>
 800ad12:	9207      	str	r2, [sp, #28]
 800ad14:	e004      	b.n	800ad20 <_svfiprintf_r+0x104>
 800ad16:	4252      	negs	r2, r2
 800ad18:	f043 0302 	orr.w	r3, r3, #2
 800ad1c:	9207      	str	r2, [sp, #28]
 800ad1e:	9304      	str	r3, [sp, #16]
 800ad20:	783b      	ldrb	r3, [r7, #0]
 800ad22:	2b2e      	cmp	r3, #46	; 0x2e
 800ad24:	d10c      	bne.n	800ad40 <_svfiprintf_r+0x124>
 800ad26:	787b      	ldrb	r3, [r7, #1]
 800ad28:	2b2a      	cmp	r3, #42	; 0x2a
 800ad2a:	d133      	bne.n	800ad94 <_svfiprintf_r+0x178>
 800ad2c:	9b03      	ldr	r3, [sp, #12]
 800ad2e:	1d1a      	adds	r2, r3, #4
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	9203      	str	r2, [sp, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	bfb8      	it	lt
 800ad38:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad3c:	3702      	adds	r7, #2
 800ad3e:	9305      	str	r3, [sp, #20]
 800ad40:	4d2e      	ldr	r5, [pc, #184]	; (800adfc <_svfiprintf_r+0x1e0>)
 800ad42:	7839      	ldrb	r1, [r7, #0]
 800ad44:	2203      	movs	r2, #3
 800ad46:	4628      	mov	r0, r5
 800ad48:	f7f5 fa62 	bl	8000210 <memchr>
 800ad4c:	b138      	cbz	r0, 800ad5e <_svfiprintf_r+0x142>
 800ad4e:	2340      	movs	r3, #64	; 0x40
 800ad50:	1b40      	subs	r0, r0, r5
 800ad52:	fa03 f000 	lsl.w	r0, r3, r0
 800ad56:	9b04      	ldr	r3, [sp, #16]
 800ad58:	4303      	orrs	r3, r0
 800ad5a:	3701      	adds	r7, #1
 800ad5c:	9304      	str	r3, [sp, #16]
 800ad5e:	7839      	ldrb	r1, [r7, #0]
 800ad60:	4827      	ldr	r0, [pc, #156]	; (800ae00 <_svfiprintf_r+0x1e4>)
 800ad62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad66:	2206      	movs	r2, #6
 800ad68:	1c7e      	adds	r6, r7, #1
 800ad6a:	f7f5 fa51 	bl	8000210 <memchr>
 800ad6e:	2800      	cmp	r0, #0
 800ad70:	d038      	beq.n	800ade4 <_svfiprintf_r+0x1c8>
 800ad72:	4b24      	ldr	r3, [pc, #144]	; (800ae04 <_svfiprintf_r+0x1e8>)
 800ad74:	bb13      	cbnz	r3, 800adbc <_svfiprintf_r+0x1a0>
 800ad76:	9b03      	ldr	r3, [sp, #12]
 800ad78:	3307      	adds	r3, #7
 800ad7a:	f023 0307 	bic.w	r3, r3, #7
 800ad7e:	3308      	adds	r3, #8
 800ad80:	9303      	str	r3, [sp, #12]
 800ad82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad84:	444b      	add	r3, r9
 800ad86:	9309      	str	r3, [sp, #36]	; 0x24
 800ad88:	e76d      	b.n	800ac66 <_svfiprintf_r+0x4a>
 800ad8a:	fb05 3202 	mla	r2, r5, r2, r3
 800ad8e:	2001      	movs	r0, #1
 800ad90:	460f      	mov	r7, r1
 800ad92:	e7a6      	b.n	800ace2 <_svfiprintf_r+0xc6>
 800ad94:	2300      	movs	r3, #0
 800ad96:	3701      	adds	r7, #1
 800ad98:	9305      	str	r3, [sp, #20]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	250a      	movs	r5, #10
 800ad9e:	4638      	mov	r0, r7
 800ada0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ada4:	3a30      	subs	r2, #48	; 0x30
 800ada6:	2a09      	cmp	r2, #9
 800ada8:	d903      	bls.n	800adb2 <_svfiprintf_r+0x196>
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d0c8      	beq.n	800ad40 <_svfiprintf_r+0x124>
 800adae:	9105      	str	r1, [sp, #20]
 800adb0:	e7c6      	b.n	800ad40 <_svfiprintf_r+0x124>
 800adb2:	fb05 2101 	mla	r1, r5, r1, r2
 800adb6:	2301      	movs	r3, #1
 800adb8:	4607      	mov	r7, r0
 800adba:	e7f0      	b.n	800ad9e <_svfiprintf_r+0x182>
 800adbc:	ab03      	add	r3, sp, #12
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	4622      	mov	r2, r4
 800adc2:	4b11      	ldr	r3, [pc, #68]	; (800ae08 <_svfiprintf_r+0x1ec>)
 800adc4:	a904      	add	r1, sp, #16
 800adc6:	4640      	mov	r0, r8
 800adc8:	f7fc fb92 	bl	80074f0 <_printf_float>
 800adcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800add0:	4681      	mov	r9, r0
 800add2:	d1d6      	bne.n	800ad82 <_svfiprintf_r+0x166>
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	065b      	lsls	r3, r3, #25
 800add8:	f53f af35 	bmi.w	800ac46 <_svfiprintf_r+0x2a>
 800addc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adde:	b01d      	add	sp, #116	; 0x74
 800ade0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade4:	ab03      	add	r3, sp, #12
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	4622      	mov	r2, r4
 800adea:	4b07      	ldr	r3, [pc, #28]	; (800ae08 <_svfiprintf_r+0x1ec>)
 800adec:	a904      	add	r1, sp, #16
 800adee:	4640      	mov	r0, r8
 800adf0:	f7fc fe34 	bl	8007a5c <_printf_i>
 800adf4:	e7ea      	b.n	800adcc <_svfiprintf_r+0x1b0>
 800adf6:	bf00      	nop
 800adf8:	0800b0fc 	.word	0x0800b0fc
 800adfc:	0800b102 	.word	0x0800b102
 800ae00:	0800b106 	.word	0x0800b106
 800ae04:	080074f1 	.word	0x080074f1
 800ae08:	0800ab69 	.word	0x0800ab69

0800ae0c <_sbrk_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4c06      	ldr	r4, [pc, #24]	; (800ae28 <_sbrk_r+0x1c>)
 800ae10:	2300      	movs	r3, #0
 800ae12:	4605      	mov	r5, r0
 800ae14:	4608      	mov	r0, r1
 800ae16:	6023      	str	r3, [r4, #0]
 800ae18:	f7f8 f864 	bl	8002ee4 <_sbrk>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	d102      	bne.n	800ae26 <_sbrk_r+0x1a>
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	b103      	cbz	r3, 800ae26 <_sbrk_r+0x1a>
 800ae24:	602b      	str	r3, [r5, #0]
 800ae26:	bd38      	pop	{r3, r4, r5, pc}
 800ae28:	20000548 	.word	0x20000548

0800ae2c <strncmp>:
 800ae2c:	b510      	push	{r4, lr}
 800ae2e:	b16a      	cbz	r2, 800ae4c <strncmp+0x20>
 800ae30:	3901      	subs	r1, #1
 800ae32:	1884      	adds	r4, r0, r2
 800ae34:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ae38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d103      	bne.n	800ae48 <strncmp+0x1c>
 800ae40:	42a0      	cmp	r0, r4
 800ae42:	d001      	beq.n	800ae48 <strncmp+0x1c>
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1f5      	bne.n	800ae34 <strncmp+0x8>
 800ae48:	1a98      	subs	r0, r3, r2
 800ae4a:	bd10      	pop	{r4, pc}
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	e7fc      	b.n	800ae4a <strncmp+0x1e>

0800ae50 <__ascii_wctomb>:
 800ae50:	b149      	cbz	r1, 800ae66 <__ascii_wctomb+0x16>
 800ae52:	2aff      	cmp	r2, #255	; 0xff
 800ae54:	bf85      	ittet	hi
 800ae56:	238a      	movhi	r3, #138	; 0x8a
 800ae58:	6003      	strhi	r3, [r0, #0]
 800ae5a:	700a      	strbls	r2, [r1, #0]
 800ae5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae60:	bf98      	it	ls
 800ae62:	2001      	movls	r0, #1
 800ae64:	4770      	bx	lr
 800ae66:	4608      	mov	r0, r1
 800ae68:	4770      	bx	lr

0800ae6a <memmove>:
 800ae6a:	4288      	cmp	r0, r1
 800ae6c:	b510      	push	{r4, lr}
 800ae6e:	eb01 0302 	add.w	r3, r1, r2
 800ae72:	d807      	bhi.n	800ae84 <memmove+0x1a>
 800ae74:	1e42      	subs	r2, r0, #1
 800ae76:	4299      	cmp	r1, r3
 800ae78:	d00a      	beq.n	800ae90 <memmove+0x26>
 800ae7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae7e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ae82:	e7f8      	b.n	800ae76 <memmove+0xc>
 800ae84:	4283      	cmp	r3, r0
 800ae86:	d9f5      	bls.n	800ae74 <memmove+0xa>
 800ae88:	1881      	adds	r1, r0, r2
 800ae8a:	1ad2      	subs	r2, r2, r3
 800ae8c:	42d3      	cmn	r3, r2
 800ae8e:	d100      	bne.n	800ae92 <memmove+0x28>
 800ae90:	bd10      	pop	{r4, pc}
 800ae92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ae9a:	e7f7      	b.n	800ae8c <memmove+0x22>

0800ae9c <__malloc_lock>:
 800ae9c:	4770      	bx	lr

0800ae9e <__malloc_unlock>:
 800ae9e:	4770      	bx	lr

0800aea0 <_realloc_r>:
 800aea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea2:	4607      	mov	r7, r0
 800aea4:	4614      	mov	r4, r2
 800aea6:	460e      	mov	r6, r1
 800aea8:	b921      	cbnz	r1, 800aeb4 <_realloc_r+0x14>
 800aeaa:	4611      	mov	r1, r2
 800aeac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aeb0:	f7ff be00 	b.w	800aab4 <_malloc_r>
 800aeb4:	b922      	cbnz	r2, 800aec0 <_realloc_r+0x20>
 800aeb6:	f7ff fdaf 	bl	800aa18 <_free_r>
 800aeba:	4625      	mov	r5, r4
 800aebc:	4628      	mov	r0, r5
 800aebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aec0:	f000 f814 	bl	800aeec <_malloc_usable_size_r>
 800aec4:	42a0      	cmp	r0, r4
 800aec6:	d20f      	bcs.n	800aee8 <_realloc_r+0x48>
 800aec8:	4621      	mov	r1, r4
 800aeca:	4638      	mov	r0, r7
 800aecc:	f7ff fdf2 	bl	800aab4 <_malloc_r>
 800aed0:	4605      	mov	r5, r0
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d0f2      	beq.n	800aebc <_realloc_r+0x1c>
 800aed6:	4631      	mov	r1, r6
 800aed8:	4622      	mov	r2, r4
 800aeda:	f7ff f985 	bl	800a1e8 <memcpy>
 800aede:	4631      	mov	r1, r6
 800aee0:	4638      	mov	r0, r7
 800aee2:	f7ff fd99 	bl	800aa18 <_free_r>
 800aee6:	e7e9      	b.n	800aebc <_realloc_r+0x1c>
 800aee8:	4635      	mov	r5, r6
 800aeea:	e7e7      	b.n	800aebc <_realloc_r+0x1c>

0800aeec <_malloc_usable_size_r>:
 800aeec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aef0:	1f18      	subs	r0, r3, #4
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	bfbc      	itt	lt
 800aef6:	580b      	ldrlt	r3, [r1, r0]
 800aef8:	18c0      	addlt	r0, r0, r3
 800aefa:	4770      	bx	lr

0800aefc <_init>:
 800aefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefe:	bf00      	nop
 800af00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af02:	bc08      	pop	{r3}
 800af04:	469e      	mov	lr, r3
 800af06:	4770      	bx	lr

0800af08 <_fini>:
 800af08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0a:	bf00      	nop
 800af0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af0e:	bc08      	pop	{r3}
 800af10:	469e      	mov	lr, r3
 800af12:	4770      	bx	lr
